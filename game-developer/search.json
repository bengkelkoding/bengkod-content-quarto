[
  {
    "objectID": "game-prak-1.html#download-dan-install-unity",
    "href": "game-prak-1.html#download-dan-install-unity",
    "title": "Pertemuan 1",
    "section": "Download dan Install Unity",
    "text": "Download dan Install Unity\n\nDownload Minimal versi Unity 5.3 atau Unity terbaru di: https://unity3d.com/get-unity/download?ref=personal atau https://store.unity.com/\nInstal Unity yang sudah di download. Jika ditanya tentang standard asset. Instal atau centang juga standar asset Unity.\nPertama kali instalasi pilih personal edition JANGAN PROFESIONAL.\nUntuk launch unity pertama kali HARUS ONLINE dan akan ditanya juga tentang profil dan email. Isikan terserah dengan email yang BENAR.\nSetelah memasukkan email, maka akan muncul pesan di email untuk validasi.\nSetelah di klik tautan pada email untuk validasi, Unity akan bisa digunakan baik online ataupun OFFLINE.\nPenjelasan untuk UI yang ada pada Unity bisa dilihat di: https://unity3d.com/learn/tutorials/topics/interface-essentials\n\nPRAKTIKUM (DIRUMAH):\nDownload dan install unity dirumah dengan menggunakan PC/Notebook pribadi!"
  },
  {
    "objectID": "game-prak-1.html#membuat-project",
    "href": "game-prak-1.html#membuat-project",
    "title": "1. Download dan Install Unity",
    "section": "Membuat Project",
    "text": "Membuat Project\nDibeberapa versi unity sebelum 5.6, ketika pertama kali membuka project unity (setelah instalasi unity) diwajibkan untuk online. Daftarkan diri kamu dengan cara sign up dan kemudian tunggu email verifikasi dari unity. Setelah itu, sign in unity dan isi survey. Pilih edisi “personal” untuk versi unity yang gratis. Jika ingin versi unity yang berbayar pilih edisi “profesional”. Setelah itu buat project baru dengan klik tab “NEW” pada sebelah kanan atas. Lalu klik “New Project”. Setelah itu akan muncul gambar seperti dibawah ini:\n\nProject Name berupa nama project Game yang akan dibuat. Location merupakan direktori dimana projek game akan disimpan. Tombol 3D dan 2D merupakan tombol untuk menentukan apakah game yang akan dibuat merupakan game 3D atau 2D. Hal ini akan berpengaruh pada antarmuka unity selanjutnya. Kita dapat menggunakan asset game atau standard asset yang sudah disiapkan oleh Unity yang sebelumnya sudah di install terlebih dulu. Asset packages memungkinkan kita untuk dapat secara bebas menggunakan standard assets Unity. Jika sudah siap dengan persiapan project maka tekan “Create Project”.\n\nPRAKTIKUM:\nBuat project game 2D dengan nama “Latihan1_2D” dan simpan pada direktori selain “C:” ! (perhatikan bahwa tidak ada asset package yang dipilih)\nKUMPULKAN:\nScreenshoot ketika sedang akan membuat project baru dan berada dihalaman “Project”. Beri nama sc_01_01.jpg"
  },
  {
    "objectID": "game-prak-1.html#antarmuka-unity",
    "href": "game-prak-1.html#antarmuka-unity",
    "title": "1. Download dan Install Unity",
    "section": "Antarmuka Unity",
    "text": "Antarmuka Unity\nBerikut adalah gambar antarmuka unity yang dibagi kedalam lima bagian utama: Project Window, Scene View, Hierarchy window, Inspector Window, dan Toolbar:\n\n\nProject Window\nProject window memperlihatkan aset-aset game yang masih mentah dimana kita dapat melakukan drag and drop aset game berupa gambar, suara, script, model 3d, dan asset lain. Disamping itu kita juga membuat bisa membuat script,folder, material, dll dengan melakukan klik kanan:\n\n\n\nScene View\nScene view memperbolehkan kita untuk melakukan manipulasi langsung berupa menambahkan objek ke scene game atau mengedit objek. Scene view dapat memperlihatkan scene game dengan sudut pandang 2D atau 3D tergantung project yang sebelumnya sudah dipilih.\n\n\n\nHierarchy Window\nHierarchy window merupakan representasi teks dari game objek yang terdapat pada Scene View. Struktur dari beberapa Game objek dalam satu scene diperlihatkan pada hierarchy window ini. Perhatikan bahwa game object berbeda dengan game asset. Game asset belum berbentuk game objek. Berikut adalah gambar hierarchy window yang memperlihatkan struktur game objek:\n\n\n\nInspector Window\nInspector window akan memperlihatkan property dari setiap game objek yang ada. Untuk melihat property salah satu game objek. Pilih dan tekan salah satu game object di hierarchy window dan lihat propertinya di Inspector Window. Letak inspector window diperlihatkan pada gambar berikut:\n\n\n\nToolbar\nToolbar menyediakan tools untuk menunjang pengembangan game dengan Unity. Berikut adalah gambar dari toolbar:"
  },
  {
    "objectID": "game-prak-1.html#project-window",
    "href": "game-prak-1.html#project-window",
    "title": "1  Intro",
    "section": "1.4 Project Window",
    "text": "1.4 Project Window\nProject window memperlihatkan aset-aset game yang masih mentah dimana kita dapat melakukan drag and drop aset game berupa gambar, suara, script, model 3d, dan asset lain. Disamping itu kita juga membuat bisa membuat script,folder, material, dll dengan melakukan klik kanan:\n\n\n\ngambar1"
  },
  {
    "objectID": "game-prak-1.html#scene-view",
    "href": "game-prak-1.html#scene-view",
    "title": "1  Intro",
    "section": "1.5 Scene View",
    "text": "1.5 Scene View\nScene view memperbolehkan kita untuk melakukan manipulasi langsung berupa menambahkan objek ke scene game atau mengedit objek. Scene view dapat memperlihatkan scene game dengan sudut pandang 2D atau 3D tergantung project yang sebelumnya sudah dipilih.\n\n\n\ngambar1"
  },
  {
    "objectID": "game-prak-1.html#hierarchy-window",
    "href": "game-prak-1.html#hierarchy-window",
    "title": "1  Intro",
    "section": "1.6 Hierarchy Window",
    "text": "1.6 Hierarchy Window\nHierarchy window merupakan representasi teks dari game objek yang terdapat pada Scene View. Struktur dari beberapa Game objek dalam satu scene diperlihatkan pada hierarchy window ini. Perhatikan bahwa game object berbeda dengan game asset. Game asset belum berbentuk game objek. Berikut adalah gambar hierarchy window yang memperlihatkan struktur game objek:\n\n\n\ngambar1"
  },
  {
    "objectID": "game-prak-1.html#inspector-window",
    "href": "game-prak-1.html#inspector-window",
    "title": "1  Intro",
    "section": "1.7 Inspector Window",
    "text": "1.7 Inspector Window\nInspector window akan memperlihatkan property dari setiap game objek yang ada. Untuk melihat property salah satu game objek. Pilih dan tekan salah satu game object di hierarchy window dan lihat propertinya di Inspector Window. Letak inspector window diperlihatkan pada gambar berikut:\n\n\n\ngambar1"
  },
  {
    "objectID": "game-prak-1.html#toolbar",
    "href": "game-prak-1.html#toolbar",
    "title": "1  Intro",
    "section": "1.8 Toolbar",
    "text": "1.8 Toolbar\nToolbar menyediakan tools untuk menunjang pengembangan game dengan Unity. Berikut adalah gambar dari toolbar:\n\n\n\ngambar1"
  },
  {
    "objectID": "game-prak-1.html#game-view",
    "href": "game-prak-1.html#game-view",
    "title": "1. Download dan Install Unity",
    "section": "Game View",
    "text": "Game View\nGame view letaknya disebelah tab Scene. Jika kita klik play button pada toolbar maka akan diarahkan ke Game View. Game View merupakan tampilan game yang telah dikembangkan. Pastikan ketika mengedit nilai di Inspector sudah dalam posisi Scene tab dan tidak dalam posisi “Play”.\n\n\nPRAKTIKUM:\nDari game project yang sudah dibuat lakukan hal berikut: 1. Masukan file “gambar1.png” dan drag kedalam Project Window. 2. Klik gambar yang ada di Project Window tersebut dan lihat di Inspector. 3. Screenshot Inspector dan beri nama sc_01_02.jpg 4. Klik gambar tadi yang ada di Project Window dan drag ke Scene View. 5. Klik Play 6. Screenshot keseluruhan editor Unity dan beri nama sc_01_03.jpg\nKUMPULKAN:\nKumpulkan sc_01_02.jpg dan sc_01_03.jpg"
  },
  {
    "objectID": "game-prak-1.html#permasalahan-yang-sering-muncul",
    "href": "game-prak-1.html#permasalahan-yang-sering-muncul",
    "title": "1. Download dan Install Unity",
    "section": "Permasalahan yang Sering Muncul",
    "text": "Permasalahan yang Sering Muncul\n\nJika terdapat INCOMPATIBLE maka cari versi Unity yang kompatibel dengan computer atau laptop. Biasanya terkait dengan 32 bit atau 64 bit.\nJika masih bingung bisa ditanyakan ke :https://unity3d.com/community atau http://stackoverflow.com/"
  },
  {
    "objectID": "game-prak-1.html#tools-pembuatan-asset-game",
    "href": "game-prak-1.html#tools-pembuatan-asset-game",
    "title": "1. Download dan Install Unity",
    "section": "Tools pembuatan Asset Game:",
    "text": "Tools pembuatan Asset Game:\n\nBitmap Graphics\n\nAdobe Photoshop\nCorel Painter\nPixelmator\nGIMP (free)\nKrita (free)\nPixlr (free)\n\n\n\nVector Graphics\n\nAdobe Illustrator\nAdobe Flash\nCorel Draw\nInkscape (free)\n\n\n\n3D Graphics\n\nAutodesk Maya\nAutodesk 3dsmax\nZbrush\nBlender (free)\n\n\n\nDigital Sound Editors\n\nAdobe Audition\nAvid Pro Tools\nAudacity (free)\n\n\n\nMusic Creation\n\nApple Logic Pro\nAvid Pro Tools\nApple GarageBand (free)\nImage-Line Fruit Loops\nPropellerhead Reason\nSony Acid\nAbleton Live\nMixxx (free)\nHydrogen(free)"
  },
  {
    "objectID": "game-prak-1.html#game-assets-free",
    "href": "game-prak-1.html#game-assets-free",
    "title": "1. Download dan Install Unity",
    "section": "Game Assets FREE",
    "text": "Game Assets FREE\n\n2D Bitmap and Vector Graphics\n\nUnity Asset Store\nopengameart.org\nwww.pexels.com\nwww.shutterstock.com\nwww.istockphoto.com\n\n\n\n3D Graphics\n\nUnity Asset Store\nwww.turbosquid.com\nshop.bitgem3d.com\ntf3dm.com\nwww.cgtrader.com/free-3d-models\nhttp://nasa3d.arc.nasa.gov\nwww.creativecrash.com\nsketchfab.com\nopengameart.org\n\n\n\nDigital Sound and Music\n\nUnity Asset Store\nwww.freesound.org\nwww.newgrounds.com\nincompetech.com\nwww.sounddogs.com"
  },
  {
    "objectID": "game-prak-1.html#menyimpan-dan-membuka-project",
    "href": "game-prak-1.html#menyimpan-dan-membuka-project",
    "title": "1. Download dan Install Unity",
    "section": "Menyimpan dan membuka project",
    "text": "Menyimpan dan membuka project\nKita akan mencoba untuk melihat lebih dalam tentang pemrograman dasar yang ada pada Unity. Terdapat dua bahasa pemrograman yang dapat digunakan dalam unity yaitu, c# dan javascript. Pada matakuliah ini, hanya bahasa pemrograman c# yang akan diajarkan. Sebelum itu buat project 2D baru bernama “Latihan2_2D”. PASTIKAN layout editor unity adalah “Default”. Untuk merubahnya lihat gambar berikut:\n\n\nMekanisme membuka project\nKetika project sudah dibuat maka secara otomatis akan terbentuk beberapa folder seperti: Assets, Library, dan ProjectSettings serta beberapa file solution Microsoft Visual Studio (.sln). Jadi untuk membuka project Unity dilakukan dengan cara klik “open” pada sebelah kanan atas unity sesaat setelah aplikasi unity dibuka.\n\nPilih folder project unity (dalam kasus ini folder project unity bernama “Latihan2_2D”) seperti gambar berikut:\n\nUntuk versi unity 5.6 keatas, tidak perlu harus membuka unity. Buka project di windows dan cari file dengan ekstensi .scene kemudia double klik pada file .scene tersebut.\n\n\nMekanisme menyimpan scene\nPada unity menyimpan project dilakukan berdasarkan apa yang sudah dibuat pada Scene View. Sebagai contoh, kita sudah menambahkan beberapa game object seperti burung, musuh, papan score, dan lingkungan pegunungan pada scene view. Programmer bermaksud untuk membuat beberapa game object tadi menjadi kesatuan utuh untuk scene game level 1. Maka kemudian programmer menyimpan scene tersebut dengan nama level1.scene dan kemudian membuat scene baru untuk mulai mengerjakan scene level 2. Dengan contoh tersebut, maka kita dapat memahami bahwa satu project game dapat berisi banyak scene. Cara untuk menyimpan scene yaitu: File -&gt; Save Scenes atau CTRL+S.\n\nPRAKTIKUM:\n\nBuat project 2D unity dengan nama “Latihan2_2D”.\nTambahkan “gambar1.png” dalam project window unity.\nDrag/tarik gambar1 pada project window kedalam Scene View.\nSave scene dengan nama “Main.scene”\nKeluar dari aplikasi Unity.\nBuka project “Latihan2_2D”\nPerhatikan bahwa pada Scene View akan terdapat game objek gambar1\nJika tidak terdapat game objek gambar1 tersebut maka lihat di project view\nKlik Assets dan kemudian double klik “Main.scene”"
  },
  {
    "objectID": "game-prak-1.html#manajemen-asset-game",
    "href": "game-prak-1.html#manajemen-asset-game",
    "title": "1. Download dan Install Unity",
    "section": "Manajemen Asset Game",
    "text": "Manajemen Asset Game\nSaat ini kita akan fokus pada folder Assets dari project unity saja. Pada pertemuan sebelumnya, sudah ditambahkan sebuah gambar dan nantinya jika dilihat pada folder Asset tadi, maka file gambar tersebut akan muncul. Demikian juga apabila kita membuat folder di Project Window unity, maka didalam folder Asset akan tertambah folder tersebut. Asset game berbeda dengan game object. Biasanya minimum asset game untuk game 2D adalah beberapa file scene, gambar, tipe font, prefabs, dan suara. Untuk mempermudah penataan asset-aset game tersebut, biasanya programmer membuat folder-folder sesuai dengan tipe asetnya. Misalkan folder “Images” berisi kumpulan asset-aset gambar yang nantinya akan menjadi game object. PRAKTIKUM:\n\nBuat folder “Images”, “Fonts”, “Script”, “Sounds”, “Prefabs”, dan ”Scenes”.\nDrag atau tarik atau klik kanan-&gt;cut “gambar1.png” kedalam folder “Images”.\nDouble klik folder “Images” dan pastikan “gambar1.png” ada didalamnya\nUntuk kembali ke Assets, Klik Assets pada samping kiri project window.\n\nKUMPULKAN:\nScreenshoot Project window dan simpan dengan nama sc_01_04.jpg"
  },
  {
    "objectID": "game-prak-1.html#game-object-camera-2d",
    "href": "game-prak-1.html#game-object-camera-2d",
    "title": "1. Download dan Install Unity",
    "section": "Game Object Camera 2D",
    "text": "Game Object Camera 2D\nSaat pertama kali membuat project unity, kita akan diberikan satu game objek yaitu “Main Camera” yang terlihat pada Hierarchy window. JANGAN HAPUS game object “Main Camera” tersebut. Pastikan bahwa Inspector property dari game object “Main Camera” tersebut terdapat Component “Camera”. Perhatikan bahwa property kamera untuk 2D adalah menggunakan proyeksi ortografis. Proyeksi tersebut ada pada property “Camera” dengan nama “Projection” dan nilainya adalah “Orthographic” atau lihat gambar berikut:\n\nTransform dan Camera biasanya disebut dengan istilah property component atau component dari suatu game object. Component pada unity akan dijelaskan lebih lanjut pada pertemuan selanjutnya.\nJika sudah seperti gambar diatas maka kita sudah siap untuk membuat game 2D. Biasanya kita tidak perlu merubah property apapun pada “Main Camera” karena sudah dibuat otomatis oleh unity saat kita membuat project."
  },
  {
    "objectID": "game-prak-1.html#aspect-ratio",
    "href": "game-prak-1.html#aspect-ratio",
    "title": "1. Download dan Install Unity",
    "section": "Aspect ratio",
    "text": "Aspect ratio\nAspect ratio merupakan perbandingan panjang (width) dan lebar (height) dari resolusi layar game yang akan dikembangkan. Hal ini penting mengingat beberapa monitor atau perangkat mobile memiliki beragam aspect ratio. Sebagai contoh, beberapa perangkat mobil menggunakan aspect ratio 16:9. Aspect ratio 16:9, berarti ukuran resolusi layar game yang dikembangkan seharusnya 1280x720 atau 1920x1080 (lihat detail: https://en.wikipedia.org/wiki/16:9 ). Di unity penggunaan aspect ratio ada pada Game tab disebelah Scene tab pada Scene view. Disana terdapat tulisan “Free Aspect” yang artinya membebaskan ukuran aspect ratio dari developer yang ingin mengembangkan game. Jika ingin merubah aspect ratio maka klik pada tulisan “Free Aspect” tersebut seperti pada gambar berikut:"
  },
  {
    "objectID": "game-prak-1.html#variabel-dan-operasi",
    "href": "game-prak-1.html#variabel-dan-operasi",
    "title": "1. Download dan Install Unity",
    "section": "Variabel dan Operasi",
    "text": "Variabel dan Operasi\nSelamat kita sudah dapat menjadi programmer game, tahap selanjutnya adalah memahami beberapa konsep seperti tipe data, penggunaan variable dan operasi. Pemorgraman C# merupakan bahasa pemrograman yang mirip dengan C++ dan Java. Library standard C# bergantung pada jenis .NET framework yang digunakan.\n\nTipe Data\nBeberapa tipe data dasar yang ada pada C# adalah sebagai berikut: byte, sbyte, short, ushort, int, uint, long, ulong, float, double, decimal, char, string, bool, dan object (https://msdn.microsoft.com/en-us/library/cs7y5x0x(v=vs.90).aspx). Namun pada Unity, terdapat tipe data tambahan seperty Vector2,Vector3, Quartenion, Transform, dll.\n\n\nVariabel\nPembuatan variable mirip sekali dengan c++ dan Java. Berikut adalah sintaks pendefinisian variable:\nPendefinisian variable dengan men-assign nilai:\n&lt;tipe data&gt;&lt;spasi&gt;&lt;nama_variabel&gt;=&lt;nilai&gt;;\nContoh:\nint answer = 42;\nstring greeting = \"Hello, World!\"; \nPendefinisian variable tanpa men-assign nilai:\n&lt;tipe data&gt;&lt;spasi&gt;&lt;nama_variabel&gt;;\nContoh:\nint answer;\nstring greeting; \nPendefinisian variable dengan access modifier:\n&lt;access modifier&gt;&lt;tipe data&gt;&lt;spasi&gt;&lt;nama_variabel&gt;=&lt;nilai&gt;;\nContoh:\npublic int a = 55;\nprivate float b = 2.5f; \nPendefinisian variable konstanta:\nconst &lt;tipe data&gt;&lt;spasi&gt;&lt;nama_variabel&gt;\nContoh:\nconst int speedLimit = 55;\nconst double pi = 3.14159265358979323846264338327950; \n\nPRAKTIKUM:\n&lt; Kasus Spesial &gt;\nKetika membuat variable dengan akses modifier “public”, pada editor unity akan otomatis muncul property field pada Inspector game object yang berkaitan dengan kode tersebut. Berikut adalah contoh kode programmnya:\n\nLihat editor Unity pada Inspector game object yang terkait dengan kode program tersebut:\n\nKUMPULKAN:\nJalankan unity dan lihat apa yang terjadi pada Console output, screenshot console output dan simpan dengan nama sc_01_06.jpg\n\n\nOperasi\nOperasi memungkinkan kita untuk melakukan manipulasi aritmatik atau logis pada suatu nilai atau variable. Beberapa operasi aritmatika yang sering digunakan adalah “+”,”-”,”*”,”/”,dan “%”. Untuk logika “&&”,”||”,”!”. Untuk hubungan relasi “==”,”!=”,”&gt;”,”&lt;”,”&gt;=”,”&lt;=”. Untuk operasi bit biner “&”,”|”,”^”. Berikut adalah contoh penggunaan operasi matematika:\nint x = 1;\nint y = x + 10 * 100;      // perkalian dulu\nint z = (x + 10) * 100;    // penjumlahan dulu krn ada kurung \nBerikut adalah tabel ekspresi matematika dengan operator “+” dan “–“ untuk mempersingkat penulisan kode program:"
  },
  {
    "objectID": "game-prak-1.html#logika-dan-perulangan",
    "href": "game-prak-1.html#logika-dan-perulangan",
    "title": "1. Download dan Install Unity",
    "section": "Logika dan perulangan",
    "text": "Logika dan perulangan\n\nPengambilan Keputusan\nLogika yang dimaksudkan dalam pemrograman adalah tentang pengambilan keputusan. Misalkan kita memiliki variable score, jika score lebih dari 70 maka pemain akan menang, jika tidak, maka pemain akan kalah. Dalam pemrograman game konsep pengambilan keputusan ini sangatlah penting dan biasanya sering digunakan dalam berbagai kasus seperti: mekanik game, kontrol game, state machine, dll. Berikut adalah contoh kode program sederhana:\npublic string score;\n// Use this for initialization\nvoid Start () {\n    if (score &gt; 70)\n        Debug.Log (\"Menang\");\n    else\n        Debug.Log (\"Kalah\");\n} \ncontoh yang lain:\nif (isNabrak)\n    Debug.Log (\"Menang\");\nelse\n    Debug.Log (\"Kalah\"); \ncontoh iternary:\npublic bool isNabrak;\n// Use this for initialization\nvoid Start () {\n    Debug.Log (isNabrak?\"Menang\":\"Kalah\");\n} \ncontoh percabangan:\npublic int level;\n    // Use this for initialization\n    void Start () {\n        switch (level) {\n        case 1:\n            Debug.Log (\"Sekarang di level 1\");\n            break;\n        case 2:\n            Debug.Log (\"Sekarang di level 2\");\n            break;\n        case 3:\n            Debug.Log (\"Sekarang di level 3\");\n            break;\n        }\n    } \ncontoh percabangan dengan if:\npublic string playerState;\n    int status;\n    // Use this for initialization\n    void Start () {\n        if (playerState == \"run\") {\n            Debug.Log (\"player lari\");\n            status = 1;\n        } else if (playerState == \"walk\") {\n            Debug.Log (\"player jalan\");\n            status = 2;\n        } else {\n            Debug.Log (\"player idle\");\n            status = 0;\n        }\n    } \nBerikut adalah tabel symbol logika untuk pemrograman c#:"
  },
  {
    "objectID": "game-prak-1.html#perulangan",
    "href": "game-prak-1.html#perulangan",
    "title": "1. Download dan Install Unity",
    "section": "Perulangan",
    "text": "Perulangan\nDalam beberapa situasi mungkin kita diharuskan untuk mengeksekusi beberapa kode program dalam satu waktu. Jika kita menuliskan setiap kode program secara berulang-ulang, tentu hal tersebut sangatlah tidak efisien. Terkadang kita juga ingin melakukan perhitungan deret angka atau menghitung fungsi SUM. Solusi untuk permasalahan tersebut adalah dengan perulangan/iterasi/ looping. Berikut adalah contoh kode program perulangan:\nfor (int i = 0; i &lt; 10; i++) {\n            Debug.Log (\"Enemy_\" + i + \"_Spawn\");\n        }\ncontoh lain:\nint sum=0;\n        for (int i = 0; i &lt; 10; i++) {\n            sum += 1;\n        }\n        Debug.Log (\"Nilai SUM = \"+sum);"
  },
  {
    "objectID": "game-prak-1.html#latihan",
    "href": "game-prak-1.html#latihan",
    "title": "1. Download dan Install Unity",
    "section": "Latihan",
    "text": "Latihan\n\nBuat kode c# baru dan beri nama “CobaJalan” pada game object “My First GameObject”.  \nPastikan Inspector dari “My First GameObject” seperti gambar berikut: (uncheck kode Coba agar kode tersebut tidak dieksekusi saat game dijalankan)  \nIsikan di pada Inspector property Coba Jalan (Script), Movespeed dengan nilai: 0.5 ; 1 ; 2\nJalankan unity dan amati apa yang terjadi.\n\nKUMPULKAN:\nScreenshoot game tab dan simpan dengan nama sc_01_07.jpg"
  },
  {
    "objectID": "game-prak-2.html",
    "href": "game-prak-2.html",
    "title": "2  Untitled",
    "section": "",
    "text": "#Game Prak 2"
  },
  {
    "objectID": "game-prak-1.html#menghubungkan-game-object-dengan-c-script",
    "href": "game-prak-1.html#menghubungkan-game-object-dengan-c-script",
    "title": "1. Download dan Install Unity",
    "section": "Menghubungkan Game Object dengan C# Script",
    "text": "Menghubungkan Game Object dengan C# Script\nUntuk membuat game objek baru pada scene view ada beberapa cara yaitu:\ncara 1:\n\nklik GameObjects pada menu tab diatas -&gt; pilih 2D object -&gt; Sprite\nLihat pada hierarchy window maka akan muncul “New Sprite”\nRename dengan cara klik kanan-&gt;rename atau tekan F2 pada keyboard\nRename dengan nama “My First GameObject”.\nLihat Inspector pastikan nilai Transform Position x,y, dan z adalah 0, begitu juga dengan Rotasi x,y, dan z adalah 0. Nilai scale x,y, dan z pada inspector tetap 1.\nIsikan nilai “None (Sprite)” dengan “gambar1.png” dengan cara tarik atau drag “gambar1.png” pada Inspector property “Sprite Renderer” di game objek “My First GameObject”.\n\ncara 2:\n\nDrag gambar “gambar1.png” di project window atau di Assets kedalam Scene\nLihat Hierarchy window, dan akan muncul game objek baru dengan nama “gambar1”\nRename dengan nama “My First GameObject”.\n\nAda beberapa cara untuk menambahkan komponen script atau kode yang berkaitan dengan game objek (dalam hal ini adalah “My First GameObject”), yaitu:\ncara 1:\n\nklik “My First GameObject” pada hierarchy window\nLihat pada Inspector bagian bawah kemudian Add Component\nTuliskan “New Script”\nKlik “New Script” lalu akan muncul box seperti gambar berikut:  \nIsikan nama script “Coba” dan pilih Language “C sharp”\nCreate and Add\nLIhat project window dan terdapat file asset game dengan nama Coba.cs, agar rapi cut didalam folder Script.\n\ncara 2:\n\nLihat project window dan masuk dalam folder Script\nKlik kanan -&gt; Create -&gt; C# Script seperti terlihat pada gambar berikut:  \nBeri nama “Coba” atau rename “Coba”\nTarik ke dalam game object “My First GameObject” atau didalam scene dimana terdapat objek “My First GameObject” atau didalam “Add Component” di Inspector “My First GameObject” Secara default script Coba.cs akan menjadi seperti gambar berikut:\n\nPerhatikan bahwa Coba.cs HARUS sama dengan Coba setelah kata “public class”, jika berbeda, silahkan ganti nama file atau nama class.\n\nPada dasarnya ketika membuat script “Coba” di Unity, kita sudah membuat kode Class “Coba”. Konsep Class tersebut ada pada Pemrograman Berorientasi Object atau Object oriented programming. Kamu dapat mempelajari konsep pemrograman tersebut secara mandiri dirumah untuk menguatkan pemrograman game.\nClass “Coba” merupakan turunan dari Class “MonoBehaviour” maka jangan lupa tambahkan header “using UnityEngine;”. Terdapat dua method atau fungsi utama dalam Class “Coba” yaitu “Start” dan “Update”.\nMethod Start() -&gt; Method berisi perintah program yang akan dijalan ketika game object yang terhubung dengan kode “Coba” MULAIaktif.\nMethod Update() -&gt; Method berisi perintah program yang akan dijalan ketika game object yang terhubung dengan kode “Coba” SEDANG AKTIF KETIKA FPS (Frame Per Second) JALAN aktif.\nIsikan didalam method Start() kode seperti berikut:\n    void Start () {\n        Debug.Log (\"Hello World\");\n    } \nLalu jalan program dengan menekan tombol Run dan lihat di Console Output seperti pada gambar berikut: (console letaknya ada disebelah tab Project window)\n\nPastikan bahwa “Colapse” dan Clear on Play sudah menyala seperti gambar diatas. Untuk menyalakannya klik pada tulisannya. Tulisan 1 disamping ujung kanan “Hello World” berarti kode tersebut hanya di outputkan sekali.\nFungsi Debug.Log(“&lt;argumen&gt;”); merupakan fungsi untuk mencetak sesuatu di console. Biasanya fungsi tersebut digunakan untuk debugging (mencari kesalahan program).\n\nPRAKTIKUM:\n\nTambahkan kode program berikut didalam method Update():\n\nvoid Update () {\n        Debug.Log (\"Aku di ulang-ulang!\");\n    } \n\nPerhatikan didalam console output bahwa kata “Aku di ulang-ulang” akan dieksekusi perkali-kali selama frame game sedang berjalan.\n\nKUMPULKAN:\nScreenshoot console output dan simpan dengan nama sc_01_05.jpg"
  },
  {
    "objectID": "game-prak-1.html#mekanisme-pengumpulan-praktikum-harian",
    "href": "game-prak-1.html#mekanisme-pengumpulan-praktikum-harian",
    "title": "1. Download dan Install Unity",
    "section": "Mekanisme Pengumpulan Praktikum Harian",
    "text": "Mekanisme Pengumpulan Praktikum Harian\nUntuk setiap mahasiswa: Buat 1 folder beri nama NIM lengkap. Masukkan file screenshot sc_01_01.jpg, sc_01_02.jpg, sc_01_03.jpg, sc_01_04.jpg, sc_01_05.jpg, sc_01_06.jpg dan sc_01_07.jpg. Kemudian rar atau zip folder NIM kamu tadi dan kirimkan ke ketua kelas.\nContoh: A11200904997.rar\nUntuk Ketua Kelas: SIapkan folder dengan nama Kode Kelas “_01” yang berisi kumpulan praktikum setiap mahasiswa. Lalu buat rar atau zip dan kirimkan ke email dosen.\nContoh: A114401_01.rar"
  },
  {
    "objectID": "game-prak-2.html#pendahuluan",
    "href": "game-prak-2.html#pendahuluan",
    "title": "2. Menghubungkan object dengan variabel",
    "section": "Pendahuluan",
    "text": "Pendahuluan\nPada praktikum yang ke-2 kali ini, kita akan mencoba untuk melihat lebih lanjut tentang pemrograman dasar yang ada pada Unity. Sayangnya, mungkin tidak semua mahasiswa sudah mengambil pemrograman berorientasi objek. Dosen sangat menganjurkan untuk mempelajari PBO diluar perkuliahan Game Programming. Namun demikian, didalam course outline praktikum kali ini, tetap ada penjelasan singkat PBO (tidak detail). Untuk memulai praktikum yang ke-2 ini, buat project 2D baru bernama “Latihan3_2D”. Mulai dari sekarang backup seluruh project yang pernah dibuat agar nanti dikumudian hari dapat dipelajari lagi. PASTIKAN layout editor unity adalah “Default”."
  },
  {
    "objectID": "game-prak-2.html#menghubungkan-object-dengan-variabel",
    "href": "game-prak-2.html#menghubungkan-object-dengan-variabel",
    "title": "2. Menghubungkan object dengan variabel",
    "section": "Menghubungkan object dengan variabel",
    "text": "Menghubungkan object dengan variabel\nAda kalanya kita membutuhkan referensi suatu game object dari game object lain. Misalnya ketika akan membuat musuh yang selalu mengikuti player. Dalam hal ini kita akan buat sesuatu yang lebih sederhana, yaitu jika posisi transform posisi x dari player lebih besar dari transform posisi x dari enemy, maka enemy akan berjalan ke kanan sampai di posisi player.\nPRAKTIKUM:\n\nTambahkan asset game “gambarPlayer” dan “gambarEnemy” kedalam project Window.\nMasukkan kedalam folder Images.\nLetakkan gambarPlayer dan gambarEnemy pada scene dan rename dengan “Player” dan “Enemy” di hierarchy windows seperti gambar dibawah ini:\n\n\n\nBuat script baru dengan nama “EnemyScript” seperti pada kode program berikut:\n\n\nTransform.position mengambil property transformasi posisi pada game object yang berkaitan dengan EnemyScript\nnew Vector3 akan dijelaskan lebih lanjut di Class PBO\nmovespeed adalah variable yang dibuat untuk mengatur kecepatan pergerakan\nTime.deltaTime agar kecepatan pergerakan menjadi lebih smooth\n\nMasukkan pada komponen Inspector dari game object “Enemy”. Klik pada symbol gembok seperti terlihat pada gambar dibawah:\n\n\n\nDrag game object “Player” dari hierarchy window kedalam Property “Player” dan isikan movespeed dengan nilai 3 seperti gambar dibawah ini:\n\n\n\nKlik pada gembok pada Inspector untuk melakukan “unlock inspector”\nJalankan unity dan lihat hasilnya!\n\nKUMPULKAN:\nScreenshoot Game tab dan simpan dengan nama sc_02_01.jpg"
  },
  {
    "objectID": "game-prak-2.html#tipe-data-array",
    "href": "game-prak-2.html#tipe-data-array",
    "title": "2. Menghubungkan object dengan variabel",
    "section": "Tipe data Array",
    "text": "Tipe data Array\nArray merupakan koleksi atau kumpulan elemen bisa berupa variable atau nilai dengan tipe data yang sama dan ukuran yang sudah ditentukan. Sangat penting untuk menentukan ukuran array dengan pasti untuk menghindari membuang memory yang sia-sia. Bentuk array adalah dengan [ ]. Berikut adalah contoh deklarasi array:\ndouble[] balance; \nInisialisasi array mirip dengan instance objek (lihat bagian pemrograman berorientasi objek), yaitu dengan keyword new. Ketika mendefinisikan array pastika bahwa array sudah di inisialisasi, jika tidak, akan terjani error NULL. Berikut adalah contoh inisialisasi array:\ndouble[] balance = new double[10];\nUntuk menassign nilai pada array dapat dilakukan dengan berbagai cara diantaranya adalah:\nAssign nilai array saat dideklarasikan:\ndouble[] balance = { 2340.0, 4523.69, 3421.0};\nMembuat array dengan inisialisasi langsung:\nint [] marks = new int[5] { 99, 98, 92, 97, 95};\nMembuat array tanpa memberikan ukuran fix tetapi langsung dengan menassign nilai:\nint [] marks = new int[] { 99, 98, 92, 97, 95};\nMemindahkan array (copy) ke variable array yang lain:\nint [] marks = new int[] { 99, 98, 92, 97, 95}; int[] score = marks;\nPRAKTIKUM:\n\nBuat script baru dengan nama CobaArray.\nBuat variable public array items seperti berikut:\n\n\n\nMasukkan CobaArray dalam game object “Player” yang sebelumnya sudah ada di scene.\nMasuk pada Inspector “Player” dan isikan pada kolom property items size 2 (sebelumnya klik symbol segitiga kecil disebelah kiri items dan size ukuran array) dan ketika muncul textfield baru isikan “gold” dan “gem” seperti pada gambar berikut.\n\n\n\nJalankan unity dan lihat Console Output.\n\nKUMPULKAN:\nScreenshoot Console Output dan simpan dengan nama sc_02_02.jpg"
  },
  {
    "objectID": "game-prak-2.html#method-yang-sudah-ditentukan-unity",
    "href": "game-prak-2.html#method-yang-sudah-ditentukan-unity",
    "title": "2. Menghubungkan object dengan variabel",
    "section": "Method yang sudah ditentukan Unity",
    "text": "Method yang sudah ditentukan Unity\nAda beberapa method yang sudah ditentukan unity monobehaviour dari awal (built-in method). Kita TIDAK DIPERBOLEHKAN untuk memodifikasi nama methodnya baik itu huruf besar atau huruf kecil atau jenis typo yang lain (case sensitive). Yang diperbolehkan adalah menambah isi dari method tersebut. Dalam hal ini contohnya adalah method Start() dan Update(). Berikut adalah built-in method yang sering dipakai selain start dan update. Lebih lengkap lihat:\nhttps://docs.unity3d.com/ScriptReference/MonoBehaviour.html :\n\n\n\n\n\n\n\nNama Method\nKeterangan\n\n\n\n\nAwake\nAwake dipanggil ketika script instance sedang dibuka. (sebelum Start())\n\n\nFixedUpdate\nMethod ini akan dipanggil setiap waktu framerate frame yang fix jika Monobehavior aktif\n\n\nLateUpdate\nDipanggil pada setiap frame\n\n\nOnCollisionEnter\nDipanggil ketika tumbukan objek 3D terjadi\n\n\nOnCollisionEnter2D\nDipanggil ketika tumbukan objek 2D terjadi\n\n\nOnCollisionStay\nDipanggil ketika sedang terjadi tumbukan objek 3D\n\n\nOnCollisionStay2D\nDipanggil ketika sedang terjadi tumbukan objek 2D\n\n\nOnCollisionExit\nDipanggil ketika selesai tumbukan objek 3D\n\n\nOnCollisionExit2D\nDipanggil ketika selesai tumbukan objek 2D\n\n\nOnTriggerEnter\nDipanggil ketika trigger tumbukan objek 3D terjadi, hanya saat trigger diaktifkan\n\n\nOnTriggerEnter2D\nDipanggil ketika trigger tumbukan objek 2D terjadi, hanya saat trigger diaktifkan\n\n\nOnTriggerStay\nDipanggil ketika trigger tumbukan sedang terjadi untuk objek 3D, hanya saat trigger diaktifkan\n\n\nOnTriggerStay2D\nDipanggil ketika trigger tumbukan sedang terjadi untuk objek 2D, hanya saat trigger diaktifkan\n\n\nOnTriggerExit\nDipanggil ketika trigger tumbukan selesai terjadi untuk objek 3D, hanya saat trigger diaktifkan\n\n\nOnTriggerExit2D\nDipanggil ketika trigger tumbukan selesai terjadi untuk objek 2D, hanya saat trigger diaktifkan\n\n\nOnGUI\nDipanggil untuk men-handle event GUI (Graphical User Interface)\n\n\nOnMouseDown\nDipanggil ketika user sudah menekan mouse button pada elemen GUI atau collider\n\n\nOnMouseDrag\nDipanggil ketika user menekan dan menyeret/drag pada elemen GUI atau Collider\n\n\nOnMouseEnter\nDipanggil ketika user menekan mouse/klik pada elemen GUI atau Collider\n\n\nOnMouseExit\nDipanggil ketika user selesai menekan mouse/klik pada elemen GUI atau Collider\n\n\nOnDestroy\nFungsi ini dipanggil ketika Monobehaviour akan dihancurkan / destroy\n\n\n\n:: {.responsive}\nFlowchart Lifecycle Monobehaviour Unity https://docs.unity3d.com/Manual/ExecutionOrder.html"
  },
  {
    "objectID": "game-prak-2.html#translasi-2d",
    "href": "game-prak-2.html#translasi-2d",
    "title": "2. Menghubungkan object dengan variabel",
    "section": "Translasi 2D",
    "text": "Translasi 2D\nTranslasi adalah operasi perpindahan posisi dari suatu objek (2 dimensi) dari satu titik ke titik yang lain. Perubahan posisi ini berlaku dalam arah sejajar sumbu x atau y. Peran vektor disini sangatlah penting. Pada setiap game object unity memiliki transformasi 3D seperti posisi, rotasi, dan skala. Hal tersebut dapat dilihat pada Inspector Transform setiap game object.\nPosisi, rotasi, dan skala pada dasarnya bertipe vector 3D. Dengan mengabaikan nilai z, maka bisa dikatakan bahwa transfomasi yang akan berlaku adalah transformasi 2D (hanya untuk translasi bukan rotasi). Berikut adalah rumus sederhana yang digunakan untuk translasi kearah kanan.\n\nx_a,y_a,z_a merupakan vektor posisi x,y,z sesudah ditranslasi dan x_a-1,y_a-1,z_a-1 merupakan vektor posisi x,y,z sebelum ditranslasi. t_x merupakan nilai vektor translasi untuk sumbu x. t_x dapat diisi dengan suatu nilai konstan mengikuti waktu delta. Waktu delta itu adalah waktu yang berubah terus menerus ketika timeframe dari game dijalankan. Maka dari itu pergerakan translasi ini dapat dilakukan pada method Update(). Isikan kode berikut dalam\ntransform.Translate(Vector3.right*2f*Time.deltaTime); \nnilai “2f” dapat digantikan dengan variable speed, disini speed merupakan nilai konstan translasi. Seperti pada rumus diatas yaitu t_x. Translate merupakan fungsi atau method yang sudah disediakan unity. Namun demikian, kita akan mencoba menggunakan rumus daripada menggunakan method Translate. Berikut adalah kode programnya: (letakkan didalam fungsi update)\ntransform.position = transform.position + \n(Vector3.right * speed * Time.deltaTime); \nVector3.right sudah disediakan juga oleh Unity sebagai trigger nilai kekanan. Berikut adalah penjelasannya:\n\nJadi Vector3.right bernilai [1 0 0] dan kemudian ditambahkan dengan nilai konstan dari speed dan Time.deltaTime. praktikum berikutnya, kita akan mencoba untuk membuat Vector3.right, Vector3.left, Vector3.up, dan Vector3.down. Unity sudah menyedikan operasi vektor untuk penjumlahan, pengurang, dan perkalian hanya dengan “+”,”-”, dan ”*”.\nPRAKTIKUM:\n\nBuat script baru dengan nama TranslasiObjek.\nBuat variable dengan nama “kekanan”, “kekiri”, “keatas”,”kebawah” dengan tipe data Vector3. Berikut adalah contohnya deklarasi Vector3: \n\nVector3 kekanan; \n\nDidalam method Start(), lakukan inisialisasi Vector3 untuk variabel kekanan dengan nilai vektor yang benar. kekanan = [1,0,0] kekiri = [-1,0,0] keatas = [0,1,0] kebawah = [0,-1,0] berikut adalah salah satu contoh inisialisasi variable kekanan. (pastikan bahwa kekanan sudah dideklarasikan sebelumnya) kekanan = new Vector3(1,0,0);\nDidalam method Update() , buat kode translasi berikut:\n\ntransform.position = transform.position + (kekanan * speed * Time.deltaTime); \n\nJalankan unity dan lihat apa yang terjadi.\nDalam kode translasi tersebut ganti variable kekanan dengan kekiri atau keatas atau kebawah.\nJalankan unity dan lihat apa yang terjadi.\n\nKUMPULKAN:\n\nScreenshoot Console Output dan simpan dengan nama sc_02_03.jpg"
  },
  {
    "objectID": "game-prak-2.html#rotasi-2d",
    "href": "game-prak-2.html#rotasi-2d",
    "title": "2. Menghubungkan object dengan variabel",
    "section": "Rotasi 2D",
    "text": "Rotasi 2D\nSebelum melakukan transformasi rotasi Game object, kita terlebih dahulu harus memahami tentang Quaternion dan sudur Euler di Unity. Unity tidak menggunakan matriks untuk melakukan rotasi tetapi Quaternion. Hal ini berlaku baik 3D maupun 2D. Quaternion merupakan perluasan dari bilangan-bilangan kompleks yang tidak komutatif. Biasanya Quartenion diterapkan pada mekanika 3D. Quartenion ditemukan oleh ahli matematika dan astronomi Inggris yang bernama William Rowan Hamilton. Quartenion merupakan himpunan berlambang dan sama seperti vektor 4 dimensi atau berlambang . Rumus Quartenion di Unity adalah sebagai berikut:\n\\(x+yi+zj+wk\\)\nI,j,dan k bukan merupakan variable melainkan sumbu independen. Untuk pemahaman singkat, Quartenion seperi vektor 4 dimensi, yaitu x,y,z,dan w. Informasi lebih lanjut dapat dibaca di-link: https://luckytoilet.wordpress.com/2014/11/24/visualizing-quaternions-with-unity/. Selain Quartenion, juga harus dipahami tentang sudut euler. Dalam Inspector Transform pada game object Unity terdapat Rotasi x,y, dan z. Rotasi tersebut bertipe Vector3. Namun demikian, secara teori rotasi x,y,z tersebut bernilai sudut euler.\nDalam dunia penerbangan biasanya orientasi pesawat digambarkan dengan sebutan pitch,yaw, dan roll. Pitch saat pesawat take off dan landing. Yaw ketika pesawat berbelok kanan atau kiri. Roll saat pesawat berputar-putar. Kombinasi dari ketiganya itu yang akan membentuk rotasi sudut euler. Rincian gambaran pitch, yaw, dan roll diperlihatkan pada gambar berikut:\n\nPada modebehaviour unity, untuk dapat melakukan rotasi (dalam hal ini 2D) tambahkan kode berikut didalam method Update():\ntransform.Rotate(Vector3.back * speedRotasi * Time.deltaTime,10); \natau tanpa menggunakan fungsi bentukan Unity:\ntransform.rotation = transform.rotation *\n            Quaternion.Euler(mundur * speedRotasi * Time.deltaTime);\nPada kode tersebut untuk memperbaharui rotasi harus dengan operasi perkalian. Namun transform.rotation bukanlah sudut euler melainkan Quaternion. Sehingga membutuhkan mekanisme konversi dari sudut euler ke Quaternion. Mundur merupakan variable Vector3 yang bernilai [0,0,-1] atau sama dengan memanggil Vector3.back. Quaertenion.Euler sebetulnya berisi rumus konversi dari sudut euler ke Quaternion.\nDimana q_IB merupakan Quartenion hasil konversi, merupakan pitch, roll, dan yaw. Rumus tersebut dapat dijadika method untuk menggantikan Quartenion.Euler seperti pada kode berikut:\n    static Quaternion toQuaternion(Vector3 euler)\n    {\n        Quaternion q;\n        float pitch = euler.y;\n        float roll = euler.x; \n        float yaw = euler.z;\n        float t0 = Mathf.Cos(yaw * 0.5f);\n        float t1 = Mathf.Sin(yaw * 0.5f);\n        float t2 = Mathf.Cos(roll * 0.5f);\n        float t3 = Mathf.Sin(roll * 0.5f);\n        float t4 = Mathf.Cos(pitch * 0.5f);\n        float t5 = Mathf.Sin(pitch * 0.5f);\n        Debug.Log (t0 +\" \"+ t1+\" \" + t2+\" \" + t3+\" \" + t4+\" \" + t5+\" \");\n\n        q.x = t0 * t3 * t4 - t1 * t2 * t5;\n        q.y = t0 * t2 * t5 + t1 * t3 * t4;\n        q.z = t1 * t2 * t4 - t0 * t3 * t5;\n        q.w = t0 * t2 * t4 + t1 * t3 * t5;\n        return q;\n    } \nPRAKTIKUM:\n\nBuat script baru dengan nama RotasiObjek.\nBuat variable dengan nama “maju” dan “mundur” dengan tipe data Vector3. Berikut adalah contoh deklarasi Vector3:\n\nVector3 maju; \n\nDidalam method Start(), lakukan inisialisasi Vector3 untuk variabel kekanan dengan nilai vektor yang benar. maju = [0,0,1] mundur = [0,0,-1] berikut adalah salah satu contoh inisialisasi variable kekanan. (pastikan bahwa kekanan sudah dideklarasikan sebelumnya)\n\nmaju = new Vector3(0, 0, 1); \n\nDidalam method Update() , gunakan method toQuaternion dan buat kode rotasi berikut:\n\ntransform.rotation = transform.rotation *\n          toQuaternion(mundur * speedRotasi * Time.deltaTime); \n\nJalankan unity dan lihat apa yang terjadi.\nDalam kode rotasi tersebut ganti variable mundur dengan maju.\nJalankan unity dan lihat apa yang terjadi.\n\nKUMPULKAN:\n\nScreenshoot Console Output dan simpan dengan nama sc_02_04.jpg"
  },
  {
    "objectID": "game-prak-2.html#pemrograman-berorientasi-object",
    "href": "game-prak-2.html#pemrograman-berorientasi-object",
    "title": "2. Menghubungkan object dengan variabel",
    "section": "Pemrograman Berorientasi Object",
    "text": "Pemrograman Berorientasi Object\n\nClass\nClass dapat dibanyangkan menjadi sebuah blueprint dari sesuatu objek. Misalnya blueprint dari object rumah adalah design rumah yang dibuat oleh arsitektur. Dalam pemrograman blueprint tersebut merupakan sebuah kode program yang dapat berisi banyak variable atau property dan banyak fungsi atau methods. Sebuah blueprint dapat dipanggil untuk dijadikan objek atau dikenal dengan istilah Instance. Jadi objek adalah instance dari class. Berikut adalah contoh kode program:\nusing System;\n\npublic class Person\n{\n    public Person ()\n    {\n    }\n}\nuntuk membuat sebuah objek maka harus dilakukan instance seperti berikut: Person mahasiswa = new Person ();\n\n\nProperty, Method, dan Enkapsulasi\nProperty pada dasarnya adalah sebuah variable dengan atau tanpa akses modifier. Berikut adalah contoh kode programmnya:\n    public int score;\n    private string name; \nAkses modifier pada pemrograman C# ada tiga yaitu public, private, dan protected. Akses modifier berkaitan dengan akses variabelnya.\nPrivate: Melindungi members Class sehingga tidak dapat diakses dari luar Class tersebut. Terkait dengan konsep enkapsulasi.\nProtected: Memperbolehkan members Class dapat diakses oleh Class yang merupakan suatu turunan Class tersebut.\nPublic: Memperbolehkan members Class untuk dapat diakses oleh Class yang lain.\nMethod atau fungsi merupakan sebuah perilaku dari class. Misalnya class person memiliki property tangan dan memiliki perilaku memukul. Berikut adalah contoh kode programnya:\nusing System;\n\npublic class Person\n{\n    public int tangan;\n\n    public Person ()\n    {\n        \n    }\n\n    void Memukul(int tangan)\n    {\n        this.tangan = tangan;\n    }\n}\nEnkapsulasi adalah konsep dari PBO untuk menyembunyikan suatu informasi. Hal ini mencegah pihak-pihak tertentu untuk mengakses kode (variable atau method) secara langsung. Berikut adalah wujud implementasi dari konsep tersebut:\nclass Person\n{\n    private string name;  // the name field\n    public string Name    // the Name property\n    {\n        get\n        {\n            return name;\n        }\n    }\n} \n\n\nInheritance\nMerupakan konsep pewarisan dalam PBO. Suatu objek dapat memiliki objek turunan dengan sifat yang sama dengan objek orangtuanya atau parent. Implementasi konsep ini sudah kita lakukan saat membuat Class baru di Unity. Misalnya kode berikut:\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class EnemyScript : MonoBehaviour {\n\n    public float movespeed;\n    public GameObject player;\n\n    void Start() {\n        // Start the enemy ten units behind the player character.\n\n    }\n    \n    // Update is called once per frame\n    void Update () {    \n        if(player.transform.position.x &gt; transform.position.x)\n            transform.position = new Vector3 (transform.position.x + movespeed * Time.deltaTime, transform.position.y);\n    }\n} \nPerhatikan bahwa EnemySctipt pada dasarnya merupakan turunan dari Class MonoBehaviour. Sehingga kita dapat mengakses Start() dan Update() dimana method tersebut dimiliki juga oleh Class orang-tuanya yaitu MonoBehaviour.\n\n\nPolymorphism\nMerupakan kemampuan yang dimiliki oleh suatu objek untuk dapat memiliki banyak bentuk. Berikut adalah contohnya: Buat tiga Class Fruit, Apple, dan FruitSalad.\n=============== Fruit.cs\nusing UnityEngine;\nusing System.Collections;\n\npublic class Fruit \n{\n    public Fruit()\n    {\n        Debug.Log(\"1st Fruit Constructor Called\");\n    }\n\n    public void Chop()\n    {\n        Debug.Log(\"The fruit has been chopped.\");     \n    }\n\n    public void SayHello()\n    {\n        Debug.Log(\"Hello, I am a fruit.\");\n    }\n}\n=================Apple.cs\nusing UnityEngine;\nusing System.Collections;\n\npublic class Apple : Fruit \n{\n    public Apple()\n    {\n        Debug.Log(\"1st Apple Constructor Called\");\n    }\n\n\n    public new void Chop()\n    {\n        Debug.Log(\"The apple has been chopped.\");     \n    }\n\n    public new void SayHello()\n    {\n        Debug.Log(\"Hello, I am an apple.\");\n    }\n} \n=========FruitSalad.cs\nusing UnityEngine;\nusing System.Collections;\n\npublic class FruitSalad : MonoBehaviour\n{\n    void Start () \n    {\n\n        Fruit myFruit = new Apple();\n\n        myFruit.SayHello();\n        myFruit.Chop();\n\n\n        Apple myApple = (Apple)myFruit;\n\n        myApple.SayHello();\n        myApple.Chop(); \n    }\n} \nMasukkan kode FruitSalad pada suatu game object, jalankan unity dan lihat apa yang terjadi."
  },
  {
    "objectID": "game-prak-2.html#generic-programming",
    "href": "game-prak-2.html#generic-programming",
    "title": "2. Menghubungkan object dengan variabel",
    "section": "Generic Programming",
    "text": "Generic Programming\nMerupakan teknik perograman yang memperbolehkan apapun tipe data baik itu tipe data biasa maupun tipe data bentukan atau objek yang didefinisikan sendiri untuk dapat dijadikan sebagai parameter. Simbol dari generic adalah “&lt;apapuntipedata&gt;”. Contoh implementasinya adalah saat kita ingin mengambil komponen Transform dari Object dengan memanfaatkan fungsi generik unity:\n    public GameObject player;\n\n    void Start() {\n        // Start the enemy ten units behind the player character.\n        Transform rb = player.GetComponent&lt;Transform&gt;();\n    }"
  },
  {
    "objectID": "game-prak-2.html#latihan",
    "href": "game-prak-2.html#latihan",
    "title": "2. Menghubungkan object dengan variabel",
    "section": "Latihan",
    "text": "Latihan\n\nBuat kode c# baru dan beri nama “ObjectMovement” pada game object “Player”.\nPastikan pada Inspector “Player” tidak ada script lain yang berkaitan selain “ObjectMovement”.  Jika ada, disable atau remove component klik symbol setting pojok kanan atas script component seperti gambar berikut:  \nBuat variable Vector3 kekanan, kekiri, maju, mundur, keatas, dan kebawah seperti yang telah dijelaskan pada bab sebelumnya. (Jangan lupa untuk inisialisasi Vector3 didalam method Start())\nBuat variable public dengan nama “aksi” bertipe int.\nIsikan kode program yang di-comment seperti gambar berikut: (isi sesuai dengan penjelasan sebelumnya. Boleh dengan fungsi yang Unity atau membuat sendiri)\n\n// Update is called once per frame\n    void Update () {\n        switch (aksi) {\n        case 0:\n            //translasi ke kanan\n            break;\n        case 1:\n            //translasi ke kiri\n            break;\n        case 2:\n            //translasi ke atas\n            break;\n        case 3:\n            //translasi ke bawah\n            break;\n        case 4:\n            //rotasi ke kanan\n            break;\n        case 5:\n            //rotasi ke kiri\n            break;\n        }\n    }\n\nJalankan unity dan isi aksi = 1 atau 2 atau 3 atau 4 atau 5 pada Inspector Player dan amati apa yang terjadi.\n\nKUMPULKAN:\nScreenshoot game tab dan simpan dengan nama sc_02_05.jpg"
  },
  {
    "objectID": "game-prak-4.html",
    "href": "game-prak-4.html",
    "title": "Pertemuan 4",
    "section": "",
    "text": "Pendahuluan Pada praktikum ke-4 ini, kita akan mencoba membuat project flappy bird 2D. Sebagian besar praktikum ini diambil dari materi perkuliahan Bapak Zikky http://zikky.lecturer.pens.ac.id/ begitu juga dengan asset game yang digunakan. Buat project baru 2D dengan nama “flappycopter”, atur aspect ratio 16:9 pada game tab. Persiapan Asset Game Terdapat 4 file gambar yang dapat ditambahkan ke project view, yaitu: atas.png, bawah.png, background.png, dan player.png. Buat folder Images, Prefabs, dan Scripts pada project window. Masukkan ke-empat file gambar tersebut diatas pada folder Images. Game Background Masukkan gambar background.png pada scene view dan jadikan background game flappycopter ini. Letakkan game object background pada posisi dan rotasi pada titik (0,0,0). Rubah scale X dan Y pada Transform Inspector dari object background dengan nilai 2.3. Tampilan background akan seperti gambar berikut:\nPastikan pada property Inspector sprite renderer order in layer bernilai 0. Order in layer ini penting untuk meletakkan object pada lapisan scene background atau foreground. Semakin kecil order in layer, maka object akan dapat ditumpuk oleh objek dengan order in layer yang lebih tinggi. Jangan lupa untuk menyimpan scene dengan nama “Main”. Game Player Masukkan gambar player.png pada project windows kedalam scene view. Pada object player lakukan sesuatu berikut ini: 1. Rubah Inspector Transform posisi x dan y menjadi -7 dan 2, seperti pada gambar berikut:\n\nRubah property Inspector sprite renderer order in layer bernilai 1.\nTambahkan komponen Rigidbody2D pada Inspector object player.\nBuat script baru pada object Player dengan nama “PlayerControl”, dengan rincian kode sepeti berikut:\n\nJumpForce: merupakan Vector2 yang digunakan sebagai nilai ambang batas fungsi AddForce. AddForce: merupakan method yang hanya bisa diakses jika object memiliki komponen Rigidbody 2D didalamnya. Method ini memaksakan suatu pergerakan tiba-tiba yang diatur dengan nilai vector2. Dalam praktikum ini, karena efek gravitasi dari rigidbody, object akan selalu turun kebawah. Maka dari itu, kita akan memaksa player untuk seakan-akan melompat keatas saat spasi ditekan. Maka dari itu, yang diberi nilai hanya Vector 2 sumbu Y saja, yaitu dengan nilai 300. Velocity pada rigidbody 2D dibuat Vector2.Zero atau [0,0] untuk mengembalikan kecepatan objek menjadi 0. 5. Jalankan unity dan lihat apa yang terjadi jika keyboard spasi di tekan. 6. Tambahkan polygon collider 2D pada object player. 7. Rubah kode program PlayerControl menjadi seperti dibawah ini: Tambahkan header library Unity.SceneManagement: using UnityEngine.SceneManagement;\ndigunakan untuk mengakses fungsi SceneManager.Load(), dimana fungsi tersebut berguna untuk mereset player jika player melebihi tinggi scene atau jatuh ketanah atau menabrak rintangan-rintangan (obstacles). Didalam update setelah scope dari Input.GetType(..)… atau setelah kurung kurawal tutup dari scope Input.GetType(..)., tambahkan:\nVector2 screenPosition = Camera.main.WorldToScreenPoint (transform.position);\nKode program diatas digunakan untuk mengambil posisi x dan y dari player yang relatif terhadap world scene. Setelah itu, tambahkan kode untuk memberi batasan lebih tinggi dan terjatuh: if (screenPosition.y &gt; Screen.height || screenPosition.y &lt; 0) Die (); kemudian, buat method Die() dibawah dari method Update(): void Die() { Debug.Log (“game over”); SceneManager.LoadScene (“Main”); } Terakhir adalah tambahkan fungsi OnCollisionEnter2D, jika objek player nanti menabrak apapun rintangan atau obstacle akan mati. void OnCollisionEnter2D(Collision2D coll) { Die (); }\n\nJalankan unity dan lihat apa yang terjadi. Game Obstacles Selanjutnya adalah membuat rintangan-rintangan atau obstacles dari game flappycopter ini. Berikut adalah tahapannya:\nMasukkan gambar atas dan bawah kedalam Scene view. Pastikan order in layer bernilai 1.\nSkala gambar atas dan bawah untuk x dan y bernilai 2.3.\nPosisikan gambar atas dan bawah secara berhadapan seperti gambar berikut:\nTambahkan polygon collider 2D pada object atas dan bawah.\nBuat game object kosong dengan cara klik GameObject-&gt;Create Empty di menu tab. Atau ctrl+shift+n.\nLihat hierarchy window dan rename “GameObject” menjadi “pasanganbatu”.\nTarik object “atas” dan “bawah” kedalam “pasanganbatu” pada hierarchy window, seperti gambar berikut:\nTambahkan Rigidbody 2D pada Inspector dari game object “pasanganbatu” Kemudian rubah body type menjadi “Kinematic” dan jangan centang (uncheck) simulated atau pada versi unity 5.6 kebawah centang “isKinematic”. Digunakan agar tidak terpengaruh oleh grafitasi dan pantulan yang diakibatkan benturan objek.\nBuat script “ObstacleInAct” pada Inspector “pasanganbatu”, seperti pada gambar berikut:\n\nKode tersebut berguna untuk menggerakan pasangan batu secara mundur dengan kecepatan -4, ketika game berjalan. 10. Jalankan unity dan lihat apa yang terjadi. 11. Tarik object pasanganbatu dari hierarchy window kedalam folder Prefabs untuk agar dapat menjadi object prefab. 12. Hapus game object pasanganbatu dari hierarchy window. 13. Buat game objek kosong dan rename menjadi “ObstacleGenerator”. 14. Tambahkan script baru pada Inspector “ObstacleGenerator” dengan nama “GenerateObs”. Berikut adalah isi dari kode “GenerateObs”:\nMethod/fungsi InvokeRepeating digunakan untuk memanggil method CreateObstacle setiap 1.5 detik dengan lama eksekusi dari method tersebut terbatas hanya 1 detik. Instantiate digunakan untuk instance object secara otomatis, disini akan dipanggi objek pasanganbatu. 15. Lihat pada Inspector dari ObstacleGenerator dan Tarik pasanganbatu dari folder Prefabs di Project Window kedalam variabel rock, seperti gambar dibawah ini:\n\nJalankan unity, dan lihat apa yang terjadi.\nAgar pemain tidak bosan karena lokasi dari obstacle statis. Jadi buat lokasi obstacle menjadi random dengan cara menambahkan kode berikut dibawah GetComponent ().velocity = veloc; pada script ObstacleInAct: float range = 2; transform.position = new Vector3 (transform.position.x, transform.position.y - range * Random.value, transform.position.z);\nJalankan Unity dan lihat apa yang terjadi.\nJika terjadi bug, batu terlalu kebawah maka perkecil nilai range. Scoring System Score akan menggunakan GUI Label pada Unity. Penjelasan GUI akan dijelaskan lebih lanjut pada pertemuan berikutnya. Namun demikian, kita akan mencoba membuat GUI Label untuk menampilkan score pada game flappycopter dengan dipanggil lewat kode. Berikut adalah tahapannya:\nMasuk pada script “GenerateObs”.\nBuat variabel bertipe int dengan nama score dengan di-assign nilai 0.\nTambahkan Method OnGUI untuk menambahkan GUI Label pada scene game: void OnGUI() { GUI.color = Color.black; GUILayout.Label (“Score:” + score.ToString()); }\nTambahkan kode: score++; setelah Instantiate pada method CreateObstacle.\nJalankan Unity dan Voila!! Flappycopter sudah jadi! Latihan (Optional) Kembangkan game flappycopter dengan semua metode yang sudah diajarkan sebelumnya. Contohnya, kita dapat menambahkan koin atau life point. Gunakan kreatifitasmu! KUMPULKAN: Screenshoot game tab dan simpan dengan nama sc_04_01.jpg"
  },
  {
    "objectID": "game-prak-11.html",
    "href": "game-prak-11.html",
    "title": "Pertemuan 11",
    "section": "",
    "text": "Pendahuluan Saat ini, kita sudah di penghujung pembuatan game 3D. Meskipun tidak banyak yang dipelajari dari pembuatan game 3D, kamu masih dapat belajar sendiri lebih lanjut. Pada pertemuan ini, kita akan kembali membuat beberapa program yang terkait tengan interaksi objek 3D. Pada unity transformasi yang ada pada objek game 2D atau 3D tidak jauh berbeda karena pada dasarnya unity dirancang untuk game 3D. Mari kita mulai dengan melanjutkan project “Coba3D”. Translasi Objek 3D Masih ingatkah kamu pada pertemuan ke-3 dan 4 tentang transformasi dan kendali (control)? Jika masih coba buka kode program “ObjectMovement.cs”. Disana kita mendefinisikan sendiri beberapa trigger vektor seperti vektor kekanan, kekiri, keatas, kebawah, maju, dan mundur. Disana terlihat hanya ada satu vektor posisi yang hanya memiliki nilai 1 atau -1. Jika menggunakan sistem kaidah tangan kiri posisi y = 1 digunakan untuk triger nilai positif yang disimbolkan oleh arah jari telunjuk yang menunjuk ke atas. Untuk nilai x positif mengikuti arah ibu jari yang menunjuk ke kanan. Terakhir, nilai z positif mengikuti arah jari tengah yang menunjuk kearah depan.\nPRAKTIKUM: 1. Copy dan paste file ObjectMovement.cs pada project “Latihan3_2D” kedalam project “Coba3D”. 2. Buat scene baru dengan nama Transformasi. 3. Buat objek Cube dan rename dengan nama “Kotak” dengan posisi x,y,z = 0. 4. Masukkan kode ObjectMovement kedalam objek Kotak. 5. Dahulu didalam method Update() kita sudah membuat kode program untuk translasi kekanan, kekiri, keatas, dan kebawah yang masing-masing memiliki kendali keyboard panah kanan, kiri, atas, dan bawah. Sekarang kita akan tambahkan kendali keyboard “W” untuk maju dan “S” untuk mundur. Tambahkan kode berikut didalam method Update(): if (Input.GetKey(KeyCode.W)) { transform.position = transform.position + (maju * speed * Time.deltaTime); } if (Input.GetKey(KeyCode.S)) { transform.position = transform.position + (mundur * speed * Time.deltaTime); }\npastikan bahwa Vector 3 maju sudah didefinisikan terlebih dahulu. 6. Jalankan unity dan coba untuk menekan W dan S pada keyboard. KUMPULKAN: Screenshoot game tab coba tekan salah satu W atau S. Simpan dengan nama sc_11_01.jpg Rotasi Objek 3D Rotasi objek 3D sebetulnya sama dengan rotasi 2D yang pernah kita lakukan. Pada rotasi 2D yang kita lakukan adalah memutar kekanan dan kekiri. Sebetulnya memutar kekanan dan kekiri pada rotasi 2D yang pernah kita lakukan berbeda makna dengan rotasi 3D. Pada rotasi 3D hal itu disebut dengan roll (Lihat modul praktikum ke-3. Hal tersebut dikarenakan pada game 2D tidak pernah ada rotasi yaw atau pitch. Berikut adalah kode program untuk pitch,yaw,dan roll (tidak menggunakan method Rotate melainkan toQuartenion yang pernah kita buat sendiri di praktikum ke-3). Rotasi Pitch : transform.rotation = transform.rotation * toQuaternion (kekanan * speedRotasi * Time.deltaTime); //pitch keatas atau transform.rotation = transform.rotation * toQuaternion (kekiri * speedRotasi * Time.deltaTime); //pitch kebawah\nRotasi yaw : transform.rotation = transform.rotation * toQuaternion (kebawah * speedRotasi * Time.deltaTime); //yaw kekanan atau transform.rotation = transform.rotation * toQuaternion (keatas * speedRotasi * Time.deltaTime); //yaw kekiri\nRotasi roll : transform.rotation = transform.rotation * toQuaternion (maju * speedRotasi * Time.deltaTime); //roll kekiri atau transform.rotation = transform.rotation * toQuaternion (mundur * speedRotasi * Time.deltaTime); //roll kekanan\nPRAKTIKUM: 1. Tetap pada script ObjectMovement. 2. Pada bagian Update(), dahulu kita membuat rotasi dengan tombol D dan A untuk rotasi 2D (roll). 3. Sekarang, ganti kode rotasi didalam Update dengan seluruh jenis rotasi pitch,yaw, dan roll: if (Input.GetMouseButton (0)) { if (Input.GetKey (KeyCode.J)) //buat kode roll kekanan if (Input.GetKey (KeyCode.G)) //buat kode roll kekiri if (Input.GetKey (KeyCode.Y)) //buat kode pitch keatas if (Input.GetKey (KeyCode.H)) //buat kode pitch kebawah if (Input.GetKey (KeyCode.T)) //buat kode yaw kekiri if (Input.GetKey (KeyCode.U)) //buat kode yaw kekanan } else { //biarkan kosong }\n\nIsikan kode program yang di komentari dengan benar! (boleh menggunakan Quartenion.Euler atau method toQuartenion atau Vector3.Rotate, pilih salah satu)\nMasukan script ObjectMovement kedalam komponen dari objek Kotak.\nJalankan unity, dan coba gerakkan rotasi objek dengan cara klik dan tahan mouse dan tekan G atau J atau yang lain sesuai aturan rotasi diatas. KUMPULKAN: Screenshoot game tab. Simpan dengan nama sc_11_02.jpg\n\nPhysic Engine Objek 3D Physic Engine untuk objek 3D menggunakan Rigidbody dan Collider. Namun demikian, mulai unity 5 keatas terdapat tambahan physic engine yaitu physic material. Physic material atau Physic material 2D (untuk objek 2D) untuk membuat efek permukaan objek misalnya ketika ingin membuat objek tersebut memantul. Physic material tidak akan diterangkan lebih lanjut, tetapi dapat dipelajari di https://docs.unity3d.com/Manual/class-PhysicMaterial.html . Untuk objek 3D, collider dan rigid body tidak menggunakan kata “2D” pada penamaan komponen tersebut. Terdapat 7 collider non legacy yang dapat diterapkan pada objek 3D, yaitu: box collider, capsule collider, mesh collider, spatial mapping collider, sphere collider, terrain collider, dan wheel collider. Dari nama-nama collider tersebut sudah terbayangkan bentuk objek yang akan dilingkupi oleh collider itu, misalnya box collider untuk objek yang berbentuk kubus. Pada objek-objek primitive, saat kita menambahkannya pada scene, secara default biasanya sudah memiliki collider. Tetapi belum miliki rigidbody. PRAKTIKUM: 1. Klik objek Kotak pada project Coba3D. 2. Tambahkan component Rigidbody . 3. Pastikan Use gravity tercentang atau gravity scale = 1 (pada unity versi 5.5 kebawah). 4. Jalankan unity dan lihat apakah objek kotak sudah terjatuh atau belum. 5. Jika sudah terjatuh. Hentikan unity. 6. Tambahkan game objek penompang berbentuk Quad dan rename dengan nama Pijakan. 7. Posisikan Pijakan pada x=0,y=-2,z=0 dan rotasi x=90,y dan z=0. 8. Scale Pijakan dengan nilai x,y,z = 10. 9. Buat material baru dengan standard shader dengan nama “matPijakan”, beri warna hitam. 10. Masukkan material matPijakan kedalam komponen objek Pijakan. Seperti gambar dibawah ini.\n\nTambahkan object ThirdPersonController ke scene (Masuk pada Project Window, Assets-&gt;Standard Asset-&gt;Characters-&gt;ThirdPersonCharacter-&gt;Prefabs)\nPastikan object ThirdPersonController memiliki transformasi seperti gambar berikut:\nKlik objek Kotak pada hierarchy window dan lihat pada Inspector. Hilangkan komponen script ObjectMovement dari objek kotak tersebut.\nJalankan unity dan kendalikan objek ThirdPersonController untuk menabrak objek kotak. KUMPULKAN: Screenshoot game tab saat ThirdPersonController menabrak objek kotak. Simpan dengan nama sc_11_03.jpg Deteksi Tumbukan Objek 3D Syarat deteksi tumbukan adalah terdapat komponen rigidbody dan collider pada kedua objek yang akan bertumbukan. Setelah kedua komponen itu ada, selanjutnya kita dapat menambahkan kode program dengan method OnCollisionEnter(), OnCollisionStay(), OnCollisionExit() atau OnTriggerEnter(), OnTriggerStay(), OnTriggerExit(). PRAKTIKUM:\nKlik objek Kotak pada project Coba3D.\nBuat tag baru dengan nama “enemy” dan atur pada objek Kotak.\nBuat UI text dan rename dengan nama “TextScore”. Biarkan Canvas apa adanya.\nIsikan pada Inspector Textscorem, width = 500, height = 250, Text = “Score = 0”.\nTambahkan script baru pada objek ThirdPersonController dengan nama CollisionPlayerObjek.\nTambahkan variabel teksScore pada script CollisionPlayerObjek dengan tipe Text (pastikan sudah menggunakan using UnityEngine.Text. public Text teksScore;\nTambahkan variabel score pada script CollisionPlayerObjek dengan tipe int. int score = 0;\nTambahkan method OnCollisionEnter pada script CollisionPlayerObjek. void OnCollisionEnter(Collision coll) { if (coll.collider.tag == “Enemy”) { score++; teksScore.text = “Score =”+score.ToString (); Destroy (coll.gameObject); } }\nMasukkan objek teksScore kedalam variabel teksScore pada inspector ThirdPersonController.\nJalankan unity dan coba tumbukkan ThirdPersonController dengan Kotak. KUMPULKAN: Screenshoot game tab setelah ThirdPersonController menumbuk objek kotak. Simpan dengan nama sc_11_04.jpg Orbit Camera pada karakter Player (Opsional) Pernahkan bermain game God Of War? Jika pernah, terdapat scene dimana player sedang berjalan pada kayu kecil dan dibawahnya adalah jurang api. Sekarang kita akan mencoba untuk membuat hal itu dengan kendali orang-ketiga dan arah dari mouse. PRAKTIKUM:\nKlik objek Kotak pada project Coba3D. Posisikan seperti gambar berikut:\nKlik objek ThirdPersonController dan posisikan seperti gambar berikut:\nKlik objek Main Camera dan posisikan seperti gambar berikut:\nTambahkan script baru dengan nama “OrbitCamera” pada objek Main Camera.\nJalankan Unity dan analisa apa yang terjadi. KUMPULKAN: Screenshoot game tab setelah ThirdPersonController menumbuk objek kotak. Simpan dengan nama sc_11_05.jpg Latihan Jika sudah selesai praktikum, silahkan kembangkan game yang ada pada praktikum kali ini dengan pengetahuan yang sebelumnya sudah dipelajari dan kreativitas kamu. Buat game third-person control dengan berbagai macam interaksi. KUMPULKAN: Screenshoot game tab dimana game yang dibuat sudah merupakan modifikasi dari praktikum kali ini. Simpan dengan nama sc_11_06.jpg."
  },
  {
    "objectID": "game-prak-3.html",
    "href": "game-prak-3.html",
    "title": "Pertemuan 3",
    "section": "",
    "text": "Pendahuluan Pada praktikum ke-3 ini, kita akan melanjutkan project “Latihan3_2D” yang pertemuan sebelumnya sudah dibuat. Beberapa teknik pemrograman dasar game 2D sudah kita pelajari, namun demikian masih ada beberapa hal seperti, membuat animasi 2D, prefabs, kontrol game dan yang paling penting adalah membuat deteksi tumbukan (collision detection). Modul praktikum ini didesain dengan model pembelajaran terurut dan runtun, jadi pastikan kamu membaca dari awal hingga akhir begitu juga dengan praktikum yang ada (JANGAN MELOMPAT-LOMPAT SAAT MEMBACA DAN MENGIKUTI PRAKTIKUM MODUL INI). Setelah pertemuan ke-3 ini, kamu akan bisa secara mandiri membuat game 2D dengan berbagai macam game mekanik.\nAnimation sprite 2D Animasi gambar sprite terdiri dari susunan berbagai gambar dengan bentuk atau transformasi yang saling berkesinambungan satu sama lain. Berikut adalah contoh dari susunan gambar yang dapat di animasikan :\nAda dua bentuk gambar sprite. Pertama, gambar sprite yang berada dalam file gambar berbeda-beda namun berkesinambungan. Kedua, gambar sprite yang berisi banyak gambar berkesinambungan tetapi tetap pada satu file gambar. Teknik untuk membuat bentuk gambar sprite yang kedua, terkadang dikenal dengan istilah texture atlasing. Terdapat perlakuan yang berbeda antara bentuk gambar sprite yang pertama dan berbeda. Namun demikian, disini kita akan gunakan cara yang paling mudah yaitu menggunakan bentuk gambar sprite yang kedua. PRAKTIKUM: 1. Tambahkan asset game “coinsprite.png” kedalam project Window. 2. Masukkan kedalam folder Images. 3. Klik “coinsprite” pada project window (perhatikan bahwa jangan masukkan ke scene dulu) 4. Lihat pada Inspector: Ganti Sprite Mode pada Inspector dengan nilai “Multiple”, seperti gambar berikut.\n\nKemudian kembali ke project window, klik pada bagian panah kanan pada coinsprite seperti yang terlihat pada gambar berikut:\nSekarang lihat Inspector, Klik pada tombol “Sprite Editor” dan jika ditanya “Apply and continue to sprite editor or cancel” pilih “apply”. Berikut adalah tampilan dari Sprite Editor:\nDisebelah kiri atas dari sprite editor terdapat tulisan “Slice”. Klik pada tulisan tersebut, sehingga akan muncul box seperti berikut:\nPastikan Type adalah Automatic, Pivot adalah Center, dan Method adalah Delete Existing. Kemudian klik tombol Slice.\nJika sudah maka lihat disebelah kanan dari tab slice bahwa tulisan Revert dan Apply sudah menyala. Kemudian tekan Apply seperti gambar berikut:\nClose Sprite Editor dan lihat pada Project Window. Jika pemotongan berhasil maka akan muncul banyak gambar dari coinsprite:\nSelanjutnya adalah drag coinsprite dari Project Window ke Scene View.\nSelanjutnya akan muncul box penyimpanan animasi dan simpan dengan nama “animkoin” seperti gambar berikut:\nJalankan Unity dan lihat pada Game tab. KUMPULKAN: Screenshoot Game tab dan simpan dengan nama sc_03_01.jpg Memposisikan Game Object Pada Scene Untuk memposisikan game objek dengan mudah klik pada game object di hierarcy window atau scene view. Untuk memilih beberapa objek untuk dipindahkan tahan shift dan klik game objek mana saja yang akan di pindah. Gunakan transform tools untuk memindahkan (move), memutar (rotate), menskala (scale), atau transformasi bidang segi empat (rectTransform) yang ditunjukkan oleh gambar berikut:\n\nMove Transform Digunakan untuk memindahkan objek 2D atau 3D pada scene. Panah merah berkaitan dengan posisi sumbu x untuk memindahkan objek sejajar dengan arah sumbu x. Panah hijau berkaitan dengan sumbu y untuk memindahkan objek sejajar dengan arah sumbu y. Panah biru berkaitan dengan sumbu z untuk memindahkan objek sejajar dengan arah sumbu z. Terakhir adalah gambar kubus atau persegi ditengah-tengah panah tersebut, berguna untuk mindahkan objek secara bebas tidak terkait dengan sumbu manapun. Berikut adalah ilustrasi gambar dari penggunaan move transform:\nUntuk mengaktifkan mode ini gunakan tombol W pada keyboard. Rotate Transform Digunakan untuk memutar objek 2D atau 3D pada scene. Panah merah berkaitan dengan rotasi sumbu x untuk memutar objek sejajar dengan arah sumbu x. Panah hijau berkaitan dengan rotasi sumbu y untuk memutar objek sejajar dengan arah sumbu y. Panah biru berkaitan dengan rotasi sumbu z untuk memutar objek sejajar dengan arah sumbu z. Berikut adalah ilustrasi gambar dari penggunaan rotate transform:\nUntuk mengaktifkan mode ini gunakan tombol E pada keyboard. Scale Transform Digunakan untuk menskala objek 2D atau 3D pada scene. Panah merah berkaitan dengan skala sumbu x untuk menskala objek sejajar dengan arah sumbu x. Panah hijau berkaitan dengan menskala sumbu y untuk memutar objek sejajar dengan arah sumbu y. Panah biru berkaitan dengan menskala sumbu z untuk memutar objek sejajar dengan arah sumbu z. Berikut adalah ilustrasi gambar dari penggunaan scale transform:\nUntuk mengaktifkan mode ini gunakan tombol R pada keyboard. Rect Transform Digunakan untuk memindahkan sekaligus menskala objek 2D atau 3D pada scene. Berikut adalah ilustrasi gambar dari penggunaan rect transform:\nUntuk mengaktifkan mode ini gunakan tombol T pada keyboard. Prefabs Prefabs merupakan tipe aset game yang dapat menyimpan game object dengan konfigurasi komponen property yang dapat disesuaikan. Sebagai contoh, ketika kita sudah terlanjur membuat banyak koin dengan komponen properti yang sama (duplikat) didalam scene dan kemudian kita ingin mengganti salah satu komponen properti pada setiap koin. Pertanyaannya adalah apakah kita akan merubah satu persatu komponen properti yang ada setiap koin tersebut?. Hal itu tentu sangat tidak efisien. Untuk mengatasi permasalahan tersebut, unity memiliki solusi yaitu dengan membuat objek koin menjadi prefabs. Dengan hanya merubah salah satu prefab koin, maka prefab koin-koin yang lain akan secara otomatis merubah juga. PRAKTIKUM: 1. Buat game object “koin1”, “koin2”, “koin3”, “koin4”, “koin5”, “koin6”, “koin7”. Untuk menduplikat game objek di hierarchy window, klik pada salah satu object, tekan ctrl+d. 2. Gunakan Transform tool untuk memindahkan setiap objek koin. Berikut adalah contoh scene view dari penyebaran objek koin.\n\nBuat script baru dengan nama “CoinMove”, dengan rincian kode sebagai berikut:\nMasukkan CoinMove kedalam Game Object “Koin1”. Isikan speed pada Inspector Koin1 dengan nilai 3.\nJalankan Unity dan lihat apa yang terjadi.\nTimbul pertanyaan, “Jika kita ingin merubah semua koin, apakah kita harus memasukkan kode CoinMove dan mengisikan speed disemua koin? Lalu bagaimana jika koin tersebut tidak Cuma 10 tapi ratusan atau ribuan?”\nJawabannya adalah dengan prefab. Buat folder Prefabs di dalam Project Window. Jika sudah ada masuk pada folder tersebut.\nTarik koin2 (dimana belum diberi kode program CoinMove) kedalam folder Prefabs pada Project Window. Amati koin2 pada Hierarchy window, jika pembuatan prefab berhasil maka tulisan koin2 menjadi bewarna biru.\nHapus game object “koin1”,”koin3”,”koin4”,”koin5”,”koin6”, dan “koin7”.\nDuplikat “koin2” dimana “koin2” sekarang adalah sebuah prefab.\nRename semua game object koin menjadi “koin1”, “koin2”, “koin3”, “koin4”, “koin5”, “koin6”, “koin7”, seperti gambar berikut:\nRubah posisi setiap koin dengan transform tool.\nMasukkan kode “CoinMove” pada game object “Koin1” dan isikan pada Inspector Koin1 speed dengan nilai 3.\nMasih di Inspector Koin1, lihat bagian atas, klik tombol Apply.\nJalankan Unity dan lihat pada Game tab. KUMPULKAN: Screenshoot Game tab dan simpan dengan nama sc_03_02.jpg Kendali Game Object 2D Untuk mengendalikan pergerakan game object, biasanya kita menggunakan berbagai metode input seperti: input keyboard, input mouse, input joystick, touchscreen, dll. Unity mendukung hampir semua jenis metode input, termasuk untuk input perangkat virtual reality. Unity juga mendukung lebih dari satu jenis metode input dalam satu game. Sebagai contoh, game flappy bird, jika dimainkan di computer akan menggunakan tombol spasi untuk input, atau mouse click atau touchscreen pada smartphone. Pemrograman Input Unity menggunakan dua metode umum yaitu dengan virtual axes dan Keys. Virtual Axes Virtual axes memperbolehkan akses media input dengan nama yang sudah didefinisikan. Biasanya secara default unity sudah memberikan beberapa nama ini seperti, horizontal, vertical, Fire1, Fire2, dll pada Input Manager. Untuk melihat konfigurasi ini akses Edit-&gt;Project Settings-&gt;Input lihat inspector seperti gambar berikut:\n\nUntuk menggunakan virtual axes dapat dilakukan seperti kode berikut: (biasanya kode ini diletakan didalam method Update()) if (Input.GetAxis (“Horizontal”)) { //jalankan objek ke kanan dengan a atau d atau arah kanan atau kiri } Input.GetAxis merupakan kode untuk memanggil virtual axes dengan isian parameter nama yang sudah didefinisikan pada Input Manager. Keys Metode Input selanjutnya adalah menggunakan Keys. Keys harus berisi parameter yang mengikuti aturan baku unity. (detail: https://docs.unity3d.com/Manual/ConventionalGameInput.html ). Misalnya untuk key normal “a”,”b”,”c” (Maksudnya adalah “a” untuk input keyboard “a”). berikut adalah contoh penggunaan keys : (biasanya kode ini diletakan didalam method Update()) if(Input.GetKey(KeyCode.D)) { // jalankan objek ke kanan dengan menekan tombol D dikeyboard } Collision Detection 2D Didalam game digital, tumbukan antar objek sangatlah penting untuk interaktivitas objek didalam game. Deteksi tumbukan antar object ini biasanya menggunakan physics engine. Physics engine untuk melihat sebuah efek simulasi fisika dalam game. Dalam unity 2D, physics engine diatur dengan komponen Rigidbody2D dan Collider2D.\nRigidBody 2D Rigidbody 2D diletakkan pada game object 2D untuk memiliki perilaku simulasi fisika seperti: terpengaruh gravitasi, memiliki massa, dan pengaturan kecepatan gerakan. Ada tiga bentuk body dalam Rigidbody 2D yaitu Dynamic, static, dan kinematic. Dynamic: Untuk objek yang bisa bergerak dengan simulasi fisika. Static: Untuk objek yang tetap (tidak bergerak) Kinematic: Untuk objek yang bisa bergerak dengan fungsi khusus seperti Translate atau Rotate.\nBerikut adalah cara menambahkan rigidbody 2D pada sebuah game object. Dalam praktikum ini, kita akan menggunakan project Latihan3_2D, dimana kita sudah memiliki object “Player”. Untuk menambahkan rigidbody 2D pada Player pertama, klik Player pada Scene atau hierarchy window. Kemudian masuk ke inspector dan klik Add Component. Ketikkan “Rigidbody2D” lalu tekan ENTER.\nUncheck simulated untuk melihat game objek yang tidak terpengaruh oleh gravitasi. Material physic merupakan masukan untuk membuat material fisika seperti memantul, solid, dan sebagainya. Namun demikian, material physic tidak akan dijelaskan lebih lanjut. Mass untuk mengatur massa jenis object dan Gravity Scale 0 sampai 1 atau uncheck atau check untuk menggunakan gravitasi. Collider 2D Collider 2D merupakan komponen unity yang bertugas untuk memberikan ruang batasan pada sebuah game object untuk dapat melakukan tumbukan fisik. Collider 2D dapat juga dibuat tidak terlihat namun tetap bisa berlaku tumbukan walaupun hanya dijadikan sebuah trigger penanda. Beberapa collider 2D yang sering digunakan adalah sebagai berikut: Circle collider 2D untuk game objek yang berbentuk lingkaran Box collider 2D untuk game objek yang berbentuk kotak persegi atau persegi panjang Polygon Collider 2D untuk game objek dengan sembarang bentuk Capsule Collider 2D untuk game objek berbentuk kapsul\nCara untuk menambahkan komponen Collider2D mirip dengan RigidBody. Sebagai contoh, dengan game object “Player”, ketikkan “Polygon Collider 2D” pada saat Add Component, lalu ENTER.\nPada scene view seharusnya ada suatu gambar bergaris bewarna hijau yang artinya game object tersebut sudah diberi collider 2D.\nSyarat terjadinya tumbukan adalah adanya collider 2D di kedua objek yang akan bertumbukan. Disamping itu, salah satu dari game object tersebut harus memiliki Rigidbody 2D. PRAKTIKUM: 1. Tambahkan Rigidbody 2D dan Polygon Collider 2D pada object “Player”. 2. Tambahkan Polygon Collider 2D pada object “Enemy”. 3. Pada pertemuan sebelumnya sudah ada script bernama “ObjectMovement”. Tambahkan method baru OnCollisionEnter, OnCollisionStay, dan OnCollisionExit. Perhatikan bahwa method ini harus ditulis dengan benar karena termasuk dalam method yang sudah ditentukan unity (lihat modul pertemuan 3). void OnCollisionEnter2D(Collision2D coll) {\n}\n\nvoid OnCollisionStay2D(Collision2D coll) {\n\n}\n\nvoid OnCollisionExit2D(Collision2D coll) {\n\n} \n\nBuat tag baru dengan nama “playerTag” dan “enemyTag” dengan cara klik sembarang game object. Masuk Inspector dan klik pada tombol untagged-&gt;Add tag, seperti gambar berikut:\n\nKlik symbol + untuk menambah tag dan – untuk menghapus tag. Pastikan tag sudah ditambahkan dengan nama seperti berikut (case sensitive):\n\nAtur tag playerTag didalam object Player dengan cara, klik untagged di Inspector dan pilih playerTag, seperti gambar berikut:\nAtur tag enemyTag didalam object Enemy seperti cara langkah ke-5.\nLengkapi method OnCollisionEnter2D, OnCollisionStay2D,dan OnCollisionExit2D seperti kode berikut: void OnCollisionEnter2D(Collision2D coll) { if (coll.gameObject.tag == “enemyTag”) { Debug.Log (“Mulai Nabrak”); } }\nvoid OnCollisionStay2D(Collision2D coll) { if (coll.gameObject.tag == “enemyTag”) { Debug.Log (“Sedang Nabrak”); } }\nvoid OnCollisionExit2D(Collision2D coll) { if (coll.gameObject.tag == “enemyTag”) { Debug.Log (“Sudah Nabrak”); } }\n\ncoll.gameObject.tag == “enemyTag” digunakan untuk mencari game object mana yang bertumbukan dengan game objek Player melalui nama tag. 8. Pastikan bahwa ObjectMovement script sudah ada didalam komponen Inspector dari object Player. 9. Jalankan unity dan lihat apa yang terjadi pada Console Output. KUMPULKAN: 1. Screenshoot Console Output dan simpan dengan nama sc_03_03.jpg Latihan 1. Tambahkan variabel baru pada “ObjectMovement” dengan nama score dengan tipe data integer. 2. Buat tag baru dengan nama “coinTag” dan atur pada game object prefab koin1 sampai koin7. 3. Edit kode berikut: if (coll.gameObject.tag == “enemyTag”) { Debug.Log (“Mulai Nabrak”); } menjadi if (coll.gameObject.tag == “enemyTag”) { Debug.Log (“Game over”); Time.timeScale = 0;\n    }\n\nTambahkan kode jika menabrak “coinTag” maka score akan selalu bertambah 1 dan Outputkan Score dengan Debug.Log.\nLengkapi kode program yang masih di-comment berikut: (praktikum ini berkaitan dengan praktikum sebelumnya)\nJalankan unity dan simulasikan gerak kekanan kekiri dan lain-lain dengan tombol keyboard yang sudah ditentukan.\n\nKUMPULKAN: Screenshoot game tab dan simpan dengan nama sc_03_04.jpg"
  },
  {
    "objectID": "game-prak-3.html#pendahuluan",
    "href": "game-prak-3.html#pendahuluan",
    "title": "3. Animation sprite 2D",
    "section": "Pendahuluan",
    "text": "Pendahuluan\nPada praktikum ke-3 ini, kita akan melanjutkan project “Latihan3_2D” yang pertemuan sebelumnya sudah dibuat. Beberapa teknik pemrograman dasar game 2D sudah kita pelajari, namun demikian masih ada beberapa hal seperti, membuat animasi 2D, prefabs, kontrol game dan yang paling penting adalah membuat deteksi tumbukan (collision detection). Modul praktikum ini didesain dengan model pembelajaran terurut dan runtun, jadi pastikan kamu membaca dari awal hingga akhir begitu juga dengan praktikum yang ada (JANGAN MELOMPAT-LOMPAT SAAT MEMBACA DAN MENGIKUTI PRAKTIKUM MODUL INI). Setelah pertemuan ke-3 ini, kamu akan bisa secara mandiri membuat game 2D dengan berbagai macam game mekanik."
  },
  {
    "objectID": "game-prak-3.html#animation-sprite-2d",
    "href": "game-prak-3.html#animation-sprite-2d",
    "title": "3. Animation sprite 2D",
    "section": "Animation sprite 2D",
    "text": "Animation sprite 2D\nAnimasi gambar sprite terdiri dari susunan berbagai gambar dengan bentuk atau transformasi yang saling berkesinambungan satu sama lain. Berikut adalah contoh dari susunan gambar yang dapat di animasikan :\n\n\n\ngambar\n\n\nAda dua bentuk gambar sprite. Pertama, gambar sprite yang berada dalam file gambar berbeda-beda namun berkesinambungan. Kedua, gambar sprite yang berisi banyak gambar berkesinambungan tetapi tetap pada satu file gambar. Teknik untuk membuat bentuk gambar sprite yang kedua, terkadang dikenal dengan istilah texture atlasing. Terdapat perlakuan yang berbeda antara bentuk gambar sprite yang pertama dan berbeda. Namun demikian, disini kita akan gunakan cara yang paling mudah yaitu menggunakan bentuk gambar sprite yang kedua.\nPRAKTIKUM:\n\nTambahkan asset game “coinsprite.png” kedalam project Window.\nMasukkan kedalam folder Images.\nKlik “coinsprite” pada project window (perhatikan bahwa jangan masukkan ke scene dulu)\nLihat pada Inspector: Ganti Sprite Mode pada Inspector dengan nilai “Multiple”, seperti gambar berikut.\n\n\n\n\ngambar\n\n\n\nKemudian kembali ke project window, klik pada bagian panah kanan pada coinsprite seperti yang terlihat pada gambar berikut:\n\n\n\n\ngambar\n\n\n\nSekarang lihat Inspector, Klik pada tombol “Sprite Editor” dan jika ditanya “Apply and continue to sprite editor or cancel” pilih “apply”. Berikut adalah tampilan dari Sprite Editor:\n\n\n\n\ngambar\n\n\n\nDisebelah kiri atas dari sprite editor terdapat tulisan “Slice”. Klik pada tulisan tersebut, sehingga akan muncul box seperti berikut:\n\n\n\n\ngambar\n\n\n\nPastikan Type adalah Automatic, Pivot adalah Center, dan Method adalah Delete Existing. Kemudian klik tombol Slice.\nJika sudah maka lihat disebelah kanan dari tab slice bahwa tulisan Revert dan Apply sudah menyala. Kemudian tekan Apply seperti gambar berikut:\n\n\n\n\ngambar\n\n\n\nClose Sprite Editor dan lihat pada Project Window. Jika pemotongan berhasil maka akan muncul banyak gambar dari coinsprite:\n\n\n\n\ngambar\n\n\n\nSelanjutnya adalah drag coinsprite dari Project Window ke Scene View.\nSelanjutnya akan muncul box penyimpanan animasi dan simpan dengan nama “animkoin” seperti gambar berikut:\n\n\n\n\ngambar\n\n\n\nJalankan Unity dan lihat pada Game tab.\n\nKUMPULKAN:\nScreenshoot Game tab dan simpan dengan nama sc_03_01.jpg"
  },
  {
    "objectID": "game-prak-3.html#memposisikan-game-object-pada-scene",
    "href": "game-prak-3.html#memposisikan-game-object-pada-scene",
    "title": "3. Animation sprite 2D",
    "section": "Memposisikan Game Object Pada Scene",
    "text": "Memposisikan Game Object Pada Scene\nUntuk memposisikan game objek dengan mudah klik pada game object di hierarcy window atau scene view. Untuk memilih beberapa objek untuk dipindahkan tahan shift dan klik game objek mana saja yang akan di pindah. Gunakan transform tools untuk memindahkan (move), memutar (rotate), menskala (scale), atau transformasi bidang segi empat (rectTransform) yang ditunjukkan oleh gambar berikut:\n\n\n\ngambar\n\n\n\nMove Transform\nDigunakan untuk memindahkan objek 2D atau 3D pada scene. Panah merah berkaitan dengan posisi sumbu x untuk memindahkan objek sejajar dengan arah sumbu x. Panah hijau berkaitan dengan sumbu y untuk memindahkan objek sejajar dengan arah sumbu y. Panah biru berkaitan dengan sumbu z untuk memindahkan objek sejajar dengan arah sumbu z. Terakhir adalah gambar kubus atau persegi ditengah-tengah panah tersebut, berguna untuk mindahkan objek secara bebas tidak terkait dengan sumbu manapun. Berikut adalah ilustrasi gambar dari penggunaan move transform:\n\n\n\ngambar\n\n\nUntuk mengaktifkan mode ini gunakan tombol W pada keyboard.\n\n\nRotate Transform\nDigunakan untuk memutar objek 2D atau 3D pada scene. Panah merah berkaitan dengan rotasi sumbu x untuk memutar objek sejajar dengan arah sumbu x. Panah hijau berkaitan dengan rotasi sumbu y untuk memutar objek sejajar dengan arah sumbu y. Panah biru berkaitan dengan rotasi sumbu z untuk memutar objek sejajar dengan arah sumbu z. Berikut adalah ilustrasi gambar dari penggunaan rotate transform:\n\n\n\ngambar\n\n\nUntuk mengaktifkan mode ini gunakan tombol E pada keyboard.\n\n\nScale Transform\nDigunakan untuk menskala objek 2D atau 3D pada scene. Panah merah berkaitan dengan skala sumbu x untuk menskala objek sejajar dengan arah sumbu x. Panah hijau berkaitan dengan menskala sumbu y untuk memutar objek sejajar dengan arah sumbu y. Panah biru berkaitan dengan menskala sumbu z untuk memutar objek sejajar dengan arah sumbu z. Berikut adalah ilustrasi gambar dari penggunaan scale transform:\n\n\n\ngambar\n\n\nUntuk mengaktifkan mode ini gunakan tombol R pada keyboard.\n\n\nRect Transform\nDigunakan untuk memindahkan sekaligus menskala objek 2D atau 3D pada scene. Berikut adalah ilustrasi gambar dari penggunaan rect transform:\n\n\n\ngambar\n\n\nUntuk mengaktifkan mode ini gunakan tombol T pada keyboard."
  },
  {
    "objectID": "game-prak-3.html#prefabs",
    "href": "game-prak-3.html#prefabs",
    "title": "3. Animation sprite 2D",
    "section": "Prefabs",
    "text": "Prefabs\nPrefabs merupakan tipe aset game yang dapat menyimpan game object dengan konfigurasi komponen property yang dapat disesuaikan. Sebagai contoh, ketika kita sudah terlanjur membuat banyak koin dengan komponen properti yang sama (duplikat) didalam scene dan kemudian kita ingin mengganti salah satu komponen properti pada setiap koin. Pertanyaannya adalah apakah kita akan merubah satu persatu komponen properti yang ada setiap koin tersebut?. Hal itu tentu sangat tidak efisien. Untuk mengatasi permasalahan tersebut, unity memiliki solusi yaitu dengan membuat objek koin menjadi prefabs. Dengan hanya merubah salah satu prefab koin, maka prefab koin-koin yang lain akan secara otomatis merubah juga.\nPRAKTIKUM:\n\nBuat game object “koin1”, “koin2”, “koin3”, “koin4”, “koin5”, “koin6”, “koin7”. Untuk menduplikat game objek di hierarchy window, klik pada salah satu object, tekan ctrl+d.\nGunakan Transform tool untuk memindahkan setiap objek koin. Berikut adalah contoh scene view dari penyebaran objek koin.\n\n\n\n\ngambar\n\n\n\nBuat script baru dengan nama “CoinMove”, dengan rincian kode sebagai berikut:\n\n\n\n\ngambar\n\n\n\nMasukkan CoinMove kedalam Game Object “Koin1”. Isikan speed pada Inspector Koin1 dengan nilai 3.\nJalankan Unity dan lihat apa yang terjadi.\nTimbul pertanyaan, “Jika kita ingin merubah semua koin, apakah kita harus memasukkan kode CoinMove dan mengisikan speed disemua koin? Lalu bagaimana jika koin tersebut tidak Cuma 10 tapi ratusan atau ribuan?”\nJawabannya adalah dengan prefab. Buat folder Prefabs di dalam Project Window. Jika sudah ada masuk pada folder tersebut.\nTarik koin2 (dimana belum diberi kode program CoinMove) kedalam folder Prefabs pada Project Window. Amati koin2 pada Hierarchy window, jika pembuatan prefab berhasil maka tulisan koin2 menjadi bewarna biru.\nHapus game object “koin1”,”koin3”,”koin4”,”koin5”,”koin6”, dan “koin7”.\nDuplikat “koin2” dimana “koin2” sekarang adalah sebuah prefab.\nRename semua game object koin menjadi “koin1”, “koin2”, “koin3”, “koin4”, “koin5”, “koin6”, “koin7”, seperti gambar berikut:\n\n\n\n\ngambar\n\n\n\nRubah posisi setiap koin dengan transform tool.\nMasukkan kode “CoinMove” pada game object “Koin1” dan isikan pada Inspector Koin1 speed dengan nilai 3.\nMasih di Inspector Koin1, lihat bagian atas, klik tombol Apply.\n\n\n\n\ngambar\n\n\n\nJalankan Unity dan lihat pada Game tab.\n\nKUMPULKAN:\nScreenshoot Game tab dan simpan dengan nama sc_03_02.jpg"
  },
  {
    "objectID": "game-prak-3.html#kendali-game-object-2d",
    "href": "game-prak-3.html#kendali-game-object-2d",
    "title": "3. Animation sprite 2D",
    "section": "Kendali Game Object 2D",
    "text": "Kendali Game Object 2D\nUntuk mengendalikan pergerakan game object, biasanya kita menggunakan berbagai metode input seperti: input keyboard, input mouse, input joystick, touchscreen, dll. Unity mendukung hampir semua jenis metode input, termasuk untuk input perangkat virtual reality. Unity juga mendukung lebih dari satu jenis metode input dalam satu game. Sebagai contoh, game flappy bird, jika dimainkan di computer akan menggunakan tombol spasi untuk input, atau mouse click atau touchscreen pada smartphone. Pemrograman Input Unity menggunakan dua metode umum yaitu dengan virtual axes dan Keys.\n\nVirtual Axes\nVirtual axes memperbolehkan akses media input dengan nama yang sudah didefinisikan. Biasanya secara default unity sudah memberikan beberapa nama ini seperti, horizontal, vertical, Fire1, Fire2, dll pada Input Manager. Untuk melihat konfigurasi ini akses Edit-&gt;Project Settings-&gt;Input lihat inspector seperti gambar berikut:\n\n\n\ngambar\n\n\nUntuk menggunakan virtual axes dapat dilakukan seperti kode berikut: (biasanya kode ini diletakan didalam method Update())\nif (Input.GetAxis (\"Horizontal\")) {\n            //jalankan objek ke kanan dengan a atau d atau arah kanan atau kiri\n        } \nInput.GetAxis merupakan kode untuk memanggil virtual axes dengan isian parameter nama yang sudah didefinisikan pada Input Manager.\n\n\nKeys\nMetode Input selanjutnya adalah menggunakan Keys. Keys harus berisi parameter yang mengikuti aturan baku unity. (detail: https://docs.unity3d.com/Manual/ConventionalGameInput.html ). Misalnya untuk key normal “a”,”b”,”c” (Maksudnya adalah “a” untuk input keyboard “a”). berikut adalah contoh penggunaan keys : (biasanya kode ini diletakan didalam method Update())\nif(Input.GetKey(KeyCode.D)) {\n       // jalankan objek ke kanan dengan menekan tombol D dikeyboard \n        }"
  },
  {
    "objectID": "game-prak-3.html#collision-detection-2d",
    "href": "game-prak-3.html#collision-detection-2d",
    "title": "3. Animation sprite 2D",
    "section": "Collision Detection 2D",
    "text": "Collision Detection 2D\nDidalam game digital, tumbukan antar objek sangatlah penting untuk interaktivitas objek didalam game. Deteksi tumbukan antar object ini biasanya menggunakan physics engine. Physics engine untuk melihat sebuah efek simulasi fisika dalam game. Dalam unity 2D, physics engine diatur dengan komponen Rigidbody2D dan Collider2D.\n\nRigidBody 2D\nRigidbody 2D diletakkan pada game object 2D untuk memiliki perilaku simulasi fisika seperti: terpengaruh gravitasi, memiliki massa, dan pengaturan kecepatan gerakan. Ada tiga bentuk body dalam Rigidbody 2D yaitu Dynamic, static, dan kinematic.  Dynamic: Untuk objek yang bisa bergerak dengan simulasi fisika.  Static: Untuk objek yang tetap (tidak bergerak)  Kinematic: Untuk objek yang bisa bergerak dengan fungsi khusus seperti Translate atau Rotate. \nBerikut adalah cara menambahkan rigidbody 2D pada sebuah game object. Dalam praktikum ini, kita akan menggunakan project Latihan3_2D, dimana kita sudah memiliki object “Player”. Untuk menambahkan rigidbody 2D pada Player pertama, klik Player pada Scene atau hierarchy window. Kemudian masuk ke inspector dan klik Add Component. Ketikkan “Rigidbody2D” lalu tekan ENTER.\n\n\n\ngambar\n\n\nUncheck simulated untuk melihat game objek yang tidak terpengaruh oleh gravitasi. Material physic merupakan masukan untuk membuat material fisika seperti memantul, solid, dan sebagainya. Namun demikian, material physic tidak akan dijelaskan lebih lanjut. Mass untuk mengatur massa jenis object dan Gravity Scale 0 sampai 1 atau uncheck atau check untuk menggunakan gravitasi.\n\n\nCollider 2D\nCollider 2D merupakan komponen unity yang bertugas untuk memberikan ruang batasan pada sebuah game object untuk dapat melakukan tumbukan fisik. Collider 2D dapat juga dibuat tidak terlihat namun tetap bisa berlaku tumbukan walaupun hanya dijadikan sebuah trigger penanda. Beberapa collider 2D yang sering digunakan adalah sebagai berikut:\nCircle collider 2D untuk game objek yang berbentuk lingkaran  Box collider 2D untuk game objek yang berbentuk kotak persegi atau persegi panjang  Polygon Collider 2D untuk game objek dengan sembarang bentuk  Capsule Collider 2D untuk game objek berbentuk kapsul\nCara untuk menambahkan komponen Collider2D mirip dengan RigidBody. Sebagai contoh, dengan game object “Player”, ketikkan “Polygon Collider 2D” pada saat Add Component, lalu ENTER.\n\n\n\ngambar\n\n\nPada scene view seharusnya ada suatu gambar bergaris bewarna hijau yang artinya game object tersebut sudah diberi collider 2D.\n\n\n\ngambar\n\n\nSyarat terjadinya tumbukan adalah adanya collider 2D di kedua objek yang akan bertumbukan. Disamping itu, salah satu dari game object tersebut harus memiliki Rigidbody 2D.\nPRAKTIKUM:\n\nTambahkan Rigidbody 2D dan Polygon Collider 2D pada object “Player”.\nTambahkan Polygon Collider 2D pada object “Enemy”.\nPada pertemuan sebelumnya sudah ada script bernama “ObjectMovement”. Tambahkan method baru OnCollisionEnter, OnCollisionStay, dan OnCollisionExit. Perhatikan bahwa method ini harus ditulis dengan benar karena termasuk dalam method yang sudah ditentukan unity (lihat modul pertemuan 3).\n\n    void OnCollisionEnter2D(Collision2D coll) {\n    \n    }\n\n    void OnCollisionStay2D(Collision2D coll) {\n\n    }\n\n    void OnCollisionExit2D(Collision2D coll) {\n\n    } \n\nBuat tag baru dengan nama “playerTag” dan “enemyTag” dengan cara klik sembarang game object. Masuk Inspector dan klik pada tombol untagged-&gt;Add tag, seperti gambar berikut:\n\n\n\n\ngambar\n\n\nKlik symbol + untuk menambah tag dan – untuk menghapus tag. Pastikan tag sudah ditambahkan dengan nama seperti berikut (case sensitive):\n\n\n\ngambar\n\n\n\nAtur tag playerTag didalam object Player dengan cara, klik untagged di Inspector dan pilih playerTag, seperti gambar berikut:\n\n\n\n\ngambar\n\n\n\nAtur tag enemyTag didalam object Enemy seperti cara langkah ke-5.\nLengkapi method OnCollisionEnter2D, OnCollisionStay2D,dan OnCollisionExit2D seperti kode berikut:\n\n   void OnCollisionEnter2D(Collision2D coll) {\n        if (coll.gameObject.tag == \"enemyTag\") {\n            Debug.Log (\"Mulai Nabrak\");\n        }\n    }\n\n    void OnCollisionStay2D(Collision2D coll) {\n        if (coll.gameObject.tag == \"enemyTag\") {\n            Debug.Log (\"Sedang Nabrak\");\n        }\n    }\n\n    void OnCollisionExit2D(Collision2D coll) {\n        if (coll.gameObject.tag == \"enemyTag\") {\n            Debug.Log (\"Sudah Nabrak\");\n        }\n    }\ncoll.gameObject.tag == “enemyTag” digunakan untuk mencari game object mana yang bertumbukan dengan game objek Player melalui nama tag.\n\nPastikan bahwa ObjectMovement script sudah ada didalam komponen Inspector dari object Player.\nJalankan unity dan lihat apa yang terjadi pada Console Output.\n\nKUMPULKAN:\n\nScreenshoot Console Output dan simpan dengan nama sc_03_03.jpg"
  },
  {
    "objectID": "game-prak-3.html#latihan",
    "href": "game-prak-3.html#latihan",
    "title": "3. Animation sprite 2D",
    "section": "Latihan",
    "text": "Latihan\n\nTambahkan variabel baru pada “ObjectMovement” dengan nama score dengan tipe data integer.\nBuat tag baru dengan nama “coinTag” dan atur pada game object prefab koin1 sampai koin7.\nEdit kode berikut:\n\nif (coll.gameObject.tag == \"enemyTag\") {\n            Debug.Log (\"Mulai Nabrak\");\n        }\nmenjadi\nif (coll.gameObject.tag == \"enemyTag\") {\n            Debug.Log (\"Game over\");\n            Time.timeScale = 0; \n\n        }\n\nTambahkan kode jika menabrak “coinTag” maka score akan selalu bertambah 1 dan Outputkan Score dengan Debug.Log.\nLengkapi kode program yang masih di-comment berikut: (praktikum ini berkaitan dengan praktikum sebelumnya)\n\n \n\nJalankan unity dan simulasikan gerak kekanan kekiri dan lain-lain dengan tombol keyboard yang sudah ditentukan.\n\nKUMPULKAN:\nScreenshoot game tab dan simpan dengan nama sc_03_04.jpg"
  },
  {
    "objectID": "game-prak-4.html#pendahuluan",
    "href": "game-prak-4.html#pendahuluan",
    "title": "4. Persiapan Asset Game",
    "section": "Pendahuluan",
    "text": "Pendahuluan\nPada praktikum ke-4 ini, kita akan mencoba membuat project flappy bird 2D. Sebagian besar praktikum ini diambil dari materi perkuliahan Bapak Zikky begitu juga dengan asset game yang digunakan. Buat project baru 2D dengan nama “flappycopter”, atur aspect ratio 16:9 pada game tab."
  },
  {
    "objectID": "game-prak-4.html#persiapan-asset-game",
    "href": "game-prak-4.html#persiapan-asset-game",
    "title": "4. Persiapan Asset Game",
    "section": "Persiapan Asset Game",
    "text": "Persiapan Asset Game\nTerdapat 4 file gambar yang dapat ditambahkan ke project view, yaitu: atas.png, bawah.png, background.png, dan player.png. Buat folder Images, Prefabs, dan Scripts pada project window. Masukkan ke-empat file gambar tersebut diatas pada folder Images."
  },
  {
    "objectID": "game-prak-4.html#game-background",
    "href": "game-prak-4.html#game-background",
    "title": "4. Persiapan Asset Game",
    "section": "Game Background",
    "text": "Game Background\nMasukkan gambar background.png pada scene view dan jadikan background game flappycopter ini. Letakkan game object background pada posisi dan rotasi pada titik (0,0,0). Rubah scale X dan Y pada Transform Inspector dari object background dengan nilai 2.3. Tampilan background akan seperti gambar berikut:\n\nPastikan pada property Inspector sprite renderer order in layer bernilai 0. Order in layer ini penting untuk meletakkan object pada lapisan scene background atau foreground. Semakin kecil order in layer, maka object akan dapat ditumpuk oleh objek dengan order in layer yang lebih tinggi. Jangan lupa untuk menyimpan scene dengan nama “Main”."
  },
  {
    "objectID": "game-prak-4.html#game-player",
    "href": "game-prak-4.html#game-player",
    "title": "4. Persiapan Asset Game",
    "section": "Game Player",
    "text": "Game Player\nMasukkan gambar player.png pada project windows kedalam scene view. Pada object player lakukan sesuatu berikut ini:\n\nRubah Inspector Transform posisi x dan y menjadi -7 dan 2, seperti pada gambar berikut: \nRubah property Inspector sprite renderer order in layer bernilai 1.\nTambahkan komponen Rigidbody2D pada Inspector object player.\nBuat script baru pada object Player dengan nama “PlayerControl”, dengan rincian kode sepeti berikut:  JumpForce: merupakan Vector2 yang digunakan sebagai nilai ambang batas fungsi AddForce.  AddForce: merupakan method yang hanya bisa diakses jika object memiliki komponen Rigidbody 2D didalamnya. Method ini memaksakan suatu pergerakan tiba-tiba yang diatur dengan nilai vector2. Dalam praktikum ini, karena efek gravitasi dari rigidbody, object akan selalu turun kebawah. Maka dari itu, kita akan memaksa player untuk seakan-akan melompat keatas saat spasi ditekan. Maka dari itu, yang diberi nilai hanya Vector 2 sumbu Y saja, yaitu dengan nilai 300. Velocity pada rigidbody 2D dibuat Vector2.Zero atau [0,0] untuk mengembalikan kecepatan objek menjadi 0.\nJalankan unity dan lihat apa yang terjadi jika keyboard spasi di tekan.\nTambahkan polygon collider 2D pada object player.\nRubah kode program PlayerControl menjadi seperti dibawah ini: Tambahkan header library Unity.SceneManagement: \n\nusing UnityEngine.SceneManagement; \ndigunakan untuk mengakses fungsi SceneManager.Load(), dimana fungsi tersebut berguna untuk mereset player jika player melebihi tinggi scene atau jatuh ketanah atau menabrak rintangan-rintangan (obstacles).  Didalam update setelah scope dari Input.GetType(..)… atau setelah kurung kurawal tutup dari scope Input.GetType(..)., tambahkan:\nVector2 screenPosition = \nCamera.main.WorldToScreenPoint (transform.position);\n Kode program diatas digunakan untuk mengambil posisi x dan y dari player yang relatif terhadap world scene.  Setelah itu, tambahkan kode untuk memberi batasan lebih tinggi dan terjatuh:\nif (screenPosition.y &gt; Screen.height || screenPosition.y &lt; 0)\n            Die (); \nkemudian, buat method Die() dibawah dari method Update():\nvoid Die()\n{\n     Debug.Log (\"game over\");\n     SceneManager.LoadScene (\"Main\");\n} \nTerakhir adalah tambahkan fungsi OnCollisionEnter2D, jika objek player nanti menabrak apapun rintangan atau obstacle akan mati.\n     void OnCollisionEnter2D(Collision2D coll)\n     {\n        Die ();\n     } \n\nJalankan unity dan lihat apa yang terjadi."
  },
  {
    "objectID": "game-prak-4.html#game-obstacles",
    "href": "game-prak-4.html#game-obstacles",
    "title": "4. Persiapan Asset Game",
    "section": "Game Obstacles",
    "text": "Game Obstacles\nSelanjutnya adalah membuat rintangan-rintangan atau obstacles dari game flappycopter ini. Berikut adalah tahapannya:\n\nMasukkan gambar atas dan bawah kedalam Scene view. Pastikan order in layer bernilai 1.\nSkala gambar atas dan bawah untuk x dan y bernilai 2.3.\nPosisikan gambar atas dan bawah secara berhadapan seperti gambar berikut: \nTambahkan polygon collider 2D pada object atas dan bawah.\nBuat game object kosong dengan cara klik GameObject-&gt;Create Empty di menu tab. Atau ctrl+shift+n.\nLihat hierarchy window dan rename “GameObject” menjadi “pasanganbatu”.\nTarik object “atas” dan “bawah” kedalam “pasanganbatu” pada hierarchy window, seperti gambar berikut: \nTambahkan Rigidbody 2D pada Inspector dari game object “pasanganbatu” Kemudian rubah body type menjadi “Kinematic” dan jangan centang (uncheck) simulated atau pada versi unity 5.6 kebawah centang “isKinematic”. Digunakan agar tidak terpengaruh oleh grafitasi dan pantulan yang diakibatkan benturan objek.\nBuat script “ObstacleInAct” pada Inspector “pasanganbatu”, seperti pada gambar berikut:  Kode tersebut berguna untuk menggerakan pasangan batu secara mundur dengan kecepatan -4, ketika game berjalan.\nJalankan unity dan lihat apa yang terjadi.\nTarik object pasanganbatu dari hierarchy window kedalam folder Prefabs untuk agar dapat menjadi object prefab.\nHapus game object pasanganbatu dari hierarchy window.\nBuat game objek kosong dan rename menjadi “ObstacleGenerator”.\nTambahkan script baru pada Inspector “ObstacleGenerator” dengan nama “GenerateObs”. Berikut adalah isi dari kode “GenerateObs”:  Method/fungsi InvokeRepeating digunakan untuk memanggil method CreateObstacle setiap 1.5 detik dengan lama eksekusi dari method tersebut terbatas hanya 1 detik.  Instantiate digunakan untuk instance object secara otomatis, disini akan dipanggi objek pasanganbatu.\nLihat pada Inspector dari ObstacleGenerator dan Tarik pasanganbatu dari folder Prefabs di Project Window kedalam variabel rock, seperti gambar dibawah ini: \nJalankan unity, dan lihat apa yang terjadi.\nAgar pemain tidak bosan karena lokasi dari obstacle statis. Jadi buat lokasi obstacle menjadi random dengan cara menambahkan kode berikut dibawah GetComponent ().velocity = veloc; pada script ObstacleInAct:\n\nfloat range = 2;\ntransform.position = new Vector3 (transform.position.x,\n            transform.position.y - range * Random.value, \n            transform.position.z); \n\nJalankan Unity dan lihat apa yang terjadi.\nJika terjadi bug, batu terlalu kebawah maka perkecil nilai range."
  },
  {
    "objectID": "game-prak-4.html#scoring-system",
    "href": "game-prak-4.html#scoring-system",
    "title": "4. Persiapan Asset Game",
    "section": "Scoring System",
    "text": "Scoring System\nScore akan menggunakan GUI Label pada Unity. Penjelasan GUI akan dijelaskan lebih lanjut pada pertemuan berikutnya. Namun demikian, kita akan mencoba membuat GUI Label untuk menampilkan score pada game flappycopter dengan dipanggil lewat kode. Berikut adalah tahapannya:\n\nMasuk pada script “GenerateObs”.\nBuat variabel bertipe int dengan nama score dengan di-assign nilai 0.\nTambahkan Method OnGUI untuk menambahkan GUI Label pada scene game:\n\n    void OnGUI()\n    {\n        GUI.color = Color.black;\n        GUILayout.Label (\"Score: \" + score.ToString());\n    }\n\nTambahkan kode: score++; setelah Instantiate pada method CreateObstacle.\nJalankan Unity dan Voila!! Flappycopter sudah jadi!"
  },
  {
    "objectID": "game-prak-4.html#latihan-optional",
    "href": "game-prak-4.html#latihan-optional",
    "title": "4. Persiapan Asset Game",
    "section": "Latihan (Optional)",
    "text": "Latihan (Optional)\nKembangkan game flappycopter dengan semua metode yang sudah diajarkan sebelumnya. Contohnya, kita dapat menambahkan koin atau life point. Gunakan kreatifitasmu!\nKUMPULKAN:\nScreenshoot game tab dan simpan dengan nama sc_04_01.jpg"
  },
  {
    "objectID": "game-prak-5.html",
    "href": "game-prak-5.html",
    "title": "Pertemuan 5",
    "section": "",
    "text": "Pendahuluan Pada praktikum ke-5 ini, kita akan mencoba melanjutkan project flappycopter. Kita juga akan membuat flappycopter agar bisa dimainkan didalam smartphone android. Disamping itu, kita juga akan membuat menu GUI game dan memberi background music untuk game flappycopter. Android Deployment Aplikasi yang dibuat dengan Unity memungkinkan untuk dapat di built ke banyak platform.\nPada saat deployment android ada beberapa hal penting yang perlu diperhatikan diawal ketika membuat project Unity. Beberapa persiapan yang harus sudah diatur adalah: PRAKTIKUM: 1. Buka project flappycopter. 2. Pada Game tab “Game” atur aspek ratio. Aspek ratio merupakan perbandingan antara panjang dan lebar layar game yang dibuat. Dalam kasus ini aspek ratio diatur 16:9 (jika belum ada bisa “Add new item”)\n\n(SKIP LANGKAH INI,TAPI PERHATIKAN BAIK-BAIK KETIKA SUDAH ADA GUI NANTINYA!)Ketika menggunakan GUI pada Unity. Pastikan “Canvas” harus cocok dengan aspek ratio yang sebelumnya telah diatur seperti gambar berikut (LANGKAH INI PENTING UNTUK DILAKUKAN SAAT APLIKASI GAME YANG DIBUAT MENGGUNAKAN GUI):\nPada saat akan membuat file “apk”, masuk pada File-&gt;Build Settings dan pastikan bahwa Android SDK dan scene unity yang ingin dibuild telah diatur dengan benar:\n\nNb. Jika belum muncul keterangan platform ketika memilih platform android, maka sebelumnya harus melakukan download dan install Android SDK (http://filehippo.com/download_android_sdk/ ). Buka Android SDK Manager dan install Android API yang diinginkan( dalam kasus ini Android 6.0). Jika belum terinstal maka di build setting akan nampak seperti gambar dibawah ini:\nKlik “Open Download Page” untuk mendownload UnitySetup-Android-Support-for-Editor-5.6.0f3.exe. Close aplikasi unity editor, Instal Android Support. Setelah itu akan muncul dialog box seperti pada gambar Build Setting yang pertama.\nKlik Build, kemudian akan ditanya tentang nama file .apk, isikan flappycopter.apk. Lakukan langkah 5 dan 6 terlebih dahulu! Tunggu beberapa saat dan kamu akan ditanya tentang Android SDK, masukkan folder Android SDK dan lanjutkan proses deployment dan tunggu beberapa saat sampai file apk jadi. 5. Klik “Switch Platform” pada “Build Settings” dan tunggu beberapa saat. 6. Klik “Player Settings” untuk mengatur manifestasi yang harus ada sebagai syarat untuk membuat apk pada Android.\nPada publishing setting, atur “certificate” sebelum aplikasi dibuild pada Android.\n\nSetelah semua persiapan selesai, selanjutnya adalah klik “Build” dan masukan nama file flappycopter.apk. GUI Main Menu GUI atau Graphical User Interface merupakan komponen penting yang harus ada dalam game. GUI dapat dimanfaatkan untuk membuat Main Menu, Menu Credits, Menu help, dan juga HUD (Head Up Display). GUI pada Unity diperlihatkan pada GameObject-&gt;UI. Berikut adalah penjelasan dari beberapa UI yang sering digunakan di Unity. Canvas : merupakan area tempat dimana semua elemen UI bisa masuk didalamnya. Area canvas dapat diatur dengan property Render Mode. Text: Merupakan elemen UI Unity untuk menambahkan UI text atau label. Button: Merupakan elemen UI Unity untuk menambahkan UI Button. Image: Merupakan elemen UI Unity untuk menambahkan UI Gambar. Input Field: Merupakan elemen UI Unity untuk menambahkan UI input text. PRAKTIKUM:\nBuat scene baru dengan cara File-&gt; New Scene atau CTRL+N. Simpan scene baru tersebut dengan nama Menu.\nTarik dan letakkan pada build setting di dengan urutan index scene ke 0. Hal ini penting karena ketika game pertama kali dibuka, scene yang akan tersebuka lebih dulu adalah scene Menu ini.\nMasuk pada pengaturan Game Tab, pastikan aspect rationya 16:9.\nPada Menu tab, GameObject-&gt;UI-&gt;Button. Maka pada Hierarchy window akan tampak seperti gambar berikut:\n\nJangan HAPUS EventSystem dan Canvas! 5. Klik object Canvas pada Hierarchy window dan lihat Inspector. 6. Pada Komponen Property “Canvas” -&gt; “Render Mode”, rubah nilainya menjadi “Screen Space-Camera” 7. Tarik Main Camera kedalam nilai dari Render Camera, agar terlihat seperti gambar di bawah ini:\n\nRubah Canvas Scaler seperti pada langkah ke-3 dari bab Android Development.\nKlik object Button pada hierarchy window dan lihat pada Inspector. Atur posisi dan skala dari button seperti gambar dibawah:\nUntuk memudahkan Rename Button pada Hierarchy window menjadi “ButtonPlay”.\nKlik Text dibawah child Button pada hierarchy window:\nLihat Inspector dari object Text. Isikan Font Size bernilai 36 dan rubah property Text dengan tulisan “PLAY”, seperti diperlihatkan pada gambar berikut:\nBuat Game object kosong dan rename dengan nama “codeGUI”.\nBuat script baru didalam code GUI dengan nama “GUIManager”, tambahkan library scene management: using UnityEngine.SceneManagement;\n\nBuat method baru dengan nama OnPlay() dengan akses modifier public: public void OnPlay() { SceneManager.LoadScene (“Main”); } 15. Klik ButtonPlay pada hierarchy window dan lihat pada Inspector. Scrol ke bawah sampai melihat property On Click() dengan nilai List is Empty. 16. Klik symbol “+” di property On Click(). 17. Tarik codeGUI dari hierarchy window ke dalam “Nobe (Object)” dibawah button Runtime Only. 18. Klik button “No Function” disebelahnya, pilih GUIManager-&gt;OnPlay. (Jika OnPlay tidak muncul, lihat sciprt GUIManager dan pastikan Akses modifier dari method OnPlay adalah Public)\n\nJalankan unity dan klik button play pada game tab.\nLihat apa yang terjadi. KUMPULKAN: Screenshoot Game tab saat di menu scene dan simpan dengan nama sc_056_01.jpg. Screenshoot Game tab saat di main scene dan simpan dengan nama sc_056_02.jpg. Fixing Bug Flappycopter Terdapat beberapa bug atau kesalahan fungsional program pada Flappycopter. Bug Kendali Terdapat bug kendali player pada saat game dimainkan di smartphone android. Bug tersebut disebabkan oleh penggunaan keyboard “spasi”. Rubah isi kode ObstacleInAct: if (Input.GetKeyDown (“space”)) menjadi float touchclicked = Input.GetAxis (“Fire1”); if (touchclicked == 1f)\n\nSekarang gunakan mouse click ketika game flappycopter dimainkan di computer. Jika dimainkan di Android gunakan touch. Bug Text HUD Score Jika dimainkan di android tulisan score pada saat game flappycopter dimainkan masih terlalu kecil. Maka dari itu ubah kode GenerateObs. 1. Tambahkan variabel baru dibawah int score = 0; GUIStyle guiStyle = new GUIStyle();\n\nGanti kode: GUILayout.Label (“Score:” + score.ToString());\n\nMenjadi: guiStyle.fontSize = 40; GUI.Label(new Rect(0, 0, 300, 50), “Score:” + score.ToString(), guiStyle); Bug Restart Jika kalah akan lebih baik jika kembali ke menu dari pada harus restart game. Maka dari itu rubah kode PlayerControl, pada method Die() dari: SceneManager.LoadScene (“Main”);\nMenjadi: SceneManager.LoadScene (“Menu”);\nSingleton Class Seringkali, sistem hanya perlu membuat satu instance dari kelas, dan instance yang akan diakses di seluruh program. Contohnya, objek yang dibutuhkan untuk logging, komunikasi, akses database, dll. Jadi, jika sistem hanya perlu satu instance dari kelas, dan instance yang perlu dapat diakses di banyak bagian yang berbeda dari sistem. Sebuah Singleton adalah kombinasi dari dua sifat penting:  Pastikan kelas hanya memiliki satu instance.  Memberikan titik global akses melalui instance tersebut. Ada banyak cara untuk membuat kelas singleton, tetapi berikut adalah contoh kelas singleton yang paling sederhana. Lakukan praktikum ini hanya untuk uji coba class singleton. PRAKTIKUM: 1. Buat Kelas baru dengan nama SingleTonSample pada scene Menu. Pastikan seluruh isi default seperti :MonoBehavior, Init(), Update() sudah dihapus atau kelas baru tersebut kosong kemudian definisikan konstruktor method secara private. private SingleTonSample() {}\n\nBuat variable private yang digunakan sebagai objek Instance kelas itu sendiri. private volatile static SingleTonSample singleTonObject;\nBuat fungsi/method statis yang berfungsi untuk men-instance suatu class itu sendiri dengan mengembalikan nilai instance itu sendiri.\n\npublic static SingleTonSample InstanceCreation() { private static object lockingObject = new object(); if(singleTonObject == null) { lock (lockingObject) { if(singleTonObject == null) { singleTonObject = new SingleTonSample(); } } } return singleTonObject; }\n\nBuat fungsi public untuk mencoba menampilkan tulisan “Kelas Singelton!” public void DisplayMessage() { Debug.Log(“Kelas Singelton!”); }\nBuat Kelas baru dengan nama TestSample dan Game object kosong, kemudian masukkan TestSample kedalam komponen dari Game object kosong yang dibuat tadi.\nPanggil SingleTonSample didalam fungsi Start() kelas TestSample. void Start() { SingleTonSample singleton = SingleTonSample.InstanceCreation(); singleton.DisplayMessage(); } Menambahkan Musik Penambahan music didalam game dengan unity cukuplah rumit. Pada dasarnya penambahan sound music dapat dilakukan di Main Camera dengan menambahkan komponen “Audio Source”. Kemudian menambahkan “AudioClip” didalam property komponen “Audio Source”. Tetapi, jika berpindah scene, maka suaranya akan hilang. Untuk itu digunakan singleton class. PRAKTIKUM:\nBuat folder Sounds pada project window dan masukkan music.mp3 didalam folder tersebut.\nPada scene Menu, buat game object kosong dan rename dengan nama codeMusic.\nLihat Inspector codeMusic dan tambahkan komponen Audio Source.\nTarik music dari project window kedalam Audio Clip dan centang Loop, seperti gambar berikut:\nBuat script baru pada codeMusic dengan nama MusicManager, dengan isi seperti berikut: (perhatikan bahwa MusicManager merupakan SingletonClass, dari pada menggunakan method konstruktor untuk instance object atau method Start(), digunakan method Awake() karena akan dipanggil lebih awal daripada method Start())\n\nDontDestroyOnLoad digunakan untuk mencegah object codeMusic menjadi hilang saat berpindah scene. 6. Jalankan unity dan lihat apa yang terjadi. 7. Build aplikasi di Android. Dan Akhirnya full Flappycopter game sudah jadi. Latihan (untuk pertemuan 6) PRAKTIKUM: 1. Tambahkan 2 button baru dengan nama ButtonCredits dan ButtonHelp di dalam scene menu. 2. Buat dua scene baru dengan nama credits dan help. 3. Scene credits berisi elemen UI Text siapa saja yang membuat game dan satu UI Button untuk kembali ke menu. 4. Scene help berisi elemen UI Text cara bermain game dan satu UI Button untuk kembali ke menu. 5. Dengan mekanisme yang sama dengan bab GUI main menu. Tambahkan method di GUIManager, OnCredits()  untuk membuka menu credits OnHelp() untuk membuka menu help OnBack()  untuk kembali ke main menu. 6. Jalankan Unity, kemudian build pada Android.\nKUMPULKAN: Screenshoot Game tab saat di menu scene dan simpan dengan nama sc_056_03.jpg. Screenshoot Game tab saat di credits scene dan simpan dengan nama sc_056_04.jpg. Screenshoot Game tab saat di help scene dan simpan dengan nama sc_056_05.jpg."
  },
  {
    "objectID": "game-prak-5.html#pendahuluan",
    "href": "game-prak-5.html#pendahuluan",
    "title": "5. Android Deployment",
    "section": "Pendahuluan",
    "text": "Pendahuluan\nPada praktikum ke-5 ini, kita akan mencoba melanjutkan project flappycopter. Kita juga akan membuat flappycopter agar bisa dimainkan didalam smartphone android. Disamping itu, kita juga akan membuat menu GUI game dan memberi background music untuk game flappycopter."
  },
  {
    "objectID": "game-prak-5.html#android-deployment",
    "href": "game-prak-5.html#android-deployment",
    "title": "5. Android Deployment",
    "section": "Android Deployment",
    "text": "Android Deployment\nAplikasi yang dibuat dengan Unity memungkinkan untuk dapat di built ke banyak platform.\n\nPada saat deployment android ada beberapa hal penting yang perlu diperhatikan diawal ketika membuat project Unity. Beberapa persiapan yang harus sudah diatur adalah: PRAKTIKUM:\n\nBuka project flappycopter.\nPada Game tab “Game” atur aspek ratio. Aspek ratio merupakan perbandingan antara panjang dan lebar layar game yang dibuat. Dalam kasus ini aspek ratio diatur 16:9 (jika belum ada bisa “Add new item”) \n(SKIP LANGKAH INI,TAPI PERHATIKAN BAIK-BAIK KETIKA SUDAH ADA GUI NANTINYA!)Ketika menggunakan GUI pada Unity. Pastikan “Canvas” harus cocok dengan aspek ratio yang sebelumnya telah diatur seperti gambar berikut (LANGKAH INI PENTING UNTUK DILAKUKAN SAAT APLIKASI GAME YANG DIBUAT MENGGUNAKAN GUI):  \nPada saat akan membuat file “apk”, masuk pada File-&gt;Build Settings dan pastikan bahwa Android SDK dan scene unity yang ingin dibuild telah diatur dengan benar:    Nb. Jika belum muncul keterangan platform ketika memilih platform android, maka sebelumnya harus melakukan download dan install Android SDK. Buka Android SDK Manager dan install Android API yang diinginkan( dalam kasus ini Android 6.0). Jika belum terinstal maka di build setting akan nampak seperti gambar dibawah ini:   Klik “Open Download Page” untuk mendownload UnitySetup-Android-Support-for-Editor-5.6.0f3.exe. Close aplikasi unity editor, Instal Android Support. Setelah itu akan muncul dialog box seperti pada gambar Build Setting yang pertama.   Klik Build, kemudian akan ditanya tentang nama file .apk, isikan flappycopter.apk. Lakukan langkah 5 dan 6 terlebih dahulu!  Tunggu beberapa saat dan kamu akan ditanya tentang Android SDK, masukkan folder Android SDK dan lanjutkan proses deployment dan tunggu beberapa saat sampai file apk jadi.\nKlik “Switch Platform” pada “Build Settings” dan tunggu beberapa saat.\nKlik “Player Settings” untuk mengatur manifestasi yang harus ada sebagai syarat untuk membuat apk pada Android.   Pada publishing setting, atur “certificate” sebelum aplikasi dibuild pada Android.  \nSetelah semua persiapan selesai, selanjutnya adalah klik “Build” dan masukan nama file flappycopter.apk."
  },
  {
    "objectID": "game-prak-5.html#gui-main-menu",
    "href": "game-prak-5.html#gui-main-menu",
    "title": "5. Android Deployment",
    "section": "GUI Main Menu",
    "text": "GUI Main Menu\nGUI atau Graphical User Interface merupakan komponen penting yang harus ada dalam game. GUI dapat dimanfaatkan untuk membuat Main Menu, Menu Credits, Menu help, dan juga HUD (Head Up Display). GUI pada Unity diperlihatkan pada GameObject-&gt;UI. Berikut adalah penjelasan dari beberapa UI yang sering digunakan di Unity.\n\nCanvas : merupakan area tempat dimana semua elemen UI bisa masuk didalamnya. Area canvas dapat diatur dengan property Render Mode.\nText: Merupakan elemen UI Unity untuk menambahkan UI text atau label.\nButton: Merupakan elemen UI Unity untuk menambahkan UI Button.\nImage: Merupakan elemen UI Unity untuk menambahkan UI Gambar.\nInput Field: Merupakan elemen UI Unity untuk menambahkan UI input text.\n\nPRAKTIKUM:\n\nBuat scene baru dengan cara File-&gt; New Scene atau CTRL+N. Simpan scene baru tersebut dengan nama Menu.\nTarik dan letakkan pada build setting di dengan urutan index scene ke 0. Hal ini penting karena ketika game pertama kali dibuka, scene yang akan tersebuka lebih dulu adalah scene Menu ini.  \nMasuk pada pengaturan Game Tab, pastikan aspect rationya 16:9.\nPada Menu tab, GameObject-&gt;UI-&gt;Button. Maka pada Hierarchy window akan tampak seperti gambar berikut:   Jangan HAPUS EventSystem dan Canvas!\nKlik object Canvas pada Hierarchy window dan lihat Inspector.\nPada Komponen Property “Canvas” -&gt; “Render Mode”, rubah nilainya menjadi “Screen Space-Camera”\nTarik Main Camera kedalam nilai dari Render Camera, agar terlihat seperti gambar di bawah ini:  \nRubah Canvas Scaler seperti pada langkah ke-3 dari bab Android Development.\nKlik object Button pada hierarchy window dan lihat pada Inspector. Atur posisi dan skala dari button seperti gambar dibawah:  \nUntuk memudahkan Rename Button pada Hierarchy window menjadi “ButtonPlay”.\nKlik Text dibawah child Button pada hierarchy window:  \nLihat Inspector dari object Text. Isikan Font Size bernilai 36 dan rubah property Text dengan tulisan “PLAY”, seperti diperlihatkan pada gambar berikut:  \nBuat Game object kosong dan rename dengan nama “codeGUI”.\nBuat script baru didalam code GUI dengan nama “GUIManager”, tambahkan library scene management:\n\nusing UnityEngine.SceneManagement; \n\nBuat method baru dengan nama OnPlay() dengan akses modifier public:\n      public void OnPlay()\n      {\n          SceneManager.LoadScene (\"Main\");\n      } \n\nKlik ButtonPlay pada hierarchy window dan lihat pada Inspector. Scrol ke bawah sampai melihat property On Click() dengan nilai List is Empty.\nKlik symbol “+” di property On Click().\nTarik codeGUI dari hierarchy window ke dalam “Nobe (Object)” dibawah button Runtime Only.\nKlik button “No Function” disebelahnya, pilih GUIManager-&gt;OnPlay. (Jika OnPlay tidak muncul, lihat sciprt GUIManager dan pastikan Akses modifier dari method OnPlay adalah Public)  \nJalankan unity dan klik button play pada game tab.\nLihat apa yang terjadi.\n\nKUMPULKAN:\nScreenshoot Game tab saat di menu scene dan simpan dengan nama sc_056_01.jpg.\nScreenshoot Game tab saat di main scene dan simpan dengan nama sc_056_02.jpg."
  },
  {
    "objectID": "game-prak-5.html#fixing-bug-flappycopter",
    "href": "game-prak-5.html#fixing-bug-flappycopter",
    "title": "5. Android Deployment",
    "section": "Fixing Bug Flappycopter",
    "text": "Fixing Bug Flappycopter\nTerdapat beberapa bug atau kesalahan fungsional program pada Flappycopter.\n\nBug Kendali\nTerdapat bug kendali player pada saat game dimainkan di smartphone android. Bug tersebut disebabkan oleh penggunaan keyboard “spasi”. Rubah isi kode ObstacleInAct:\nif (Input.GetKeyDown (\"space\")) \nmenjadi\nfloat touchclicked = Input.GetAxis (\"Fire1\");\nif (touchclicked == 1f) \nSekarang gunakan mouse click ketika game flappycopter dimainkan di computer. Jika dimainkan di Android gunakan touch.\n\n\nBug Text HUD Score\nJika dimainkan di android tulisan score pada saat game flappycopter dimainkan masih terlalu kecil. Maka dari itu ubah kode GenerateObs.\n\nTambahkan variabel baru dibawah int score = 0;\n\nGUIStyle guiStyle = new GUIStyle(); \n\nGanti kode:\n\nGUILayout.Label (\"Score: \" + score.ToString()); \nMenjadi:\nguiStyle.fontSize = 40;\nGUI.Label(new Rect(0, 0, 300, 50), \"Score: \" + \nscore.ToString(), guiStyle); \n\n\nBug Restart\nJika kalah akan lebih baik jika kembali ke menu dari pada harus restart game. Maka dari itu rubah kode PlayerControl, pada method Die() dari:\nSceneManager.LoadScene (\"Main\"); \nMenjadi:\nSceneManager.LoadScene (\"Menu\");"
  },
  {
    "objectID": "game-prak-5.html#singleton-class",
    "href": "game-prak-5.html#singleton-class",
    "title": "5. Android Deployment",
    "section": "Singleton Class",
    "text": "Singleton Class\nSeringkali, sistem hanya perlu membuat satu instance dari kelas, dan instance yang akan diakses di seluruh program. Contohnya, objek yang dibutuhkan untuk logging, komunikasi, akses database, dll. Jadi, jika sistem hanya perlu satu instance dari kelas, dan instance yang perlu dapat diakses di banyak bagian yang berbeda dari sistem.\nSebuah Singleton adalah kombinasi dari dua sifat penting:\n\nPastikan kelas hanya memiliki satu instance.\nMemberikan titik global akses melalui instance tersebut.\n\nAda banyak cara untuk membuat kelas singleton, tetapi berikut adalah contoh kelas singleton yang paling sederhana. Lakukan praktikum ini hanya untuk uji coba class singleton.\nPRAKTIKUM:\n\nBuat Kelas baru dengan nama SingleTonSample pada scene Menu. Pastikan seluruh isi default seperti :MonoBehavior, Init(), Update() sudah dihapus atau kelas baru tersebut kosong kemudian definisikan konstruktor method secara private.\n\nprivate SingleTonSample()\n{}\n\nBuat variable private yang digunakan sebagai objek Instance kelas itu sendiri.\n\nprivate volatile static SingleTonSample singleTonObject;\n\nBuat fungsi/method statis yang berfungsi untuk men-instance suatu class itu sendiri dengan mengembalikan nilai instance itu sendiri.\n\npublic static SingleTonSample InstanceCreation()\n{\n    private static object lockingObject = new object();\n    if(singleTonObject == null)\n    {\n         lock (lockingObject)\n         {\n              if(singleTonObject == null)\n              {\n                   singleTonObject = new SingleTonSample();\n              }\n         }\n    }\n    return singleTonObject;\n}\n\nBuat fungsi public untuk mencoba menampilkan tulisan “Kelas Singelton!”\n\npublic void DisplayMessage()\n{\n     Debug.Log(\"Kelas Singelton!\");\n}\n\nBuat Kelas baru dengan nama TestSample dan Game object kosong, kemudian masukkan TestSample kedalam komponen dari Game object kosong yang dibuat tadi.\nPanggil SingleTonSample didalam fungsi Start() kelas TestSample.\n\nvoid Start()\n{\n    SingleTonSample singleton = SingleTonSample.InstanceCreation();\n    singleton.DisplayMessage();\n}"
  },
  {
    "objectID": "game-prak-5.html#menambahkan-musik",
    "href": "game-prak-5.html#menambahkan-musik",
    "title": "5. Android Deployment",
    "section": "Menambahkan Musik",
    "text": "Menambahkan Musik\nPenambahan music didalam game dengan unity cukuplah rumit. Pada dasarnya penambahan sound music dapat dilakukan di Main Camera dengan menambahkan komponen “Audio Source”. Kemudian menambahkan “AudioClip” didalam property komponen “Audio Source”. Tetapi, jika berpindah scene, maka suaranya akan hilang. Untuk itu digunakan singleton class.\nPRAKTIKUM:\n\nBuat folder Sounds pada project window dan masukkan music.mp3 didalam folder tersebut.\nPada scene Menu, buat game object kosong dan rename dengan nama codeMusic.\nLihat Inspector codeMusic dan tambahkan komponen Audio Source.\nTarik music dari project window kedalam Audio Clip dan centang Loop, seperti gambar berikut: \nBuat script baru pada codeMusic dengan nama MusicManager, dengan isi seperti berikut: (perhatikan bahwa MusicManager merupakan SingletonClass, dari pada menggunakan method konstruktor untuk instance object atau method Start(), digunakan method Awake() karena akan dipanggil lebih awal daripada method Start())  DontDestroyOnLoad digunakan untuk mencegah object codeMusic menjadi hilang saat berpindah scene.\nJalankan unity dan lihat apa yang terjadi.\nBuild aplikasi di Android. Dan Akhirnya full Flappycopter game sudah jadi."
  },
  {
    "objectID": "game-prak-5.html#latihan-untuk-pertemuan-6",
    "href": "game-prak-5.html#latihan-untuk-pertemuan-6",
    "title": "5. Android Deployment",
    "section": "Latihan (untuk pertemuan 6)",
    "text": "Latihan (untuk pertemuan 6)\nPRAKTIKUM:\n\nTambahkan 2 button baru dengan nama ButtonCredits dan ButtonHelp di dalam scene menu.\nBuat dua scene baru dengan nama credits dan help.\nScene credits berisi elemen UI Text siapa saja yang membuat game dan satu UI Button untuk kembali ke menu.\nScene help berisi elemen UI Text cara bermain game dan satu UI Button untuk kembali ke menu.\nDengan mekanisme yang sama dengan bab GUI main menu. Tambahkan method di GUIManager, OnCredits() -&gt; untuk membuka menu credits OnHelp() -&gt; untuk membuka menu help OnBack() -&gt; untuk kembali ke main menu.\nJalankan Unity, kemudian build pada Android.\n\nKUMPULKAN:\nScreenshoot Game tab saat di menu scene dan simpan dengan nama sc_056_03.jpg.\nScreenshoot Game tab saat di credits scene dan simpan dengan nama sc_056_04.jpg.\nScreenshoot Game tab saat di help scene dan simpan dengan nama sc_056_05.jpg."
  },
  {
    "objectID": "game-prak-7.html#pendahuluan",
    "href": "game-prak-7.html#pendahuluan",
    "title": "6. Standard Asset 2D dan Instant Development",
    "section": "Pendahuluan",
    "text": "Pendahuluan\nPada praktikum ke-7 ini, kita akan mencoba membuat project baru dengan memanfaatkan fitur standard asset yang disedikan oleh unity. Unity menyediakan beberapa asset game yang sudah jadi. Hanya dengan mengambil dari prefab ke scene view maka semua fungsional dari game object tersebut sudah ada. Hal ini tentunya sangat menguntungkan bagi para developer yang memiliki sedikit pengetahuan pemrograman."
  },
  {
    "objectID": "game-prak-7.html#standard-asset-2d-dan-instant-development",
    "href": "game-prak-7.html#standard-asset-2d-dan-instant-development",
    "title": "6. Standard Asset 2D dan Instant Development",
    "section": "Standard Asset 2D dan Instant Development",
    "text": "Standard Asset 2D dan Instant Development\nUntuk membangun aplikasi Game, unity menyediakan asset standar yang dapat digunakan daripada harus membuat asset secara manual dari awal hingga akhir. Jika standar asset belum di install berikut adalah cara download dan instalasinya:\n\nDownload standard asset installer di: https://unity3d.com/get-unity/download/archive. Sesuaikan versi Unity yang terinstal dengan versi standard asset seperti gambar berikut: \nSetelah itu Download(Win) jika OS yang digunakan Windows atau Download(Mac) jika OS computer yang digunakan Mac.\nInstall file standar asset yang sudah didownload. (pastikan editor unity belum dibuka)\n\nPada praktikum ini, kita akan membuat project baru 2D dengan nama “SecondGame”. Tambahkan standard asset dengan cara masuk ke menu bar. Setelah itu, masuk ke Assets-&gt; Import Package -&gt; 2D kemudian akan muncul bar seperti berikut:\n\nKlik tombol “Import” dan tunggu beberapa saat. Simpan scene dengan nama “Main”. Pada project window, double klik folder “Standard Assets” dan masuk pada folder 2D-&gt;Prefabs. Disana terdapat beberapa game object prefab yang sudah jadi.\n\nTarik object Platform04x01 ke scene view. Atur scale x bernilai 100 dan jadikan object tersebut sebagai pijakan Player. Tarik object CharacterRobotBoy ke scene view dan letakkan diatas Platform04x01, sehingga akan tampak seperti gambar berikut:\n\nJalankan Unity dan lihat apa yang terjadi. Gerakkan karakter CharacterRobotBoy ke kanan dan kekiri dengan panah kanan atau kiri di keyboar. Gunakan spasi untuk lompat dan ctrl untuk merangkak."
  },
  {
    "objectID": "game-prak-7.html#finite-state-machine-untuk-game",
    "href": "game-prak-7.html#finite-state-machine-untuk-game",
    "title": "6. Standard Asset 2D dan Instant Development",
    "section": "Finite State Machine untuk Game",
    "text": "Finite State Machine untuk Game\nFinite State Machine atau disingkat FSM merupakan sebuah model yang merepresentasikan suatu alur kendali dari keadaan yang ada. Setiap keadaan state pada FSM bisa jadi merupakan sebuah tingkah laku. Beberapa manfaat FSM pada game yaitu: untuk memodelkan perilaku karakter game, memodelkan reward game, memodelkan alur menu game, dll.\nPertanyaannya adalah apa saja komponen dari FSM? Jawabannya adalah suatu state, transition, dan event. State merupakan suatu keadaan dan disimbolkan dengan lingkaran. Transisi merupakan perpindahan antar state satu dengan yang lain dan disimbolkan dengan panah. Event merupakan suatu syarat terjadinya perpindahan yang dilihat diatas garis transisi. Berikut adalah model FSM yang digunakan untuk memodelkan mental karakter player pada suatu game:\n\nKeterangan - States: Attack, Attack-P, Inspect, Patrol, Spawn\n- Events: * E: Saat player melihat musuh * S: Saat player mendengar suara * D: Saat player mati\nKita dapat melihat FSM dari karakter RobotBoy di Unity dengan cara:\nPRAKTIKUM:\n\nKlik pada object CharacterRobotBoy\nLihat menu bar dan akses Window-&gt;Animator, dan letakkan seperti ini:    Klik scroll pada mouse untuk navigasi didalam animator view.\nJalankan Unity,\nJika sudah dijalankan seharusnya layar animator akan berubah seperti ini (di state Idle menyala):  \nKlik di state “Idle” pada Animator view dan lihat pada Inspector.  \nDisana terdapat keterangan transisi dari “Idle” ke “Crounch” atau ke “Walk”\nJalankan player Robotboy atau lakukan merangkak pada karakter player tersebut.\nAmati setiap kejadian yang terjadi di Animator.\n\nKUMPULKAN:\nFile &lt;nim&gt;.txt dan Jawab pertanyaan berikut dengan bisa dan tidak.\n\nApakah bisa state karakter player dari Idle langsung ke Run?\nApakah bisa state karakter player dari Jump ke Crunch?\nApakah state Crounch dan CrouchchingWalk memiliki kesamaan transisi?\n\nContoh jawaban didalam .txt file:\nFile : A11200904997.txt\n\nTidak\nTidak\nTidak"
  },
  {
    "objectID": "game-prak-7.html#membuat-fsm-sendiri",
    "href": "game-prak-7.html#membuat-fsm-sendiri",
    "title": "6. Standard Asset 2D dan Instant Development",
    "section": "Membuat FSM Sendiri",
    "text": "Membuat FSM Sendiri\nKita akan membuat FSM sederhana untuk NPC (Non-Playable Character). Pembuatan FSM di Unity tidaklah sulit melainkan terdapat bantuan interface sehingga tidak perlu untuk membuat kode program FSM secara keseluruhan. Jika diketahui sebuah NPC dengan dua state yaitu dead dan idle. State akan dimulai dengan NPC dead. Terdapat satu event untuk mengaktifkan yaitu saat NPC didekati oleh player maka NPC akan berpindah state (transisi) dari dead ke idle. Begitu saat NPC dijauhi oleh player maka akan kembali ke state dead.\nPRAKTIKUM:\n\nBuat game object kosong, rename menjadi “NPC” dan letakan di posisi transformasi x=0,y=0, dan z=0.\nTambahkan komponen Animator pada Inspector “NPC”.\nKlik “NPC” pada hierarcy window, close Animator tab view jika sudah terbuka, kemudian ke menu tab, buka kembali animator view (Window-&gt;Animator)\nTarik asset game folder “female” yang berisi banyak gambar sprite NPC kedalam project window.\nMasuk pada folder female dan cari dead (1) sampai dead (12), lakukan shift click untuk memilih dead (1) sampai dead (12).  \nTarik langsung ke dalam hierarchy window pada object NPC.\nKetika ditanya untuk menyimpan animasi, simpan dengan nama “deadNPC.anim”.\nPada Inspector NPC, terdapat komponen Sprite Renderer, drag dead (1) pada project window kedalam property sprite di komponen Sprite Renderer. Jangan lupa merubah order in layer bernilai 1.\nJalankan Unity dan lihat pada Animator Window.  \nKlik pada object NPC, lihat menu tab dan masuk pada Window-&gt;Animation.  \nPada Animation Window, terdapat symbol segitiga disamping kiri tulisan “NPC:Sprite”, klik dan lihat pada frame disebelahnya.  \nTambahkan Animation baru dengan cara klik pada tulisan deadNPC pada Animation window dan pilih “create New Clip”  \nSimpan animasi dengan nama “WakeupIdleNPC.anim”\nKlik gambar Idle (1) sampai Idle (15) pada project window kedalam frame pada Animation Window.\nUbah nilai samples menjadi 12 agar animasi terlihat lebih lambat. Berikut adalah gambar Animation window pada animasi WakeupIdleNPC.  \nSekarang lihat pada Animator Window, maka state animasi akan bertambah satu.  \nSekarang kita akan membuat transisi state dari “deadNPC” ke “WakeupIdleNPC” dengan cara Klik pada state “deadNPC”, klik kanan-&gt; Make Transition.  \nHubungkan panah transisi pada state WakeupIdleNPC. (Jika Animation Window menggangu, close saja)\nBuat state transisi dari WakeupIdleNPC ke deadNPC dengan cara seperti langkah 17 dan 18. Berikut gambaran FSM sederhana dari NPC yang sudah jadi. (Abaikan state “Any state”)  \nUntuk membuat event, kita harus membuat parameter transisi dari deadNPC ke WakeupIdleNPC dan WakeupIdleNPC ke deadNPC.\nKlik parameter tab pada Animator Window. Buat parameter baru dengan men-klik symbol “+”. Pilih tipe parameter Bool.  \nBerikan nama parameter “IsDekat”.  \nKlik pada panah transisi deadNPC ke WakeupIdleNPC, dan lihat pada Inspector.\nUncheck atau jangan centang Has Exit Time karena nanti akan diatur dengan script.\nMasuk pada Condition, tambahkan “isDekat” dengan nilai true.  \nKlik pada panah transisi WakeupIdleNPC ke deadNPC, dan lihat pada Inpector.\nMasuk pada Condition, tambahkan “isDekat” dengan nilai true. (biarkan Has Exit Time tetap di centang)\nTambahkan script baru pada game object NPC dengan nama NPCState, dengan isi sebagai berikut:  \n\n\nGameObject.FindGameObjectWithTag (“Player”) -&gt; melakukan instance objek secara langsung dengan menggunakan tag. (pada robotboy secara default sudah memiliki tag dengan nama Player)\nanim = GetComponent() -&gt; mengambil referensi animator pada inspector object yang berhubungan dengan script ini.\nVector3.Distance(obj1,obj2) -&gt; menghitung jarak antara objek 1 dengan object 2. Disini objek 1 merupakan game object yang berhubungan dengan script ini, dan objek 2 adalah game object player.\nanim.SetBool(“isDekat”, true) -&gt; men-assign nilai yang didefinisikan di parameter tab pada Animator window.\n\n\nJalankan Unity, kendalikan player supaya mendekati NPC dan lihat apa yang terjadi pada NPC.\n\nKUMPULKAN:\nScreenshoot game tab dan dekatkan player dengan NPC. Simpan dengan nama sc_07_01.jpg"
  },
  {
    "objectID": "game-prak-7.html#camera-follow-2d",
    "href": "game-prak-7.html#camera-follow-2d",
    "title": "6. Standard Asset 2D dan Instant Development",
    "section": "Camera Follow 2D",
    "text": "Camera Follow 2D\nPada saat game Robotboy dimainkan, objek Robotboy terkadang menghilang pada scene game. Hal itu disebabkan oleh tidak adanya camera yang mengikuti objek robotboy itu. Maka dari itu, terdapat praktikum tambahan untuk membuat camera atau Main Camera selalu mengikuti obje player atau Robotboy.\nPRAKTIKUM:\n\nBuat scipt baru pada objek Main Camera dengan nama CameraFollowPlayer.   \n\n\noffsetXDist -&gt; merupakan variabel jarak offs et player x terhadap camera.\nOffset -&gt; merupakan variabel jarak offset untuk menghitung selisih x,y,z dari came ra dan player.\nLateUpdate -&gt; merupakan fungsi built-in pada Unity, daripada menggunakan Update akan lebih baik jika menggunakan LateUpdate karena memperbaharui posisi dilakukan setelah setiap frame diperbaharui waktunya.\n\n\nKlik CharacterRobotBoy pada hierarchy window dan seret pada property Player di Inspector Camera Follow Script objek Main Camera.  \nJalankan Unity dan lihat game tab.\n\nKUMPULKAN:\nScreenshoot game tab. Simpan dengan nama sc_07_02.jpg Latihan (Opsional) Jika sudah selesai praktikum, silahkan kembangkan game yang ada pada praktikum kali ini dengan pengetahuan yang sebelumnya sudah dipelajari dan kreativitas kamu."
  },
  {
    "objectID": "game-prak-9.html#pendahuluan",
    "href": "game-prak-9.html#pendahuluan",
    "title": "7. Save & Load dengan Playerpref",
    "section": "Pendahuluan",
    "text": "Pendahuluan\nSaat ini, kita sudah sampai pada akhir penghujung pembuatan Game 2D. Tidak aka nada lagi project 2D baru melainkan menambah fitur project game 2D yang sudah kita buat sebelumnya. Fitur yang belum ada itu adalah tentang mekanisme menyimpan dan membuka data yang ada pada game. Data tersebut dapat berupa score atau level game yang belum terbuka atau koleksi item."
  },
  {
    "objectID": "game-prak-9.html#save-load-dengan-playerpref",
    "href": "game-prak-9.html#save-load-dengan-playerpref",
    "title": "7. Save & Load dengan Playerpref",
    "section": "Save & Load dengan Playerpref",
    "text": "Save & Load dengan Playerpref\nPenyimpanan data merupakah salah satu hal yang penting didalam pengembangan Game. Data yang disimpan dapat sangat berdampak terhadap permainan secara langsung. Fitur ini memungkinkan player untuk dapat melanjutkan permainan tanpa harus bermain dari awal lagi. Sehingga diperlukan mekanisme yang aman dan nyaman untuk player dapat menyimpan datanya. Metode konvensional untuk penyimpanan data biasanya menggunakan data serial yang di enkripsi (merubah dari data mentah menjadi data yang tidak bisa dibaca) dan disimpan ditempat yang tidak mudah dijangkau oleh player. Hal ini diperlukan karena bisa jadi player akan bertindak curang dengan merubah data sesuai yang dikehendaki.\nSayangnya mekanisme penyimpanan data secara serial tidaklah mudah. Selain itu mekanisme enkripsi dan deskripsi juga membutuhkan penanganan yang tepat serta rumit implementasinya. Unity sudah menyediakan mekanisme menyimpan data dan juga sudah di enkripsi secara otomatis dengan menggunakan Playerpref. Cara penggunaan Playerpref juga dibilang sangat mudah sekali, yaitu hanya dengan satu atau dua baris kode saja. Intinya adalah kita mengerti dahulu bagaimana cara menyimpan dan membuka data dengan mekanisme playerpref ini. Terlepas dari aman atau tidaknya playerpref jika dibandingkan dengan mekanisme enkripsi-deskripsi yang lain.\nMekanisme playerpref diawali dengan memanggil Class PlayerPrefs. Terdapat 3 jenis static method yang dapat digunakan untuk menyimpan data yaitu SetInt,SetFloat, dan SetString. Ketiga method tersebut memiliki dua parameter. Parameter pertama digunakan untuk memanggil nama kunci yang didefinisikan sendiri oleh programmer. Parameter kedua merupakan nilai yang berkaitan dengan tipe data integer, float, atau string tergantung dari pemanggilan jenis methodnya.\nPlayerPrefs.SetInt(“&lt;kunci&gt;”, nilai integer);\n\nPlayerPrefs.SetFloat(“&lt;kunci&gt;”, nilai float);\n\nPlayerPrefs.SetString(“&lt;kunci&gt;”, nilai string);\nDi Windows, PlayerPrefs akan menyimpan kunci beserta nilainya di HKCU[company name][product name], dimana company name dan product name sudah diatur didalam project setting unity.\nDi Windows Store, PlayerPrefs akan menyimpan kunci beserta nilainya di %userprofile%[ProductPackageId]&gt;.dat.\nDi windows phone, PlayerPrefs akan menyimpan kunci beserta nilainya di application’s local folder.\nDi Android, PlayerPrefs akan menyimpan kunci beserta nilainya di SharedPreferance. SharedPreferance secara fisik dapat dilihat di direktori /data/data/pkg-name/shared_prefs/pkg-name.xml.\nDi MacOS, PlayerPrefs akan menyimpan kunci beserta nilainya di /Library/Preferences folder, didalam file dengan nama, [company name].[product name].plist.\nUntuk mengakses kunci atau membuka kunci atau load data, dapat dilakukan dengan memanggil tiga method berikut:\nint x = PlayerPrefs.GetInt(“&lt;kunci&gt;”);\n\nfloat x = PlayerPrefs.GetFloat(“&lt;kunci&gt;”);\n\nstring x = PlayerPrefs.GetString(“&lt;kunci&gt;”);"
  },
  {
    "objectID": "game-prak-9.html#highscore",
    "href": "game-prak-9.html#highscore",
    "title": "7. Save & Load dengan Playerpref",
    "section": "Highscore",
    "text": "Highscore\nPlayerPrefs dapat dimanfaatkan untuk menyimpan score dari sebuah game. Dengan mekanisme menyimpan score pada suatu kunci di permainan pertama. Kemudian kunci tersebut dipanggil pada permainan kedua dan disana nilai kunci tersebut akan diperbaharui dengan syarat jika nilai kunci sebelumnya lebih rendah disbanding nilai score sekarang. Sehingga kita akan mendapatkan nilai score tertinggi pada semua permainan yang telah dilakukan.\nPRAKTIKUM:\n\nBuka project “Flappycopter” yang pernah dibuat sebelumnya dan buka scene menu.\nTambahkan UI text, rename dengan nama “TextHighscore”.\nLetakkan pada posisi x = 0 dan y = 200 sehingga berada pada tengah bagian bawah.\nLihat Inspector TextHighscore, pada property Text isikan seperti gambar berikut:  \nBuat game object kosong dan rename menjadi “codeHighscore”.\nTambahkan kode program “SaveLoadHighscore”:    Terdapat 2 method static yaitu LoadHighScore() dan SaveHighScore, perhatikan bahwa method static disimpan pada memory common yang tidak membutuhkan instance dahulu ketika pemanggilan method tersebut.  PlayerPrefs.HasKey digunakan untuk mengecek apakah kunci tersebut sudah ada di local direktori atau belum.\nIsikan TextHighScore pada Inspector codeHighscore seperti gambar berikut:  \nBuka kode GenerateObs, tambahkan kode berikut didalam method CreateObstacle setelah score++;\n\nSaveLoadHighscore.SaveHighScore (score); \n\nJalankan dan mainkan game.\nLihat pada main menu setelah permainan ke-2.\n\nKUMPULKAN:\nScreenshoot game tab pada scene menu. Simpan dengan nama sc_08_01.jpg"
  },
  {
    "objectID": "game-prak-9.html#multi-level-game",
    "href": "game-prak-9.html#multi-level-game",
    "title": "7. Save & Load dengan Playerpref",
    "section": "Multi Level Game",
    "text": "Multi Level Game\nSalah satu fitur yang dapat membuat player merasa tertantang saat memainkan game adalah level dari game tersebut. Level game biasanya dirancang dari tingkat yang termudah sampai tersulit. Perubahan setiap level game bermacam-macam, tergantung dari bagaimana developer merancang game mekanik yang ada. Beberapa perubahan yang diakibatkan oleh meningkatnya level diantaranya adalah:\n\nmembuat musuh lebih agresif ketika tingkat level bertambah,\nmembuat kontrol player menjadi terbatas,\nmerubah lingkungan/environment game,\nmerubah game play\n\nNamun demikian, kita tidak akan berfokus pada perubahan yang diakibatkan dari meningkatkan level. Kita akan berfokus pada bagaimana level baru yang tingkatannya lebih tinggi akan terbuka. Game developer biasanya menggunakan syarat supaya player dapat membuka level yang lebih tinggi. Syarat yang paling sederhana adalah dengan menyelesaikan level sebelumnya terlebih dahulu. Sebagai contoh, terdapat tiga level game yaitu easy, medium, hard. Untuk player yang bermain game pertama kalinya, diharuskan untuk menyelesaikan level easy terlebih dahulu. Player tidak dapat secara langsung membuka level medium atau hard. Pada praktikum ini, kita akan mencoba mengimplementasikan hal tersebut dengan memanfaatkan PlayerPrefs.\nPRAKTIKUM:\n\nBuka project “Flappycopter” yang pernah dibuat sebelumnya dan buat scene baru dengan nama “multilevel”.\nTambahkan 3 UI button dengan nama “Easy”, “Medium”, dan “Hard” (pastikan canvas diatur dengan benar!).  \nBuka scene “menu”, copy object “codeGUI”, buka scene “multilevel”, paste object “codeGUI” pada hierarchy window.\nBuka script GUIManager.\nTambahkan variabel bEasy,bMed,bHard bertipe Button. Pastikan sudah menambahkan using UnityEngine.UI dan using System.\nTambahkan method static LoadLevel dan saveLevel:\n\n    public static int LoadLevel()\n    {\n        int hg=0;\n        if (!PlayerPrefs.HasKey (\"level\"))\n            PlayerPrefs.SetInt (\"level\", 0);\n        else\n            hg = PlayerPrefs.GetInt (\"level\");\n        return hg;\n    }\n\n    public static void saveLevel(int lvl)\n    {\n        if (!PlayerPrefs.HasKey (\"level\"))\n            PlayerPrefs.SetInt (\"level\", 0);\n        else\n            PlayerPrefs.SetInt (\"level\", lvl);\n    } \n\nTambahkan method LoadButtonLevel untuk instance button dan mencari objek butto melalui nama objeknya(GameObject.Find).\n\nvoid LoadButtonLevel()\n{\n    bEasy = GameObject.Find (\"Easy\").GetComponent&lt;Button&gt;();\n    bMed = GameObject.Find (\"Medium\").GetComponent&lt;Button&gt;();\n    bHard = GameObject.Find (\"Hard\").GetComponent&lt;Button&gt;         bEasy.interactable = bMed.interactable = \n    bHard.interactable = false;\n} \n\nRubah method Start() seperti berikut: (gunakan try catch untuk menghindari error null: https://docs.unity3d.com/Manual/NullReferenceException.html )  \nEdit method OnPlay yang menuju ke scene “multilevel” dan tambahkan method baru untuk runtime aksi dari setiap button ketika nanti button di klik. Sementara apapun button level yang di klik tetap akan ke scene Main.  \nIsikan pada On Click Runtime Inspector Easy, Medium, dan Hard dengan GUIManager-&gt;OnLevel1(),GUIManager-&gt;OnLevel2(),dan GUIManager-&gt;OnLevel3().\nBuka script PlayerControl dan edit method Die() dengan navigasi memanggil scene Menu, bukan memanggil scene Main. Diperlukan ketika player mati maka akan kembali ke menu game.\nBuka script GenerateObs dan masuk pada method CreateObstacle. Buat aturan sederhana, jika obstacle terlihat atau score lebih dari sama dengan 2, maka level 2 terbuka, jika lebih dari sama dengan 4 maka level 3 terbuka.\n\n    void CreateObstacle()\n    {\n        Instantiate (rocks);\n        score++;\n        SaveLoadHighscore.SaveHighScore (score);\n        if (score &gt;= 2)\n            GUIManager.saveLevel (1);\n        if(score &gt;= 4)\n            GUIManager.saveLevel (2);\n    } \n\nBuka scene menu, jalankan unity, mainkan game, dan amati apa yang terjadi.\n\nKUMPULKAN:\nScreenshoot game tab pada scene multilevel saat pertama kali bermain. Simpan dengan nama sc_08_02.jpg\nScreenshoot game tab pada scene multilevel setelah score sama dengan atau lebih dari 2. Simpan dengan nama sc_08_03.jpg\nScreenshoot game tab pada scene multilevel setelah score sama dengan atau lebih dari 4. Simpan dengan nama sc_08_04.jpg"
  },
  {
    "objectID": "game-prak-9.html#latihan-opsional",
    "href": "game-prak-9.html#latihan-opsional",
    "title": "7. Save & Load dengan Playerpref",
    "section": "Latihan (Opsional)",
    "text": "Latihan (Opsional)\nJika sudah selesai praktikum, silahkan kembangkan game yang ada pada praktikum kali ini dengan pengetahuan yang sebelumnya sudah dipelajari dan kreativitas kamu. Coba buat collect item dengan memanfaatkan playerprefs."
  },
  {
    "objectID": "game-prak-10.html#pendahuluan",
    "href": "game-prak-10.html#pendahuluan",
    "title": "8. Koordinat 2D vs 3D dan sistem arah tangan",
    "section": "Pendahuluan",
    "text": "Pendahuluan\nSelamat kamu sudah bisa menyelesaikan game 2D. Sekarang kita akan mulai belajar bagaimana membuat Game 3D. Pada praktikum kali ini, kita tidak lagi membuat project 2D, melaikan 3D. Mari kita mulai dengan membuat project baru 3D dengan nama “Coba3D”."
  },
  {
    "objectID": "game-prak-10.html#koordinat-2d-vs-3d-dan-sistem-arah-tangan",
    "href": "game-prak-10.html#koordinat-2d-vs-3d-dan-sistem-arah-tangan",
    "title": "8. Koordinat 2D vs 3D dan sistem arah tangan",
    "section": "Koordinat 2D vs 3D dan sistem arah tangan",
    "text": "Koordinat 2D vs 3D dan sistem arah tangan\nSistem koordinat sebetulnya sudah disinggung sejak pertemuan ke-3 yaitu tentang transasi dan rotasi. Namun demikian, kita akan coba membahas dari sesuatu yang dasar mengenai koordinat 2D dan 3D. Pada koordinat kartesian 2D, letak suatu titik biasanya didefinisikan dengan posisi sepanjang sumbu x dan sumbu y. Berikut adalah gambar yang menjelaskan posisi suatu titik pada x=6 dan y =5.\n\nBerbeda dengan sumbu pada koordinat kartesian 3D. Terdapat satu garis lurus yang dapat dibayangkan seperti masuk dan keluar diantara sumbu x dan y. Gambar berikut mendefinisikan suatu posisi titik di ruang 3D.\n\nTitik tersebut berada ada posisi x=6, y=7, dan z = 5. Semua objek yang berada pada bidang 3D pasti memiliki transformasi posisi sumbu xyz. Selain pemahaman bidang 2D dan 3D, kita juga harus mengetahui tentang arah vektor yang berkaitan dengan sumbu 3D yang digunakan. Arah ini ditentukan oleh sistem kaidah tangan kanan dan kaidah tangan kiri. Dengan sistem tersebut kita dapat memahami arah positif atau negative masing-masing sumbu. Berikut adalah gambaran arah dengan sistem kaidah tangan kanan dan kiri.\n\nUnity menggunakan sistem kaidah tangan kiri. Beberapa game engine yang lain menggunakan kaidah tangan kanan, sebagai contoh OpenGL. Dengan demikian sekarang kita tahu bahwa arah positif dan negatif dari sumbu x,y, dan z Unity mengikuti arah dari ibu jari, telunjuk, dan jari tengah dengan sistem kaidah tangan kiri.\nSebagai tambahan, pada Unity terdapat dua jenis koordinat system yaitu koordinat yang relatif terhadap ruang dunia (world space) dan koordinat yang relative terhadap ruang objek (object space). Jenis koordinat itu dikenal dengan istilah koordinat lokal dan koordinaat global atau digambarkan dengan gambar berikut:"
  },
  {
    "objectID": "game-prak-10.html#camera",
    "href": "game-prak-10.html#camera",
    "title": "8. Koordinat 2D vs 3D dan sistem arah tangan",
    "section": "Camera",
    "text": "Camera\nScene game pada unity akan bergantung dari mana suatu objek Camera ditempatkan. Seperti yang telah disinggung di pertemuan sebelumnya, pada dasarnya bentuk 2D pada Unity merupakan bentuk “flat” dari ruang 3D. Berikut adalah gambaran dua jenis proyeksi Camera pada unity yaitu ortografis dan perspektif yang mirip. (kiri prespektif, kanan ortografis)\n\nLalu apa bedanya? Mata manusia di dunia nyata dapat melihat beberapa objek yang nampak besar atau kecil tergantung dari sudut pandang penempatan objek tersebut, apakah didepan atau belakang. Hal ini dikenal sebagai efek perspektif. Sama halnya pada Computer Graphics atau pada unity, Scene pada game 3D membutuhkan suatu sudut pandang yang realistic seperti bagaimana mata manusia berfungsi untuk melihat suatu objek.\nNamun demikian, terkadang mata manusia juga dapat melihat beberapa objek sama rata dan tidak memperhitungkan jarak antar objek. Ortografis didapatkan dengan syarat arah penglihatan orang yang melihat suatu objek dianggap tegak lurus terhadap bidang objek yang dilihatnya. Hal ini memungkinkan pengembang game di Unity untuk dapat membuat game 2D yaitu dengan proyeksi kamera ortografis.\nPada Camera unity, terdapat fitur bernama Occlusion Culling. Occlusion Culling memungkinkan untuk menonaktifkan objek-objek yang tidak dapat dilihat oleh Camera karena terlalu jauh atau terhambat pandangannya oleh objek lain. Berikut adalah scene yang tidak menerapkan occlusion culling:\n\nBerikut adalah scene yang menerapkan occlusion culling:\n\nUntuk dapat menerapkan Occlusion Culling dapat dipelajari di: https://docs.unity3d.com/Manual/OcclusionCulling.html . Pada praktikum kali ini tidak akan dijelaskan secara mendetail tentang penggunaan occlusion culling ini."
  },
  {
    "objectID": "game-prak-10.html#lighting",
    "href": "game-prak-10.html#lighting",
    "title": "8. Koordinat 2D vs 3D dan sistem arah tangan",
    "section": "Lighting",
    "text": "Lighting\nUntuk membuat efek bayangan pada objek-objek 3D, diperlukan suatu cahaya yang memiliki intensitas, arah, dan warna. Unity mendukung efek cahaya yaitu dengan komponen Light. Ada beberapa tipe dari cahaya yang ada pada Unity yaitu: point. Spot, directional, area,emissive, dan ambient.\nPoint light memungkinkan untuk membuat cahaya dari titik pusat (lingkaran) sampai cahaya itu melingkupi keseluruhan lingkaran tadi. Spot hanya memberikan cahaya pada bagian tertentu saja seperti saat menggunakan senter atau lampu kendaraan bermotor. Directional light seperti pada cahaya matahari. Area light seperti penerangan yang hanya menerangi dengan lingkup persegi. Emisive seperti membuat efek cahaya yang menyala dalam gelap. Ambient light untuk memperlihatkan gambaran suhu dari suatu objek atau untuk membuat efek kartun. Berikut gambaran suatu objek dengan komponen light menerangi objek berbentuk bola:"
  },
  {
    "objectID": "game-prak-10.html#bermain-dengan-objek-primitif",
    "href": "game-prak-10.html#bermain-dengan-objek-primitif",
    "title": "8. Koordinat 2D vs 3D dan sistem arah tangan",
    "section": "Bermain dengan Objek Primitif",
    "text": "Bermain dengan Objek Primitif\nKetika membuat project untuk pertama kalinya, secara default terdapat dua game object yaitu Main Camera dan Directional Light. Lihat pada Inspector Main Camera, pastikan bahwa Projection yang digunakan adalah perspective. Kemudian di Inspector Directional Light, pastikan bahwa type adalah Directional. Unity menyediakan objek 3D primitif yang dapat secara langsung dibuat seperti gambar berikut:\n\nKlik kanan pada hierarchy window-&gt;3D Object-&gt; Maka akan ada banyak pilihan objek 3D primitive yang disediakan unity. Pilih salah satu objek primitive tersebut, maka objek akan secara otomatis tertambah di scene.\nPRAKTIKUM:\n\nPastikan sudah membuat project “Coba3D” dan Simpan scene dengan nama “Main”.\nBuat beberapa game objek dari game objek primitive seperti cube, sphere, Capsule, Quad, dan Plane .\nSusun semua kelima objek tersebut didalam scene.\nGunakan transform tool untuk memposisikan objek sesuai keinginan.\nGunakan gizmos (klik pada salah satu warna) untuk memudahkan melihat objek yang ada pada scene.  \nKlik kanan dan tahan, kemudian geser kekanan kekiri pada scene untuk mengganti sudut pandang.\nKlik tengah pada mouse scroll, kemudian geser kekanan dan kekiri pada scene untuk menyesuaikan posisi objek terhadap scene.\nKlik kiri dan tahan, kemudian geser kekanan kekiri pada scene untuk menseleksi beberapa objek secara langsung.\nBiasakan menggunakan kendali pada langkah 6, 7, dan 8 pada scene untuk memudahkan dalam pengembangan game 3D dengan unity.\nJalankan unity dan amati yang terjadi.\n\nKUMPULKAN:\nScreenshoot game tab. Simpan dengan nama sc_910_01.jpg File &lt;NIM&gt;.txt dengan rincian isi: - &lt;NIM&gt; - &lt;JAWABAN&gt;\nPertanyaan: Komponen apa saja yang ada pada setiap objek primitive 3D.  Contoh jawaban:  A11200904997.txt  A11200904997  Cube -&gt; Component = Transform, bla, bla  Sphere -&gt; Component = Transform, bla, bla"
  },
  {
    "objectID": "game-prak-10.html#pengenalan-material-shader-texture",
    "href": "game-prak-10.html#pengenalan-material-shader-texture",
    "title": "8. Koordinat 2D vs 3D dan sistem arah tangan",
    "section": "Pengenalan Material, Shader, & Texture",
    "text": "Pengenalan Material, Shader, & Texture\nPada objek 3D, material, shader, dan texture sangat berhubungan erat satu sama lain. Material adalah bagaimana permukaan suatu objek diperlakukan, disini termasuk tekstur yang akan digunakan, pembatasan objek, dan lain-lain. Pemilihan konfigurasi material tersebut diatur pada shader yang diterapkan. Shader merupkan kode kecil yang berisikan suatu algoritma dan perhitungan matematis untuk menghitung warna,efek, dan konfigurasi material yang terkait.\nTekstur merupakan gambar bitmap yang dapat dijadikan sebagai masukan shader dimana material nanti akan ditempatkan pada permukaan objek 3D. Sebagai contoh terdapat objek bola, dengan menambahkan material dengan shader standard dan texture gambar permukaan bumi maka objek bola tadi dapat menjadi objek bumi secara utuh.\nPRAKTIKUM:\n\nPada project “Coba3D”, scene Main, hapus semua objek kecuali Main Camera dan Directional Light.\nBuat objek Cube dan rename dengan nama “Kotak”.\nBuat folder Materials pada Project Window.\nPada folder Materials tambahkan material dengan cara, klik kanan-&gt;Create-&gt;Material, ubah namanya menjadi matKotak.  \nKlik matKotak pada project window dan lihat pada Inspector.\nPerhatikan bahwa Shader yang digunakan adalah Standard Shader, Rendering Mode adalah Opaque dan warna dasar (Albedo) adalah putih.  \nDisini kita tidak akan merubah kode shader yang ada, tetapi hanya menggunaka saja.\nKlik pada gambar kotak putih disebelah Albedo. Dan rubah warnanya menjadi merah. Rubah material supaya lebih mengkilat dengan memberikan nilai 0.5 pada Metalic.  \nTarik material matKotak dari Project Window kedalam objek Kotak pada Hierarchy window atau scene view.\nJalankan Unity dan lihat di game tab! (perhatikan jika Kotak tidak terlihat letakkan pada posisi x,y,z = 0)\nBuat objek sphere dan rename dengan nama “Bumi”. Posisikan pada x = -1.44, y dan z = 0.\nMasukkan gambar earthtex.jpg kedalam folder Materials pada project window.\nBuat material baru dengan nama matBumi.\nTarik earthtex kedalam kotak disebelah kiri Albedo dari Inspector matBumi.  \nTarik material matBumi dari Project Window kedalam objek Bumi pada Hierarchy window atau scene view.\nJalankan Unity dan lihat di game tab!\n\nKUMPULKAN:\nScreenshoot game tab. Simpan dengan nama sc_910_02.jpg"
  },
  {
    "objectID": "game-prak-10.html#skybox",
    "href": "game-prak-10.html#skybox",
    "title": "8. Koordinat 2D vs 3D dan sistem arah tangan",
    "section": "Skybox",
    "text": "Skybox\nSkybox merupakan batasan lingkungan world scene pada game. Pada dasarnya merupakan kubus persegi dimana nanti beberapa game objek akan berada didalamnya. Namun demikian bentuk dari kubusnya tidak akan terlihat seperti kubus melainkan suatu landscape lingkungan yang luas (dengan langit). Pada praktikum ini, akan dicoba untuk membuat skybox dengan 6 sisi kubus atau 6-sided cube atau cubemaping dimana setiap sisi merupakan gambar tekstur yang saling berkesinambungan secara geometri.\nPRAKTIKUM:\n\nBuat scene baru dengan nama World.\nPastikan sudah memiliki gambar texture 6 sisi kubus. Gambar skybox dapat di unduh di https://93i.de/downloads/skybox/skyboxset1.zip. Paste folder skybox ke project window.\nBuat material baru dengan nama “matSkybox”.\nPada Inspector matSkybox cari shader Skybox/6 Sided.\nIsikan gambar “back”,”from”,”left”,”right”,”up”, dan “down” (yang ada didalam folder skybox di project window) pada Inspector matSkybox. (Kunci/lock Inspector matSkybox supaya tidak berpindah-pindah)  \nMasukkan atau Tarik matSkybox dari project window ke scene view. Atau buka window-&gt;lighthing-&gt;Settings, pada tab Scene, isikan Skybox Material dengan matSkybox.  \nJalankan unity dan lihat apa yang terjadi.\n\nKUMPULKAN:\nScreenshoot game tab. Simpan dengan nama sc_910_04.jpg"
  },
  {
    "objectID": "game-prak-10.html#terrain",
    "href": "game-prak-10.html#terrain",
    "title": "8. Koordinat 2D vs 3D dan sistem arah tangan",
    "section": "Terrain",
    "text": "Terrain\nPada game 3D, baik itu first person camera ataupun third person camera terkadang memiliki lingkungan world yang berisi berbagai macam objek. Objek-objek tersebut seperti: gunung, pepohonan, sungai, dan lain-lain. Jika terdapat berbagai macam object pada scene game 3D, hal itu mengakibatkan turunnya performa game. Penurunan performa itu ditandai dengan turunya FPS game atau game terasa lambat ketika dimainkan (lag). Disamping itu, banyaknya objek memungkinkan banyaknya vertek objek yang di render ketika game berlangsung. Sehingga memory yang dibutuhkan juga sangat besar. Meskipun demikian, kita dapat menggunakan Occlusion Culling untuk menangani masalah optimalisasi terrain ini. Sekarang kita akan mencoba membuat terrain dengan unity.\nPRAKTIKUM:\n\nTetap pada scene “World”.\nTambahkan terrain dengan cara GameObject-&gt;3D Object-&gt;Terrain.\nDouble klik pada objek Terrain di hierarchy window.  \nPerhatikan bahwa di Inspector Terrain terdapat 3 komponen yaitu Transform untuk transformasi, Terrain untuk mengembangkan lingkungan pada terrain yang berisi tools, dan Terrain Collider untuk collider terrain.\nPerhatikan pada komponen Terrain dimana memuat 7 alat/tools untuk mengembangkan lingkungan terrain seperti yang diinginkan.    Berikut adalah nama-nama dari tools tersebut (kanan ke kiri): Terrain Settings, Paint Details, Place Trees, Paint Texture, Smooth Height, Paint Height, Raise/Lower Terrain.\nPilih dan klik Terrain Settings, scroll ke bawah dan cari di Label Resolution. Isikan Terrain Width dan Height = 100.\nAtur height=75. Height terdiri dari ujung titik terendah dari terrain (seperti dibawah sungai) sampai ujung tertitinggi (puncak gunung). Sebagai contoh, kamu ingin membuat gunung di dalam terrain dengan tinggi 150 meter. Kemudian kamu juga menambahkan sungai dengan kedalaman 50 meter. Jadi ukuran height dari terrain yang kamu miliki adalah 150+50 meter yaitu 200 meter. (Sementara jangan rubah bagian dibawah Resolution, karena dapat berimbas langsung seperti hilangnya beberapa objek di terrain yang sudah dibuat)\nPilih dan klik Paint Height, terdapat detail kalimat cara penggunaan Paint Height.\nRubah Height = 20 dan klik tombol “Flatten”. Dengan demikian terrain akan mengangkat sebanyak sampai dengan 20 unit objek pada viewport, tetapi posisi Y tidak akan terpengaruh.  \nDiatas scene view terdapat symbol light, matikan lighting tersebut.  \nPilih dan klik Raise/Lower Terrain Tool.\nPutar scene sampai Terrain terlihat seperti kotak putih pada scene.\nGambar Terrain dengan Brushes. Atur Brush Size untuk ukuran perbukitan yang lebih lebar. Atur ketingian perbukitan atau gunung dengan Opacity. Berikut adalah Terrain yang sudah di gambar:  \nKita akan dapat melihat LOD (Level Of Detail) dari terrain yang kita buat.\nUntuk melihat berapa banyak mesh yang kita buat, Dibawah Tulisan Scene di Scene tab, terdapat mode scene dengan tulisan Shaded. Kemudian klik pada Shaded dan pilih Wireframe. Kemudian lihat Terrain dengan lebih detail dengan cara Zoom In pada salah satu sisi terrain menggunakan scroll mouse.  \nPilih dan Klik Terrain Setting, Pada Base Terrain, rubah Pixel Error dengan nilai 10.  \nKembalikan mode scene menjadi Shaded.\nPilih dan Klik Paint Height Tool, gunakan property Height untuk mengatur ketinggian Gunung atau bukit. Coba gunakan lagi brush untuk menggambar.\nJika gambar terrain dirasa sudah cukup, tambahkan standard asset “Environment”.\nKlik All kemudian klik import.\nMasuk pada Project Window -&gt; Assets-&gt;Standard Assets-&gt; Environment-&gt;TerrainAssets. Masuk pada folder SurfaceTextures.  \nPerhatikan pada nama-nama texture, hal ini berkaitan dengan “Albedo”,”Specular”, dan “Normal”.\nPilih dan Klik Paint Texture Tool pada Inspector Terrain, dibawah area texture preview, pilih Edit Textures-&gt;Add Texture.  \nKetika Add Terain Texture box muncul, isikan Albedo (RGB) Smoothness (A) dengan gambar tekture GrassHillAlbedo. Karena tidak ada gambar Normal untuk GrassHill maka biarkan tetap kosong.kemudian klik tombol Add.  \nTambahkan texture kedua, Pilih dan Klik Paint Texture Tool pada Inspector Terrain, dibawah area texture preview, pilih Edit Textures-&gt;Add Texture.\nIsikan Albedo (RGB) Smoothness (A) dengan gambar tekture GrassRockyAlbedo, gunakan Brush dan gambar diatas pegunungan atau bukit-bukit yang tinggi.\nTambahkan texture ketiga, Pilih dan Klik Paint Texture Tool pada Inspector Terrain, dibawah area texture preview, pilih Edit Textures-&gt;Add Texture.\nIsikan Albedo (RGB) Smoothness (A) dengan gambar tekture MudRockyAlbedoSpecular dan Normal dengan gambar texture MudRockyNormal, gunakan Brush dan gambar dibagian bawah gundukan rumput.\nBerikut adalah ketiga texture yang terdaftar.  \nSekarang tambahkan pepohononan, gunakan standard asset, Masuk pada Project Window -&gt; Assets-&gt;Standard Assets-&gt; Environment-&gt;SpeedTree-&gt; Broadleaf folder.\nPilih objek prefab Broadleaf_Desktop dan masukkan pada scene view. Kecilkan scale x,y,z jika pohon terlalu besar dengan nilai 0.2.  \nMatikan Animate Cross-fading (jangan di centang)  \nBuat folder Prefabs dibawah Assets pada Project Window.\nTarik dari Broadleaf_Desktop dari hierarchy window kedalam folder Prefabs.\nRename Broadleaf_Desktop di folder prefabs dengan nama “Pohon”.\nHapus objek Broadleaf_Desktop dari scene view atau hierarchy window.\nSangat tidak efisien jika kita menambahkan pohon satu persatu pada scene view, maka dari itu kita gunakan Place Trees Tool pada Inspector Terrain.\nPilih dan Klik Place trees Tool pada Inspector Terrain, dibawah area texture preview, pilih tombol Edit Trees.. -&gt; Add Tree.\nMasukan Tree Prefab dengan prefab Pohon.  \nKemudian Klik tombol Add.\nAkan muncul tombol “Mass Place Trees” pada Inspector Terrain. Klik pada tombol tersebut.\nSaatnya membuat sesuatu yang “menyenangkan”, Isikan Number Of Tree sesuka hati (sebagai contoh: 1000 pohon). Kemudian klik tombol Place.  \nRubah posisi terrain dengan position x,y, dan z = -10 (bisa jadi tampak jelek, sesuaikan sesuai selera).\nJalankan Unity dan lihat apa yang terjadi pada game tab.\n\nKUMPULKAN:\nScreenshoot game tab. Simpan dengan nama sc_910_05.jpg"
  },
  {
    "objectID": "game-prak-10.html#latihan-opsional",
    "href": "game-prak-10.html#latihan-opsional",
    "title": "8. Koordinat 2D vs 3D dan sistem arah tangan",
    "section": "Latihan (Opsional)",
    "text": "Latihan (Opsional)\nJika sudah selesai praktikum, silahkan kembangkan game yang ada pada praktikum kali ini dengan pengetahuan yang sebelumnya sudah dipelajari dan kreativitas kamu. Coba tambahkan character ethan didalam terrain dan juga tambahkan kolam air atau sungai didalam terrain. Cari tutorial di Internet mengenai penambahan air.\nKUMPULKAN:\nScreenshoot game tab. Simpan dengan nama sc_910_06.jpg"
  },
  {
    "objectID": "game-prak-10.html#standard-asset-untuk-objek-3d",
    "href": "game-prak-10.html#standard-asset-untuk-objek-3d",
    "title": "8. Koordinat 2D vs 3D dan sistem arah tangan",
    "section": "Standard Asset untuk Objek 3D",
    "text": "Standard Asset untuk Objek 3D\nSama halnya dengan Standard Asset 2D, dengan mekanisme yang sama kita dapat menambahkan standard asset 3D. Standard asset 3D adalah standard asset selain “2D” yaitu “Cameras”, “Characters”, “Effect”,”Environtment”, dll.\nPRAKTIKUM:\n\nImport standard asset “Characters” project Coba3D.\nPastikan select All dan Import.\nBuat scene baru dengan nama “EthanInAct”.\nTambahkan object Quad , rename dengan nama “Pijakan” dan letakkan dengan posisi seperti berikut:  \nMasuk pada Project Window, Assets-&gt;Standard Asset-&gt;Characters-&gt;ThirdPersonCharacter-&gt;Prefabs\nTarik objek prefabs ThirdPersonController kedalam objek Pijakan PADA Hierarchy window!  \nPerhatikan bahwa pada Inspector ThirdPersonController posisi dan rotasi x,y,z = 0. Hal ini disebabkan oleh koordinat acuan saat menambahkan objek ThirdPersonController yang digunakan adalah koordinat local dari objek Pijakan. Teknik ini seringkali disebut dengan parenting object.\nKeluarkan objek ThirdPersonController dari Pijakan dengan cara Tarik objek keluar dari Pijakan di Hierarchy window.  \nSekarang lihat pada Inspector ThirdPersonController, posisi dan rotasi akan berubah meyesuaikan koordinat global. Jangan ganti posisi x,y,z, ganti rotasi x dari bernilai 90 menjadi 0. Kemudian rubah scale x,y,z dari 1 menjadi 0.2.\nJalankan Unity dan lihat game tab. Jalankan objek ThirdPersonController dengan menekan W,A,S,D dan Spasi pada Keyboard.\n\nKUMPULKAN:\nScreenshoot game tab. Simpan dengan nama sc_910_03.jpg"
  },
  {
    "objectID": "game-prak-11.html#pendahuluan",
    "href": "game-prak-11.html#pendahuluan",
    "title": "9. Translasi Objek 3D",
    "section": "Pendahuluan",
    "text": "Pendahuluan\nSaat ini, kita sudah di penghujung pembuatan game 3D. Meskipun tidak banyak yang dipelajari dari pembuatan game 3D, kamu masih dapat belajar sendiri lebih lanjut. Pada pertemuan ini, kita akan kembali membuat beberapa program yang terkait tengan interaksi objek 3D. Pada unity transformasi yang ada pada objek game 2D atau 3D tidak jauh berbeda karena pada dasarnya unity dirancang untuk game 3D. Mari kita mulai dengan melanjutkan project “Coba3D”."
  },
  {
    "objectID": "game-prak-11.html#translasi-objek-3d",
    "href": "game-prak-11.html#translasi-objek-3d",
    "title": "9. Translasi Objek 3D",
    "section": "Translasi Objek 3D",
    "text": "Translasi Objek 3D\nMasih ingatkah kamu pada pertemuan ke-3 dan 4 tentang transformasi dan kendali (control)? Jika masih coba buka kode program “ObjectMovement.cs”. Disana kita mendefinisikan sendiri beberapa trigger vektor seperti vektor kekanan, kekiri, keatas, kebawah, maju, dan mundur. Disana terlihat hanya ada satu vektor posisi yang hanya memiliki nilai 1 atau -1. Jika menggunakan sistem kaidah tangan kiri posisi y = 1 digunakan untuk triger nilai positif yang disimbolkan oleh arah jari telunjuk yang menunjuk ke atas. Untuk nilai x positif mengikuti arah ibu jari yang menunjuk ke kanan. Terakhir, nilai z positif mengikuti arah jari tengah yang menunjuk kearah depan.\nPRAKTIKUM:\n\nCopy dan paste file ObjectMovement.cs pada project “Latihan3_2D” kedalam project “Coba3D”.\nBuat scene baru dengan nama Transformasi.\nBuat objek Cube dan rename dengan nama “Kotak” dengan posisi x,y,z = 0.\nMasukkan kode ObjectMovement kedalam objek Kotak.\nDahulu didalam method Update() kita sudah membuat kode program untuk translasi kekanan, kekiri, keatas, dan kebawah yang masing-masing memiliki kendali keyboard panah kanan, kiri, atas, dan bawah. Sekarang kita akan tambahkan kendali keyboard “W” untuk maju dan “S” untuk mundur. Tambahkan kode berikut didalam method Update():\n\nif (Input.GetKey(KeyCode.W)) {\n     transform.position = transform.position + (maju * speed * Time.deltaTime);\n}\nif (Input.GetKey(KeyCode.S)) {\n   transform.position = transform.position + (mundur * speed * Time.deltaTime);\n} \n pastikan bahwa Vector 3 maju sudah didefinisikan terlebih dahulu.\n\nJalankan unity dan coba untuk menekan W dan S pada keyboard.\n\nKUMPULKAN:\nScreenshoot game tab coba tekan salah satu W atau S. Simpan dengan nama sc_11_01.jpg"
  },
  {
    "objectID": "game-prak-11.html#rotasi-objek-3d",
    "href": "game-prak-11.html#rotasi-objek-3d",
    "title": "9. Translasi Objek 3D",
    "section": "Rotasi Objek 3D",
    "text": "Rotasi Objek 3D\nRotasi objek 3D sebetulnya sama dengan rotasi 2D yang pernah kita lakukan. Pada rotasi 2D yang kita lakukan adalah memutar kekanan dan kekiri. Sebetulnya memutar kekanan dan kekiri pada rotasi 2D yang pernah kita lakukan berbeda makna dengan rotasi 3D. Pada rotasi 3D hal itu disebut dengan roll (Lihat modul praktikum ke-3. Hal tersebut dikarenakan pada game 2D tidak pernah ada rotasi yaw atau pitch. Berikut adalah kode program untuk pitch,yaw,dan roll (tidak menggunakan method Rotate melainkan toQuartenion yang pernah kita buat sendiri di praktikum ke-3).\nRotasi Pitch :\ntransform.rotation = transform.rotation * toQuaternion (kekanan *    speedRotasi * Time.deltaTime); //pitch keatas\natau\ntransform.rotation = transform.rotation * toQuaternion (kekiri *    speedRotasi * Time.deltaTime); //pitch kebawah\nRotasi yaw :\ntransform.rotation = transform.rotation * toQuaternion (kebawah *   speedRotasi * Time.deltaTime);  //yaw kekanan\natau\ntransform.rotation = transform.rotation * toQuaternion (keatas *    speedRotasi * Time.deltaTime);  //yaw kekiri\nRotasi roll :\ntransform.rotation = transform.rotation * toQuaternion (maju *   speedRotasi * Time.deltaTime);  //roll kekiri\natau\ntransform.rotation = transform.rotation * toQuaternion (mundur *    speedRotasi * Time.deltaTime);  //roll kekanan\nPRAKTIKUM:\n\nTetap pada script ObjectMovement.\nPada bagian Update(), dahulu kita membuat rotasi dengan tombol D dan A untuk rotasi 2D (roll).\nSekarang, ganti kode rotasi didalam Update dengan seluruh jenis rotasi pitch,yaw, dan roll:\n\nif (Input.GetMouseButton (0)) {\n            if (Input.GetKey (KeyCode.J))\n                //buat kode roll kekanan\n            if (Input.GetKey (KeyCode.G))\n                //buat kode roll kekiri\n            if (Input.GetKey (KeyCode.Y))\n                //buat kode pitch keatas\n            if (Input.GetKey (KeyCode.H))\n                //buat kode pitch kebawah\n            if (Input.GetKey (KeyCode.T))\n                //buat kode yaw kekiri\n            if (Input.GetKey (KeyCode.U))\n                //buat kode yaw kekanan\n        }\n        else\n        {\n            //biarkan kosong\n        } \n\nIsikan kode program yang di komentari dengan benar! (boleh menggunakan Quartenion.Euler atau method toQuartenion atau Vector3.Rotate, pilih salah satu)\nMasukan script ObjectMovement kedalam komponen dari objek Kotak.\nJalankan unity, dan coba gerakkan rotasi objek dengan cara klik dan tahan mouse dan tekan G atau J atau yang lain sesuai aturan rotasi diatas.\n\nKUMPULKAN:\nScreenshoot game tab. Simpan dengan nama sc_11_02.jpg"
  },
  {
    "objectID": "game-prak-11.html#physic-engine-objek-3d",
    "href": "game-prak-11.html#physic-engine-objek-3d",
    "title": "9. Translasi Objek 3D",
    "section": "Physic Engine Objek 3D",
    "text": "Physic Engine Objek 3D\nPhysic Engine untuk objek 3D menggunakan Rigidbody dan Collider. Namun demikian, mulai unity 5 keatas terdapat tambahan physic engine yaitu physic material. Physic material atau Physic material 2D (untuk objek 2D) untuk membuat efek permukaan objek misalnya ketika ingin membuat objek tersebut memantul. Physic material tidak akan diterangkan lebih lanjut, tetapi dapat dipelajari di https://docs.unity3d.com/Manual/class-PhysicMaterial.html .\nUntuk objek 3D, collider dan rigid body tidak menggunakan kata “2D” pada penamaan komponen tersebut. Terdapat 7 collider non legacy yang dapat diterapkan pada objek 3D, yaitu: box collider, capsule collider, mesh collider, spatial mapping collider, sphere collider, terrain collider, dan wheel collider. Dari nama-nama collider tersebut sudah terbayangkan bentuk objek yang akan dilingkupi oleh collider itu, misalnya box collider untuk objek yang berbentuk kubus. Pada objek-objek primitive, saat kita menambahkannya pada scene, secara default biasanya sudah memiliki collider. Tetapi belum miliki rigidbody.\nPRAKTIKUM:\n\nKlik objek Kotak pada project Coba3D.\nTambahkan component Rigidbody .\nPastikan Use gravity tercentang atau gravity scale = 1 (pada unity versi 5.5 kebawah).\nJalankan unity dan lihat apakah objek kotak sudah terjatuh atau belum.\nJika sudah terjatuh. Hentikan unity.\nTambahkan game objek penompang berbentuk Quad dan rename dengan nama Pijakan.\nPosisikan Pijakan pada x=0,y=-2,z=0 dan rotasi x=90,y dan z=0.\nScale Pijakan dengan nilai x,y,z = 10.\nBuat material baru dengan standard shader dengan nama “matPijakan”, beri warna hitam.\nMasukkan material matPijakan kedalam komponen objek Pijakan. Seperti gambar dibawah ini.  \nTambahkan object ThirdPersonController ke scene (Masuk pada Project Window, Assets-&gt;Standard Asset-&gt;Characters-&gt;ThirdPersonCharacter-&gt;Prefabs)\nPastikan object ThirdPersonController memiliki transformasi seperti gambar berikut:  \nKlik objek Kotak pada hierarchy window dan lihat pada Inspector. Hilangkan komponen script ObjectMovement dari objek kotak tersebut.  \nJalankan unity dan kendalikan objek ThirdPersonController untuk menabrak objek kotak.\n\nKUMPULKAN:\nScreenshoot game tab saat ThirdPersonController menabrak objek kotak. Simpan dengan nama sc_11_03.jpg"
  },
  {
    "objectID": "game-prak-11.html#deteksi-tumbukan-objek-3d",
    "href": "game-prak-11.html#deteksi-tumbukan-objek-3d",
    "title": "9. Translasi Objek 3D",
    "section": "Deteksi Tumbukan Objek 3D",
    "text": "Deteksi Tumbukan Objek 3D\nSyarat deteksi tumbukan adalah terdapat komponen rigidbody dan collider pada kedua objek yang akan bertumbukan. Setelah kedua komponen itu ada, selanjutnya kita dapat menambahkan kode program dengan method OnCollisionEnter(), OnCollisionStay(), OnCollisionExit() atau OnTriggerEnter(), OnTriggerStay(), OnTriggerExit().\nPRAKTIKUM:\n\nKlik objek Kotak pada project Coba3D.\nBuat tag baru dengan nama “enemy” dan atur pada objek Kotak.\nBuat UI text dan rename dengan nama “TextScore”. Biarkan Canvas apa adanya.\nIsikan pada Inspector Textscorem, width = 500, height = 250, Text = “Score = 0”.\nTambahkan script baru pada objek ThirdPersonController dengan nama CollisionPlayerObjek.\nTambahkan variabel teksScore pada script CollisionPlayerObjek dengan tipe Text (pastikan sudah menggunakan using UnityEngine.Text.\n\npublic Text teksScore; \n\nTambahkan variabel score pada script CollisionPlayerObjek dengan tipe int.\n\nint score = 0; \n\nTambahkan method OnCollisionEnter pada script CollisionPlayerObjek.\n\n    void OnCollisionEnter(Collision coll)\n    {\n        if (coll.collider.tag == \"Enemy\") {\n            score++;\n            teksScore.text = \"Score = \"+score.ToString ();\n            Destroy (coll.gameObject);\n        }\n    }\n\nMasukkan objek teksScore kedalam variabel teksScore pada inspector ThirdPersonController.  \nJalankan unity dan coba tumbukkan ThirdPersonController dengan Kotak.\n\nKUMPULKAN:\nScreenshoot game tab setelah ThirdPersonController menumbuk objek kotak. Simpan dengan nama sc_11_04.jpg"
  },
  {
    "objectID": "game-prak-11.html#orbit-camera-pada-karakter-player-opsional",
    "href": "game-prak-11.html#orbit-camera-pada-karakter-player-opsional",
    "title": "9. Translasi Objek 3D",
    "section": "Orbit Camera pada karakter Player (Opsional)",
    "text": "Orbit Camera pada karakter Player (Opsional)\nPernahkan bermain game God Of War? Jika pernah, terdapat scene dimana player sedang berjalan pada kayu kecil dan dibawahnya adalah jurang api. Sekarang kita akan mencoba untuk membuat hal itu dengan kendali orang-ketiga dan arah dari mouse.\nPRAKTIKUM:\n\nKlik objek Kotak pada project Coba3D. Posisikan seperti gambar berikut:  \nKlik objek ThirdPersonController dan posisikan seperti gambar berikut:  \nKlik objek Main Camera dan posisikan seperti gambar berikut:  \nTambahkan script baru dengan nama “OrbitCamera” pada objek Main Camera.  \nJalankan Unity dan analisa apa yang terjadi.\n\nKUMPULKAN:\nScreenshoot game tab setelah ThirdPersonController menumbuk objek kotak. Simpan dengan nama sc_11_05.jpg"
  },
  {
    "objectID": "game-prak-11.html#latihan",
    "href": "game-prak-11.html#latihan",
    "title": "9. Translasi Objek 3D",
    "section": "Latihan",
    "text": "Latihan\nJika sudah selesai praktikum, silahkan kembangkan game yang ada pada praktikum kali ini dengan pengetahuan yang sebelumnya sudah dipelajari dan kreativitas kamu. Buat game third-person control dengan berbagai macam interaksi.\nKUMPULKAN:\nScreenshoot game tab dimana game yang dibuat sudah merupakan modifikasi dari praktikum kali ini. Simpan dengan nama sc_11_06.jpg."
  },
  {
    "objectID": "game-prak-12.html#pendahuluan",
    "href": "game-prak-12.html#pendahuluan",
    "title": "Game AI",
    "section": "Pendahuluan",
    "text": "Pendahuluan\nKecerdasan Buatan atau Artificial Intelligence merupakan bidang ilmu yang sangat populer baru-baru ini. Menurut teori kecerdasan buatan modern, kecerdasan buatan memiliki empat definisi yaitu:\n\nsistem/mesin yang dapat berpikir seperti manusia,\nsistem/mesin yang dapat berpikir secara rasional,\nsistem/mesin yang dapat bertingkah laku seperti manusia,\nsistem/mesin yang dapat bertingkah laku secara rasional.\n\nKecerdasan buatan dapat diterapkan pada suatu game atau disebut dengan Game AI. Pac-Man (1979) merupakan game pertama yang menggunakan AI sederhana (state machine). Kecerdasan buatan dalam Game dapat dibagi dalam tiga bagian, yaitu: pergerakan (movement), pengambil keputusan (decission making), dan strategi (strategy). Dasar Game AI utama ada di pergerakan dan pengambil keputusan, sedangkan strategi dapat berupa gabungan antar keduanya. Gambar berikut merupakan model Game AI.\n\nTidak semua game menggunakan model diatas, sebagai contoh game catur yang hanya menggunakan komponen AI strategi saja. Dalam tutorial kali ini akan mencoba untuk membuat game AI pada komponen pergerakan. Pergerakan disini merujuk pada suatu algoritma untuk membuat beberapa keputusan menjadi suatu bentuk gerakan. Salah satu game yang memanfaatkan komponen AI pergerakan adalah Super Mario. Ketika karakter super mario mendekati musuh, musuh tersebut kemudian akan mengejar karakter super mario yang mendekat tadi. Musuh yang dapat bergerak mengejar secara otomatis (autonomus) dapat disebut sebagai suatu agen cerdas. Dalam hal ini, agen cerdas merupakan model AI berbasis agen yang memproduksi karakter otonom yang mengambil infomasi dari game data, kemudian memperkirakan apa aksi selanjutnya berdasarkan informasi yang didapat sebelumnya dan kemudia melakukan aksi tersebut.\nSalah satu teknik movement AI yang terkenal adalah “Steering Behaviour” oleh Craig Reynolds. Steering Behaviour merupakan algoritma pergerakan yang pergerakan tersebut bukan berupa kinematik tetapi lebih kepada dinamis. Algoritma dinamis biasanya memerlukan kecepataan saat ini dan posisinya sekarang. Algoritma dinamis menghasilkan suatu gaya atau akselerasi dengan tujuan mengubah kecepatan karakter.\n\nPada praktikum ini, kita akan mencoba untuk membuat “Steering Behaviour” dengan unity jadi siapkan project 3D dengan nama “GameAI”."
  },
  {
    "objectID": "game-prak-12.html#persiapan-project",
    "href": "game-prak-12.html#persiapan-project",
    "title": "Game AI",
    "section": "Persiapan project",
    "text": "Persiapan project\nSetelah membuat project 3D, selanjutnya adalah lakukan langkah-langkah persiapan sebagai berikut:\nPRAKTIKUM:\n\nBuat objek quad dan gunakan sebagai pijakan. Letakkan pada transformasi seperti gambar berikut:  \nBuat objek karakter player dengan objek cube dan letakkan pada posisi seperti gambar berikut.    Tambahkan komponen Rigidbody pada cube kemudian tambahkan objek sphere sebagai child dari objek cube, bentuk seperti gambar berikut.    Jika memerlukan pewarnaan pada objek ini, dapat ditambahkan material sendiri.\nBuat objek karakter musuh dengan objek capsule dan tambahakan komponen Rigidbody. Letakkan pada posisi seperti gambar berikut.    Tambahkan objek cube didalam objek capsule ini, sedemikian sehingga dapat menjadi seperti pada gambar berikut."
  },
  {
    "objectID": "game-prak-12.html#membuat-template-behaviour",
    "href": "game-prak-12.html#membuat-template-behaviour",
    "title": "Game AI",
    "section": "Membuat template behaviour",
    "text": "Membuat template behaviour\nSebelum membuat tingkah laku yang akan diterapkan pada suatu agen (objek game). Akan dibuat terlebih dahulu beberapa kode program yang berbentuk sistem modular untuk menambahkan atau merubah tingkah laku tersebut. Disamping itu, dalam praktikum ini, juga akan dibuat suatu tipe data bentukan sendiri (custom). Sebelum membuat template tingkah laku, berikut adalah beberapa method yang akan menjadi perhatian khusus .\nUpdate: Method ini dipanggil sekali per frame, dan merupakan update frame utama didalam game dengan Unity.\nLateUpdate: Method ini akan mulai dipanggil sekali per frame setelah perintah-perintah yang ada didalam method Update() selesai dilakukan.\nPada praktikum ini nantinya akan terdapat 5 Class kode, yaitu: Steering, Agent, AgentPlayer, AgentBehaviour, dan Seek. Setelah seluruh class tersebut selesai dibuat. Rubah script execution order dengan cara Edit  Project Settings  Script Excecution Order dan atur seperti gambar berikut:\n\nPRAKTIKUM:\n\nBuat script baru dengan nama “Steering” class tersebut merupakan suatu tipe data bentukan (custom data type) untuk menyimpan vektor pergerakan linier dan sudut rotasi dari agen.  \nBuat script baru dengan nama “AgentBehaviour”. AgentBehaviour merupakan class template untuk beberapa model tingkah laku pada agen.  \nAkhir dari modul template behaviour ini adalah membuat script baru dengan nama “Agent”. Agent merupakan komponen class utama untuk menerapkan perilaku pergerakan (class-class yang akan diturunkan dari AgentBehaviour) untuk agen cerdas. Masukkan script Agent ini sebagai komponen pada objek musuh (capsule)"
  },
  {
    "objectID": "game-prak-12.html#seek",
    "href": "game-prak-12.html#seek",
    "title": "Game AI",
    "section": "Seek",
    "text": "Seek\nSalah satu tingkah laku pergerakan adalah “Mencari” atau “Seek”. Tingkah laku Seek pada praktikum ini adalah ketika karakter musuh didekati (pada jarak tertentu) oleh karakter player, maka karakter player akan dipandangai dan kemudian dikejar oleh karakter musuh tersebut. Untuk membuat jarak (antara player dengan musuh) digunakan Vector3.Distance antara player dan musuh. Disamping itu, untuk membuat musuh memandangi player digunakan transform.LookAt.\nPRAKTIKUM:\nBuat script baru dengan nama “Seek” pastikan turunan dari class “AgentBehaviour”. Masukkan script “Seek” ini pada objek musuh (capsule)."
  },
  {
    "objectID": "game-prak-12.html#player-control",
    "href": "game-prak-12.html#player-control",
    "title": "Game AI",
    "section": "Player Control",
    "text": "Player Control\nTahap terakhir untuk membuat game ini menjadi lebih hidup adalah mengendalikan karakter player dengan keyboard. Dengan demikian, kita dapat membuat karakter player mendekati karakter musuh dan kemudian musuh akan secara otomatis mengejar karakter player.\nPRAKTIKUM:\nBuat script baru dengan nama “AgentPlayer” pastikan turunan dari class “Agent”. Masukkan script “AgentPlayer” ini pada objek player (cube). Play Unity dan amati apa yang terjadi!\n\nKUMPULKAN:\nScreenshoot game tab dan simpan dengan nama sc_12_01.jpg"
  },
  {
    "objectID": "game-prak-12.html#experiment",
    "href": "game-prak-12.html#experiment",
    "title": "Game AI",
    "section": "Experiment",
    "text": "Experiment\nTerapkan mekanisme Third-Person Camera atau First-Person Camera untuk membuat tampilan camera lebih menarik."
  },
  {
    "objectID": "game-prak-14.html",
    "href": "game-prak-14.html",
    "title": "Pertemuan 14",
    "section": "",
    "text": "Pendahuluan PAda praktikum kali ini, kita akan membuat aplikasi Augmented Reality atau AR. AR adalah teknologi yang menggabungkan benda maya dua dimensi dan ataupun tiga dimensi ke dalam sebuah lingkungan nyata tiga dimensi lalu memproyeksikan benda-benda maya tersebut dalam waktu nyata. Membuat AR dengan Vuforia SDK Vuforia merupakan Software Development Kit yang digunakan untuk membuat aplikasi Augmented Reality pada perangkat mobile. Vuforia menggunakan teknologi computer visi atau computer vision yang memungkinkan user melacak gambar (marker) ataupun pola yang lain. Saat ini vuforia memiliki banyak fitur pengenalan dan pelacakan marker, diantaranya adalah:  Objects: Mengenali dan melacak objek  Images: Mengenali dan melacak gambar  User-Defined Images: Mengenali dan melacak gambar yang didefinisikan oleh user  Cylinders: Mengenali dan melacak objek berbentuk silinder  Text: Mengenali dan melacak kata yang didefinisikan developer  Boxes: Mengenali dan melacak objek kubus  VuMarks: Mengenali dan melacak target yang mengandung URL (barcode/QR code)  Smart Terrain: Dapat mengenali, melacak, dan merekonstruksi objek lingkungan yang ditangkap oleh kamera perangkat mobile secara langsung kemudian akan menempelkan terrain secara adaptif.  Extended Tracking: Kemampuan untuk yang dapat memberikan pengalawam visual yang berkesinambungan, pengguna dapat secara bebes mengikuti suatu permainan dan men-visualisasikan objek besar seperti model perabotan rumah, kendaraan, dll.\nLisensi Vuforia adalah berbayar dan gratis selama aplikasinya masih dalam pengembangan, lebih detail lihat di tautan: https://developer.vuforia.com/pricing . Untuk dapat menggunakan Vuforia, daftarkan diri kamu di developer portal vuforia: https://developer.vuforia.com/user/register . Jika sudah mendaftar silahkan login kedalam developer portal vuforia. PRAKTIKUM: 1. Login pada developer portal vuforia. 2. Buat kunci lisensi (license key) dari aplikasi yang akan dibuat dengan mengakses menu-&gt;klik Develop.\nPada Tab License Manager, tekan tombol “Add License Key”.\nPada Menu Add License Key ada beberapa pertanyaan yang harus di Isi: o Isikan pada Project Type -&gt; Development (Jangan pilih yang lain, jika tidak ingin membayar lisensi) o Isikan pada Project Details -&gt; App Name berupa nama dari aplikasi yang akan dibuat, dalam praktikum ini akan diberi nama “ARHello”. o Centang pada Project Details -&gt; License Key-? Develop-No Charge o Kemudian klik Next Jika sudah, maka akan keluar menu konfirmasi lisensi seperti gambar dibawah ini:\nKemudian centang Vuforia Developer Agreement dan klik tombol Confirm. Perhatikan bahwa, jika proses permintaan lisensi berhasil maka lisensi list akan bertambah dengan status ”Active”.\n\nDidalam List lisensi terdapat tulisan ARHello yang sebetulnya adalah hyperlink. Klik pada tulisan tersebut, sehingga akan muncul detail lisensi seperti gambar berikut:\n\nCopy tulisan aneh “Ack….z2” kedalam suatu file lisensi.txt karena kita akan menggunakannya saat unity sudah terhubung dengan Vuforia SDK. 4. Buat database baru didalam Target Manager (Develop -&gt; Target Manager).\n\nKlik tombol “Add Database”, Isikan Name “targetcoba” dengan Type “Device”. Kemudian Klik Create.\nKlik “targetcoba” pada list untuk melihat detail database targetcoba.\nPada halaman detail database targetcoba, klik Add Target.\nMasukkan gambar logo_udinus.png.\nIsi width = 50 dan name = “logo_udinus”, seperti yang terlihat pada gambar berikut:\nKlik tombol Add. Ternyata terdapat error gambar tidak valid. Kita harus mengedit gambar dengan 24 bit JPG atau PNG untuk gambar RGB atau 8 bit gambar grayscale.\nGanti gambar dengan logo_udinus24.png, dan klik tombol Add.\nJika sudah berhasil, maka akan muncul di target list. Centang logo_udinus24, kemudian klik tombol Download Database (1)\nAkan muncul box dialog, pilih Unity Editor dan klik tombol Download.\nSimpan file target kedalam direktori yang diinginkan.\nBuka editor Unity. Buat project baru 3D dengan nama “CobaARVuforia”.\nBuka kembali web: https://developer.vuforia.com/downloads/sdk.\nPilih yang “Download for Unity”. Jika ditanya term of use klik I Agree.\nPastikan project CobaARVuforia masih terbuka.\nDouble klik pada file yang tadi di download (vuforia-unity-6-2-10.unitypackage).\nPada editor unity akan muncul box seperti dibawah ini:\n\nKlik tombol “All”, kemudian klik tombol “Import”. Tunggu beberapa saat. 21. Sekarang, kita akan mencoba menggunakan asset gratis yang bisa di cari di Unity Asset Store. 22. Buka unity assets store dengan mengakses menu tab, window -&gt; Asset Store. 23. Pada halaman Asset Store, isikan “Red Samurai” pada pencarian.\n\nCari yang lisensinya FREE,\nKemudian klik download. (jika ditanya login kea kun unity, silahkan login terlebih dahulu kemudian klik download lagi)\nTunggu beberapa saat sampai muncul dialog import seperti ini:\nKlik All dan Import.\nSekarang ke hierarchy window. Hapus objek Main Camera.\nMasukkan prefab ARCamera yang ada di Assets-&gt;Vuforia-&gt;Prefabs, Tarik kedalam hierarchy window.\nPAstikan transformasi posisi x,y,z = 0 dan rotasi x = 90, y dan z = 0.\nSimpan scene terlebih dulu dengan nama “Main”.\nKlik objek ARCamera di Hierarchy window dan lihat pada Inspector.\nKlik “Open Vuforia configuration”, masukkan App License Key seperti pada teks yang tadi disimpan di file lisensi.txt.\nSekarang kita tambahkan objek ImageTarget. Prefab dari objek ini dapat dicari di project window Assets-&gt; vuforia-&gt;Prefabs.\nTarik dan masukkan ImageTarget pada scene atau hierarchy window. Atur pada posisi x=0,y=-50, dan z=0.\nImport file database target yang kita download tadi (targetcoba.unitypackage) dengan cara double klik pada file tersebut.\nKlik pada objek ImageTarget, lihat pada inspector. Klik Database “—EMPTY–” menjadi target coba.\nSekarang kita telah selesai mengatur Camera AR dan Target AR, tetapi belum menambahkan objek 3D apabila target sudah terdeteksi oleh kamera. Tambahkan model 3D samurai yang disimpan pada prefab. Akses prefab samurai di project window Assets-&gt;Prefab-&gt;Samuzai.\nTarik prefab samuzai ke hierarchy window atau scene view didalam ImageTarget.\nGanti skala samuzai x,y,z=0.5. Pastikan posisi dan rotasi x,y,z = 0 semua.\nMasuk pada Inspector ARCamera, Klik Open Vuforian Configuration.\nCari Dataset, centang Load targetcoba Database dan Activate.\nBuka Build Settings (File-&gt;Build Settings). Tambahkan scene Main pada build Setting.\nKlik Android kemudian switch platform. Tunggu beberapa saat.\nKlik Player Setting, rubah Package Name menjadi “com.ar.udinus” lalu ENTER.\nPastikan konfigurasi Android SDK sudah benar, Klik tombol Build. Simpan APK dengan nama sembarangAR.apk.\nMainkan di smartphonemu. KUMPULKAN: Screenshoot saat AR dijalankan di smartphone dengan nama sc_13_01.jpg. Pastikan sudah mencetak gambar logo udinus dan capture dengan kamera smartphone-mu.\n\nMarkerless AR Markerless AR merupakan salah satu jenis AR yang di kembangkan tanpa sebuah marker. Contoh dari aplikasi AR semacam ini pernah di implementasikan pada Game Niantic yaitu Pokemon Go. Namun demikian, perangkat untuk markerless AR ini harus memiliki sensor gyroscope dan accelerometer. Pada praktikum kali ini, mahasiswa akan membuat Markerless AR dengan unity.\nMenyiapkan Kamera dan Area bermain Hal yang pertama kali perlu diperhatikan dalam pembuatan Markerless AR dengan unity ini adalah menyiapkan objek yang nantinya akan digunakan untuk render kamera. Selain itu, perlu dibuat area bermain dimana dari area tersebut akan memunculkan objek-objek virtual. PRAKTIKUM: 1. Buka Unity 5.6.3,buat project baru beri nama “MarkerlessAR”. Simpan scene dengan nama “Main”. 2. Klik Main Camera yang ada di hierarchy. Pada Inspector, rubah transformasi rotasi sumbu x=90. Pastikan posisi main camera adalah x=0, y=1, dan z=-10. 3. Buat objek quad lalu rubah nama menjadi “ArCamFeed” lakukan rotasi pada sumbu x =90. Setelah itu, turunkan object “ArCamFeed” pada posisi x=0,y=-400, dan z=-10 serta rubah scale x=1000,y=1000, dan z=1000. Kemudian jadikan “ArCamFeed” ini sebagai children dari “Main Camera”. 4. Buat objek Cube, lalu rubah nama menjadi “PlayArea”. Rubah posisi objek ini menjadi x=0,y=135, dan z=-10. Rubah transformasi rotasi menjadi x=90,y=0,z=0 dan transformasi scale menjadi x=1000, y=1000, dan z=1000. Jangan centang (uncheck) mesh renderer, mesh filter dan box collider. Objek PlayArea ini tidak lain hanyalah sebagai pembatas area dimana objek-objek virtual akan muncul.\n\nEkstrak file assets.rar dari materi praktikum yang diberi dosen dimana nanti akan terdapat dua folder dengan nama Model dan Sprite. Didalam folder Model terdapat file model 3D dengan nama “Wraith Raider Starship”. Seret “Wraith Raider Starship” ke project view pada unity dan tunggu sampai proses import selesai. Seret “Wraith Raider Starship” yang ada di project view ke scene atau hierarchy. Posisikan objek ini ke x=200,y=50, dan z = 370. Rubah transformasi rotasi pada inspector dengan x=-0, y=90, dan z = 0.\n\nRender Webcam Setelah kamera, ARCamFeed dan PlayArea disiapkan sekarang saatnya kamu memberi ARCamFeed kemampuan untuk mengambil tangkapan gambar dari kamera smartphone. Untuk itu diperlukan mekanisme Render texture yang akan diterapkan pada objek ARCamFeed. Render texture adalah jenis texture yang untuk menampilkan sesuatu yang ditangkap oleh webcam (sensor kamera pada smarphone). PRAKTIKUM: 1. Buat c# script dan beri nama “ArCamSync” pada game objek Main Camera. Deklarasikan variabel arCamFeed untuk mendapatkan referensi ke objek ARCamFeed dan variabel camRotation untuk rotasi kamera.\npublic GameObject arCamFeed; Quaternion camRotation;\n\nDidalam method Start() deklarasikan variabel webCamText untuk menampung teksture yang diambil dari sensor kamera. Setelah itu jalankan webcam texture dan aktifkan gyroscope sensor:\n\nvoid Start () {\nWebCamTexture webCamText = new WebCamTexture(); arCamFeed.GetComponent().material.mainTexture\n= webCamText; webCamText.Play(); Input.gyro.enabled = true; }\n\nPada method Update, buat orientasi rotasi webcam sama dengan rotasi dari Input Gyroscope. void Update () { Quaternion camRotation = new Quaternion(Input.gyro.attitude.x, Input.gyro.attitude.y, -Input.gyro.attitude.z, -Input.gyro.attitude.w); gameObject.transform.localRotation = camRotation; }\nIsikan ARCamFeed pada Inspector Main Camera di komponen script Ar Cam Sync.\n\nMenyiapkan HUD dan Pergerakan Pesawat Setelah webcam sudah dapat menangkap gambar lingkungan nyata, siapkan head up display atau HUD. HUD yang akan ditampilkan hanya gambar kokpit pesawat yang seakan-akan player sedang berada didalam pesawat player. Selanjutnya buat objek pesawat musuh (Wraith Raider Starship) berjalan maju mundur supaya pesawat tersebut terlihat melayang di dunia nyata. PRAKTIKUM: 1. Didalam folder assets yang diberikan oleh dosen, terdapat folder Sprite. Ambil gambar cockpit.png dan masukkan ke project view unity. 2. Klik cockpit pada project view dan lihat Inspector. Rubah “texture type” bernilai Sprite (2D and UI). Jika sudah, klik Apply yang berada di Inspector bagian bawah. 3. Buat UI Image dengan cara, klik kanan pada hierarchy UIImage kemudian beri nama “kokpit” . 4. Pastikan posisi x,y,z dari UI kokpit bernilai 0 dan anchor berada pada middle dan center. Isikan width = 900 dan Height = 400 pada Inspector UI Kokpit. 5. Buat C# baru beri nama simpleWandering pada game objek Wraith Raider Starship.Jadi nanti musuh akan bergerak maju mundur seperti itu. public float timeWander; float nTimeWander;//waktu ganti arah // Use this for initialization void Start () { nTimeWander = timeWander; }\n// Update is called once per frame\nvoid Update () {\n    nTimeWander-=.1f;\n\n    if(nTimeWander&gt;timeWander/2){\n        transform.Translate(Vector3.forward);\n    }else{\n        transform.Translate(Vector3.back);\n    }\n\n    if(nTimeWander&lt;0f){\n        nTimeWander = timeWander;\n    }\n} \n\nTambahkan Rigidbody pada Wraith Raider Starship. Jangan centang / uncheck Use Gravity dan centang Is Kinematic pada komponen Rigidbody.\nIsikan Time Wander pada Inspector Wraith Raider Starship dengan nilai 50.\nTahap terakhir adalah publih ke platform android. Lihat tutorial ini pada pertemuan-pertemuan sebelumnya. KUMPULKAN: Screenshoot game tab. Simpan dengan nama sc_13_02.jpg"
  },
  {
    "objectID": "game-prak-14.html#pendahuluan",
    "href": "game-prak-14.html#pendahuluan",
    "title": "Game Augmented Reality",
    "section": "Pendahuluan",
    "text": "Pendahuluan\nPada praktikum kali ini, kita akan membuat aplikasi Augmented Reality atau AR. AR adalah teknologi yang menggabungkan benda maya dua dimensi dan ataupun tiga dimensi ke dalam sebuah lingkungan nyata tiga dimensi lalu memproyeksikan benda-benda maya tersebut dalam waktu nyata."
  },
  {
    "objectID": "game-prak-14.html#membuat-ar-dengan-vuforia-sdk",
    "href": "game-prak-14.html#membuat-ar-dengan-vuforia-sdk",
    "title": "Game Augmented Reality",
    "section": "Membuat AR dengan Vuforia SDK",
    "text": "Membuat AR dengan Vuforia SDK\nVuforia merupakan Software Development Kit yang digunakan untuk membuat aplikasi Augmented Reality pada perangkat mobile. Vuforia menggunakan teknologi computer visi atau computer vision yang memungkinkan user melacak gambar (marker) ataupun pola yang lain. Saat ini vuforia memiliki banyak fitur pengenalan dan pelacakan marker, diantaranya adalah:\n\nObjects: Mengenali dan melacak objek\nImages: Mengenali dan melacak gambar\nUser-Defined Images: Mengenali dan melacak gambar yang didefinisikan oleh user\nCylinders: Mengenali dan melacak objek berbentuk silinder\nText: Mengenali dan melacak kata yang didefinisikan developer\nBoxes: Mengenali dan melacak objek kubus\nVuMarks: Mengenali dan melacak target yang mengandung URL (barcode/QR code)\nSmart Terrain: Dapat mengenali, melacak, dan merekonstruksi objek lingkungan yang ditangkap oleh kamera perangkat mobile secara langsung kemudian akan menempelkan terrain secara adaptif.\nExtended Tracking: Kemampuan untuk yang dapat memberikan pengalawam visual yang berkesinambungan, pengguna dapat secara bebes mengikuti suatu permainan dan men-visualisasikan objek besar seperti model perabotan rumah, kendaraan, dll.\n\nLisensi Vuforia adalah berbayar dan gratis selama aplikasinya masih dalam pengembangan, lebih detail lihat di tautan: https://developer.vuforia.com/pricing . Untuk dapat menggunakan Vuforia, daftarkan diri kamu di developer portal vuforia: https://developer.vuforia.com/user/register . Jika sudah mendaftar silahkan login kedalam developer portal vuforia.\nPRAKTIKUM:\n\nLogin pada developer portal vuforia.\nBuat kunci lisensi (license key) dari aplikasi yang akan dibuat dengan mengakses menu-&gt;klik Develop.    Pada Tab License Manager, tekan tombol “Add License Key”.    Pada Menu Add License Key ada beberapa pertanyaan yang harus di Isi: \n\nIsikan pada Project Type -&gt; Development (Jangan pilih yang lain, jika tidak ingin membayar lisensi)\nIsikan pada Project Details -&gt; App Name berupa nama dari aplikasi yang akan dibuat, dalam praktikum ini akan diberi nama “ARHello”.\nCentang pada Project Details -&gt; License Key-? Develop-No Charge\nKemudian klik Next \n\nJika sudah, maka akan keluar menu konfirmasi lisensi seperti gambar dibawah ini:    Kemudian centang Vuforia Developer Agreement dan klik tombol Confirm. Perhatikan bahwa, jika proses permintaan lisensi berhasil maka lisensi list akan bertambah dengan status ”Active”.  \nDidalam List lisensi terdapat tulisan ARHello yang sebetulnya adalah hyperlink. Klik pada tulisan tersebut, sehingga akan muncul detail lisensi seperti gambar berikut:    Copy tulisan aneh “Ack….z2” kedalam suatu file lisensi.txt karena kita akan menggunakannya saat unity sudah terhubung dengan Vuforia SDK.\nBuat database baru didalam Target Manager (Develop -&gt; Target Manager).  \nKlik tombol “Add Database”, Isikan Name “targetcoba” dengan Type “Device”. Kemudian Klik Create.  \nKlik “targetcoba” pada list untuk melihat detail database targetcoba.  \nPada halaman detail database targetcoba, klik Add Target.  \nMasukkan gambar logo_udinus.png.\nIsi width = 50 dan name = “logo_udinus”, seperti yang terlihat pada gambar berikut:  \nKlik tombol Add. Ternyata terdapat error gambar tidak valid. Kita harus mengedit gambar dengan 24 bit JPG atau PNG untuk gambar RGB atau 8 bit gambar grayscale.  \nGanti gambar dengan logo_udinus24.png, dan klik tombol Add.  \nJika sudah berhasil, maka akan muncul di target list. Centang logo_udinus24, kemudian klik tombol Download Database (1) \nAkan muncul box dialog, pilih Unity Editor dan klik tombol Download.  \nSimpan file target kedalam direktori yang diinginkan.\nBuka editor Unity. Buat project baru 3D dengan nama “CobaARVuforia”.\nBuka kembali web: https://developer.vuforia.com/downloads/sdk.\nPilih yang “Download for Unity”. Jika ditanya term of use klik I Agree.\nPastikan project CobaARVuforia masih terbuka.\nDouble klik pada file yang tadi di download (vuforia-unity-6-2-10.unitypackage).\nPada editor unity akan muncul box seperti dibawah ini:    Klik tombol “All”, kemudian klik tombol “Import”. Tunggu beberapa saat.\nSekarang, kita akan mencoba menggunakan asset gratis yang bisa di cari di Unity Asset Store.\nBuka unity assets store dengan mengakses menu tab, window -&gt; Asset Store.\nPada halaman Asset Store, isikan “Red Samurai” pada pencarian.  \nCari yang lisensinya FREE,  \nKemudian klik download. (jika ditanya login kea kun unity, silahkan login terlebih dahulu kemudian klik download lagi)\nTunggu beberapa saat sampai muncul dialog import seperti ini:  \nKlik All dan Import.\nSekarang ke hierarchy window. Hapus objek Main Camera.\nMasukkan prefab ARCamera yang ada di Assets-&gt;Vuforia-&gt;Prefabs, Tarik kedalam hierarchy window.\nPAstikan transformasi posisi x,y,z = 0 dan rotasi x = 90, y dan z = 0.\nSimpan scene terlebih dulu dengan nama “Main”.\nKlik objek ARCamera di Hierarchy window dan lihat pada Inspector.\nKlik “Open Vuforia configuration”, masukkan App License Key seperti pada teks yang tadi disimpan di file lisensi.txt.  \nSekarang kita tambahkan objek ImageTarget. Prefab dari objek ini dapat dicari di project window Assets-&gt; vuforia-&gt;Prefabs.\nTarik dan masukkan ImageTarget pada scene atau hierarchy window. Atur pada posisi x=0,y=-50, dan z=0.\nImport file database target yang kita download tadi (targetcoba.unitypackage) dengan cara double klik pada file tersebut.\nKlik pada objek ImageTarget, lihat pada inspector. Klik Database “—EMPTY–” menjadi target coba.  \nSekarang kita telah selesai mengatur Camera AR dan Target AR, tetapi belum menambahkan objek 3D apabila target sudah terdeteksi oleh kamera. Tambahkan model 3D samurai yang disimpan pada prefab. Akses prefab samurai di project window Assets-&gt;Prefab-&gt;Samuzai.\nTarik prefab samuzai ke hierarchy window atau scene view didalam ImageTarget.  \nGanti skala samuzai x,y,z=0.5. Pastikan posisi dan rotasi x,y,z = 0 semua.\nMasuk pada Inspector ARCamera, Klik Open Vuforian Configuration.\nCari Dataset, centang Load targetcoba Database dan Activate.  \nBuka Build Settings (File-&gt;Build Settings). Tambahkan scene Main pada build Setting.\nKlik Android kemudian switch platform. Tunggu beberapa saat.  \nKlik Player Setting, rubah Package Name menjadi “com.ar.udinus” lalu ENTER.\nPastikan konfigurasi Android SDK sudah benar, Klik tombol Build. Simpan APK dengan nama sembarangAR.apk.\nMainkan di smartphonemu.\n\nKUMPULKAN:\nScreenshoot saat AR dijalankan di smartphone dengan nama sc_13_01.jpg. Pastikan sudah mencetak gambar logo udinus dan capture dengan kamera smartphone-mu."
  },
  {
    "objectID": "game-prak-14.html#markerless-ar",
    "href": "game-prak-14.html#markerless-ar",
    "title": "Game Augmented Reality",
    "section": "Markerless AR",
    "text": "Markerless AR\nMarkerless AR merupakan salah satu jenis AR yang di kembangkan tanpa sebuah marker. Contoh dari aplikasi AR semacam ini pernah di implementasikan pada Game Niantic yaitu Pokemon Go. Namun demikian, perangkat untuk markerless AR ini harus memiliki sensor gyroscope dan accelerometer. Pada praktikum kali ini, mahasiswa akan membuat Markerless AR dengan unity.\n\nMenyiapkan Kamera dan Area bermain\nHal yang pertama kali perlu diperhatikan dalam pembuatan Markerless AR dengan unity ini adalah menyiapkan objek yang nantinya akan digunakan untuk render kamera. Selain itu, perlu dibuat area bermain dimana dari area tersebut akan memunculkan objek-objek virtual.\nPRAKTIKUM:\n\nBuka Unity 5.6.3,buat project baru beri nama “MarkerlessAR”. Simpan scene dengan nama “Main”.\nKlik Main Camera yang ada di hierarchy. Pada Inspector, rubah transformasi rotasi sumbu x=90. Pastikan posisi main camera adalah x=0, y=1, dan z=-10.\nBuat objek quad lalu rubah nama menjadi “ArCamFeed” lakukan rotasi pada sumbu x =90. Setelah itu, turunkan object “ArCamFeed” pada posisi x=0,y=-400, dan z=-10 serta rubah scale x=1000,y=1000, dan z=1000. Kemudian jadikan “ArCamFeed” ini sebagai children dari “Main Camera”.\nBuat objek Cube, lalu rubah nama menjadi “PlayArea”. Rubah posisi objek ini menjadi x=0,y=135, dan z=-10. Rubah transformasi rotasi menjadi x=90,y=0,z=0 dan transformasi scale menjadi x=1000, y=1000, dan z=1000. Jangan centang (uncheck) mesh renderer, mesh filter dan box collider. Objek PlayArea ini tidak lain hanyalah sebagai pembatas area dimana objek-objek virtual akan muncul.  \nEkstrak file assets.rar dari materi praktikum yang diberi dosen dimana nanti akan terdapat dua folder dengan nama Model dan Sprite. Didalam folder Model terdapat file model 3D dengan nama “Wraith Raider Starship”. Seret “Wraith Raider Starship” ke project view pada unity dan tunggu sampai proses import selesai. Seret “Wraith Raider Starship” yang ada di project view ke scene atau hierarchy. Posisikan objek ini ke x=200,y=50, dan z = 370. Rubah transformasi rotasi pada inspector dengan x=-0, y=90, dan z = 0.  \n\n\n\n\nRender Webcam\nSetelah kamera, ARCamFeed dan PlayArea disiapkan sekarang saatnya kamu memberi ARCamFeed kemampuan untuk mengambil tangkapan gambar dari kamera smartphone. Untuk itu diperlukan mekanisme Render texture yang akan diterapkan pada objek ARCamFeed. Render texture adalah jenis texture yang untuk menampilkan sesuatu yang ditangkap oleh webcam (sensor kamera pada smarphone).\nPRAKTIKUM:\n\nBuat c# script dan beri nama “ArCamSync” pada game objek Main Camera. Deklarasikan variabel arCamFeed untuk mendapatkan referensi ke objek ARCamFeed dan variabel camRotation untuk rotasi kamera.\n\npublic GameObject arCamFeed;\nQuaternion camRotation; \n\nDidalam method Start() deklarasikan variabel webCamText untuk menampung teksture yang diambil dari sensor kamera. Setelah itu jalankan webcam texture dan aktifkan gyroscope sensor:\n\nvoid Start () {\n\n  WebCamTexture webCamText = new WebCamTexture();\n  arCamFeed.GetComponent&lt;MeshRenderer&gt;().material.mainTexture    \n  = webCamText;\n  webCamText.Play();\n   Input.gyro.enabled = true;\n} \n\nPada method Update, buat orientasi rotasi webcam sama dengan rotasi dari Input Gyroscope.\n\n    void Update () {\n          Quaternion camRotation = new Quaternion(Input.gyro.attitude.x, \n          Input.gyro.attitude.y, -Input.gyro.attitude.z, \n        -Input.gyro.attitude.w);\n        gameObject.transform.localRotation = camRotation;\n    } \n\nIsikan ARCamFeed pada Inspector Main Camera di komponen script Ar Cam Sync.  \n\n\n\n\nMenyiapkan HUD dan Pergerakan Pesawat\nSetelah webcam sudah dapat menangkap gambar lingkungan nyata, siapkan head up display atau HUD. HUD yang akan ditampilkan hanya gambar kokpit pesawat yang seakan-akan player sedang berada didalam pesawat player. Selanjutnya buat objek pesawat musuh (Wraith Raider Starship) berjalan maju mundur supaya pesawat tersebut terlihat melayang di dunia nyata.\nPRAKTIKUM:\n\nDidalam folder assets yang diberikan oleh dosen, terdapat folder Sprite. Ambil gambar cockpit.png dan masukkan ke project view unity.\nKlik cockpit pada project view dan lihat Inspector. Rubah “texture type” bernilai Sprite (2D and UI). Jika sudah, klik Apply yang berada di Inspector bagian bawah.\nBuat UI Image dengan cara, klik kanan pada hierarchy -&gt; UI -&gt; Image kemudian beri nama “kokpit” .\nPastikan posisi x,y,z dari UI kokpit bernilai 0 dan anchor berada pada middle dan center. Isikan width = 900 dan Height = 400 pada Inspector UI Kokpit.\nBuat C# baru beri nama simpleWandering pada game objek Wraith Raider Starship.Jadi nanti musuh akan bergerak maju mundur seperti itu.\n\n    public float timeWander;\n    float nTimeWander;//waktu ganti arah\n    // Use this for initialization\n    void Start () {\n        nTimeWander = timeWander;\n    }\n    \n    // Update is called once per frame\n    void Update () {\n        nTimeWander-=.1f;\n\n        if(nTimeWander&gt;timeWander/2){\n            transform.Translate(Vector3.forward);\n        }else{\n            transform.Translate(Vector3.back);\n        }\n\n        if(nTimeWander&lt;0f){\n            nTimeWander = timeWander;\n        }\n    } \n\nTambahkan Rigidbody pada Wraith Raider Starship. Jangan centang / uncheck Use Gravity dan centang Is Kinematic pada komponen Rigidbody.\nIsikan Time Wander pada Inspector Wraith Raider Starship dengan nilai 50.\nTahap terakhir adalah publih ke platform android. Lihat tutorial ini pada pertemuan-pertemuan sebelumnya.\n\nKUMPULKAN:\nScreenshoot game tab. Simpan dengan nama sc_13_02.jpg"
  },
  {
    "objectID": "game-prak-14.html#referensi",
    "href": "game-prak-14.html#referensi",
    "title": "Game Augmented Reality",
    "section": "REFERENSI",
    "text": "REFERENSI\n\nJacko, Julie A.; Andrew Sears (2003). Handbook of Research on Ubiquitous Computing Technology for Real Time Enterprises. CRC Press. p. 459.\nhttps://www.vuforia.com/\nhttps://www.vuforia.com/features.html\nhttps://www.sitepoint.com/how-to-build-an-ar-android-app-with-vuforia-and-unity/\nhttps://library.vuforia.com/articles/Solution/Getting-Started-with-Vuforia-for-Unity-Development.html\nhttp://wirebeings.com/markerless-augmented-reality.html\nhttps://free3d.com/3d-model/wraith-raider-starship-22193.html\nhttps://docs.unity3d.com/Manual/class-RenderTexture.html"
  },
  {
    "objectID": "game-prak-14.html#mekanisme-pengumpulan-praktikum-mingguan",
    "href": "game-prak-14.html#mekanisme-pengumpulan-praktikum-mingguan",
    "title": "Game Augmented Reality",
    "section": "Mekanisme Pengumpulan Praktikum Mingguan",
    "text": "Mekanisme Pengumpulan Praktikum Mingguan\nUntuk setiap mahasiswa: Buat 1 folder beri nama NIM lengkap. Masukkan file screenshot sc_13_01 dan sc_13_02.jpg . Kemudian rar atau zip folder NIM kamu tadi dan kirimkan ke ketua kelas.\nContoh:A11200904997.rar\nUntuk Ketua Kelas: Siapkan folder dengan nama Kode Kelas “_13” yang berisi kumpulan praktikum setiap mahasiswa. Lalu buat rar atau zip dan kirimkan ke email dosen.\nContoh: A114401_13.rar"
  },
  {
    "objectID": "game-prak-5.html#referensi",
    "href": "game-prak-5.html#referensi",
    "title": "5. Android Deployment",
    "section": "REFERENSI",
    "text": "REFERENSI\n\nhttp://answers.unity3d.com/questions/137143/how-to-set-the-font-size-in-guilabel.html\nhttps://docs.unity3d.com/Manual/UISystem.html\nhttps://www.codeproject.com/Tips/219559/Simple-Singleton-Pattern-in-Csharp"
  },
  {
    "objectID": "game-prak-5.html#mekanisme-pengumpulan-praktikum-mingguan",
    "href": "game-prak-5.html#mekanisme-pengumpulan-praktikum-mingguan",
    "title": "5. Android Deployment",
    "section": "Mekanisme Pengumpulan Praktikum Mingguan",
    "text": "Mekanisme Pengumpulan Praktikum Mingguan\nUntuk setiap mahasiswa: Buat 1 folder beri nama NIM lengkap. Masukkan file screenshot sc_056_01.jpg, sc_056_02.jpg, sc_056_03.jpg, sc_056_04.jpg, dan sc_056_05.jpg. Kemudian rar atau zip folder NIM kamu tadi dan kirimkan ke ketua kelas.\nContoh: A11200904997.rar\nUntuk Ketua Kelas: SIapkan folder dengan nama Kode Kelas “_056” yang berisi kumpulan praktikum setiap mahasiswa. Lalu buat rar atau zip dan kirimkan ke email dosen.\nContoh: A114401_056.rar"
  },
  {
    "objectID": "game-prak-2.html#referensi",
    "href": "game-prak-2.html#referensi",
    "title": "2. Menghubungkan object dengan variabel",
    "section": "REFERENSI",
    "text": "REFERENSI\n\nhttps://docs.unity3d.com/550/Documentation/Manual/ControllingGameObjectsComponents.html\nhttps://www.tutorialspoint.com/csharp/csharp_arrays.htm\nhttps://videos.raywenderlich.com/courses/47-beginning-c/lessons/6\nhttps://docs.unity3d.com/ScriptReference/MonoBehaviour.html\nhttps://docs.unity3d.com/Manual/ExecutionOrder.html\nhttps://luckytoilet.wordpress.com/2014/11/24/visualizing-quaternions-with-unity/\nhttps://id.wikipedia.org/wiki/Kuaternion\nhttps://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/using-properties\nhttps://www.tutorialspoint.com/csharp/csharp_encapsulation.htm\nhttps://unity3d.com/learn/tutorials/topics/scripting/polymorphism\nhttps://docs.unity3d.com/Manual/GenericFunctions.html"
  },
  {
    "objectID": "game-prak-2.html#mekanisme-pengumpulan-praktikum-mingguan",
    "href": "game-prak-2.html#mekanisme-pengumpulan-praktikum-mingguan",
    "title": "2. Menghubungkan object dengan variabel",
    "section": "Mekanisme Pengumpulan Praktikum Mingguan",
    "text": "Mekanisme Pengumpulan Praktikum Mingguan\nUntuk setiap mahasiswa: Buat 1 folder beri nama NIM lengkap. Masukkan file screenshot sc_02_01.jpg, sc_02_02.jpg, sc_02_03.jpg, sc_02_04.jpg, dan sc_02_05.jpg. Kemudian rar atau zip folder NIM kamu tadi dan kirimkan ke ketua kelas.\nContoh: A11200904997.rar\nUntuk Ketua Kelas: SIapkan folder dengan nama Kode Kelas “_02” yang berisi kumpulan praktikum setiap mahasiswa. Lalu buat rar atau zip dan kirimkan ke email dosen.\nContoh: A114401_02.rar"
  },
  {
    "objectID": "game-prak-1.html#referensi",
    "href": "game-prak-1.html#referensi",
    "title": "1. Download dan Install Unity",
    "section": "REFERENSI",
    "text": "REFERENSI\n\nhttps://docs.unity3d.com/550/Documentation/Manual/ (Unity versi 5.5)\nhttps://docs.unity3d.com/550/Documentation/Manual/GettingStarted.html\nhttps://docs.unity3d.com/550/Documentation/Manual/LearningtheInterface.html\nhttps://docs.unity3d.com/Manual/ (Unity terbaru)\nhttps://docs.unity3d.com/550/Documentation/Manual/CreatingAndUsingScripts.html\nhttps://docs.unity3d.com/550/Documentation/Manual/VariablesAndTheInspector.html\nhttps://www.tutorialspoint.com/csharp/csharp_decision_making.htm\nhttps://www.tutorialspoint.com/csharp/csharp_loops.htm\nhttps://stackoverflow.com/questions/22467674/move-simple-object-in-unity-2d"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Game Programming",
    "section": "",
    "text": "Pengantar"
  },
  {
    "objectID": "index.html#sebelum-mulai-membuat-game-apa-yang-harus-kita-lakukan",
    "href": "index.html#sebelum-mulai-membuat-game-apa-yang-harus-kita-lakukan",
    "title": "Game Programming",
    "section": "Sebelum mulai membuat Game, apa yang harus kita lakukan?",
    "text": "Sebelum mulai membuat Game, apa yang harus kita lakukan?\n\nSilahkan bermain game pada smartphone atau PC selama 10 menit!!\nDiskusikan tentang apa yang kamu rasakan ketika bermain game tersebut..?\nKomponen apa saja yang membuat game tersebut menarik untuk dimainkan?\nTulis pada 1 lembar kertas."
  },
  {
    "objectID": "index.html#platform",
    "href": "index.html#platform",
    "title": "Game Programming",
    "section": "Platform",
    "text": "Platform\nYang seting dimainkan gamers:\n\nPC (56%)\nConsole (53%)\nSmartphone (36%)\nWireless device (31%)\nDedicated handled system (17%)"
  },
  {
    "objectID": "index.html#bagaimana-membuat-nya",
    "href": "index.html#bagaimana-membuat-nya",
    "title": "Game Programming",
    "section": "Bagaimana membuat-nya?",
    "text": "Bagaimana membuat-nya?\n\nOpsi 1 – Buat seluruhnya!!\n\nBuat fungsionalitas dasar suatu game (core game)\nBuat fitur-fitur game yang spesifik (termasuk game logic dan game assets)\n\nOpsi 2 – Gunakan Game Engine\n\nMenyediakan fungsionalitas core game\nKembangkan diatas struktur game engine pada Game Technologi diagram sebelumnya\nFokus pada elemen yang unik pada game yang akan di buat"
  },
  {
    "objectID": "game-prak-3.html#referensi",
    "href": "game-prak-3.html#referensi",
    "title": "3. Animation sprite 2D",
    "section": "REFERENSI",
    "text": "REFERENSI\n\nhttps://docs.unity3d.com/550/Documentation/Manual/Toolbar.html\nhttps://docs.unity3d.com/550/Documentation/Manual/PositioningGameObjects.html\nhttps://docs.unity3d.com/Manual/Prefabs.html\nhttps://docs.unity3d.com/Manual/ConventionalGameInput.html\nhttps://docs.unity3d.com/Manual/class-Rigidbody2D.html\nhttps://docs.unity3d.com/Manual/Collider2D.html\nhttps://docs.unity3d.com/ScriptReference/MonoBehaviour.OnCollisionEnter2D.html"
  },
  {
    "objectID": "game-prak-3.html#mekanisme-pengumpulan-praktikum-mingguan",
    "href": "game-prak-3.html#mekanisme-pengumpulan-praktikum-mingguan",
    "title": "3. Animation sprite 2D",
    "section": "Mekanisme Pengumpulan Praktikum Mingguan",
    "text": "Mekanisme Pengumpulan Praktikum Mingguan\nUntuk setiap mahasiswa: Buat 1 folder beri nama NIM lengkap. Masukkan file screenshot sc_03_01.jpg, sc_03_02.jpg, sc_03_03.jpg, dan sc_03_04.jpg. Kemudian rar atau zip folder NIM kamu tadi dan kirimkan ke ketua kelas.\nContoh: A11200904997.rar\nUntuk Ketua Kelas: SIapkan folder dengan nama Kode Kelas “_03” yang berisi kumpulan praktikum setiap mahasiswa. Lalu buat rar atau zip dan kirimkan ke email dosen.\nContoh: A114401_03.rar"
  },
  {
    "objectID": "game-prak-4.html#referensi",
    "href": "game-prak-4.html#referensi",
    "title": "4. Persiapan Asset Game",
    "section": "REFERENSI",
    "text": "REFERENSI\n\nhttp://zikky.lecturer.pens.ac.id/Tutorial%20Membuat%20Permainan%20Flappy%20Bird%20Menggunakan%20Unity3D.pdf"
  },
  {
    "objectID": "game-prak-4.html#mekanisme-pengumpulan-praktikum-mingguan",
    "href": "game-prak-4.html#mekanisme-pengumpulan-praktikum-mingguan",
    "title": "4. Persiapan Asset Game",
    "section": "Mekanisme Pengumpulan Praktikum Mingguan",
    "text": "Mekanisme Pengumpulan Praktikum Mingguan\nTidak ada yang harus dikumpulkan pada praktikum kali ini."
  },
  {
    "objectID": "game-prak-7.html#latihan-opsional",
    "href": "game-prak-7.html#latihan-opsional",
    "title": "6. Standard Asset 2D dan Instant Development",
    "section": "Latihan (Opsional)",
    "text": "Latihan (Opsional)\nJika sudah selesai praktikum, silahkan kembangkan game yang ada pada praktikum kali ini dengan pengetahuan yang sebelumnya sudah dipelajari dan kreativitas kamu."
  },
  {
    "objectID": "game-prak-7.html#referensi",
    "href": "game-prak-7.html#referensi",
    "title": "6. Standard Asset 2D dan Instant Development",
    "section": "REFERENSI",
    "text": "REFERENSI\n\nhttps://docs.unity3d.com/Manual/HOWTO-InstallStandardAssets.html\nhttps://gamedevelopment.tutsplus.com/tutorials/finite-state-machines-theory-and-implementation–gamedev-11867\nhttp://www.cse.lehigh.edu/~munoz/CSE497/classes/FSM_In_Games.ppt\nhttps://unity3d.com/learn/tutorials/projects/2d-ufo-tutorial/following-player-camera\nhttps://docs.unity3d.com/Manual/StateMachineBasics.html\nhttps://docs.unity3d.com/Manual/AnimationParameters.html"
  },
  {
    "objectID": "game-prak-7.html#mekanisme-pengumpulan-praktikum-mingguan",
    "href": "game-prak-7.html#mekanisme-pengumpulan-praktikum-mingguan",
    "title": "6. Standard Asset 2D dan Instant Development",
    "section": "Mekanisme Pengumpulan Praktikum Mingguan",
    "text": "Mekanisme Pengumpulan Praktikum Mingguan\nUntuk setiap mahasiswa: Buat 1 folder beri nama NIM lengkap. Masukkan file screenshot sc_07_01.jpg, dan sc_07_02.jpg serta .txt. Kemudian rar atau zip folder NIM kamu tadi dan kirimkan ke ketua kelas.\nContoh: A11200904997.rar\nUntuk Ketua Kelas: SIapkan folder dengan nama Kode Kelas “_07” yang berisi kumpulan praktikum setiap mahasiswa. Lalu buat rar atau zip dan kirimkan ke email dosen.\nContoh: A114401_07.rar"
  },
  {
    "objectID": "game-prak-9.html#referensi",
    "href": "game-prak-9.html#referensi",
    "title": "7. Save & Load dengan Playerpref",
    "section": "REFERENSI",
    "text": "REFERENSI\n\nhttps://docs.unity3d.com/ScriptReference/PlayerPrefs.html\nhttps://unity3d.com/learn/tutorials/topics/scripting/high-score-playerprefs\nhttp://answers.unity3d.com/questions/27973/idiots-guide-to-player-prefs.html\nhttp://unitycsharp.blogspot.co.id/2016/03/unity-c-tutorial-indonesia-basic-28.html"
  },
  {
    "objectID": "game-prak-9.html#mekanisme-pengumpulan-praktikum-mingguan",
    "href": "game-prak-9.html#mekanisme-pengumpulan-praktikum-mingguan",
    "title": "7. Save & Load dengan Playerpref",
    "section": "Mekanisme Pengumpulan Praktikum Mingguan",
    "text": "Mekanisme Pengumpulan Praktikum Mingguan\nUntuk setiap mahasiswa: Buat 1 folder beri nama NIM lengkap. Masukkan file screenshot sc_08_01.jpg, sc_08_02.jpg, sc_08_03.jpg dan sc_08_04.jpg. Kemudian rar atau zip folder NIM kamu tadi dan kirimkan ke ketua kelas.\nContoh: A11200904997.rar\nUntuk Ketua Kelas: SIapkan folder dengan nama Kode Kelas “_08” yang berisi kumpulan praktikum setiap mahasiswa. Lalu buat rar atau zip dan kirimkan ke email dosen. Contoh: A114401_08.rar"
  },
  {
    "objectID": "game-prak-10.html#referensi",
    "href": "game-prak-10.html#referensi",
    "title": "8. Koordinat 2D vs 3D dan sistem arah tangan",
    "section": "REFERENSI",
    "text": "REFERENSI\n\nHocking, J. (2015). Unity in action. Manning Publications,.\nDe Byl, P. (2017). Holistic Mobile Game Development with Unity Second Eds. CRC Press.\nBlackman, S., & Tuliper, A. (2016). Learn Unity for Windows 10 Game Development. Apress.\nhttps://docs.unity3d.com/Manual/CamerasOverview.html\nhttps://docs.unity3d.com/Manual/LightingInUnity.html\nhttps://docs.unity3d.com/Manual/Lighting.html\nhttps://docs.unity3d.com/Manual/Shaders.html\nhttps://docs.unity3d.com/Manual/OcclusionCulling.html\nhttp://answers.unity3d.com/questions/310044/clickable-map.html\nhttps://docs.unity3d.com/Manual/HOWTO-InstallStandardAssets.html\nhttps://docs.unity3d.com/Manual/HOWTO-UseSkybox.htm\nhttps://docs.unity3d.com/Manual/class-Skybox.htm\nhttps://docs.unity3d.com/Manual/script-Terrain.htm\nhttps://docs.unity3d.com/Manual/terrain-UsingTerrains.htm"
  },
  {
    "objectID": "game-prak-10.html#mekanisme-pengumpulan-praktikum-mingguan",
    "href": "game-prak-10.html#mekanisme-pengumpulan-praktikum-mingguan",
    "title": "8. Koordinat 2D vs 3D dan sistem arah tangan",
    "section": "Mekanisme Pengumpulan Praktikum Mingguan",
    "text": "Mekanisme Pengumpulan Praktikum Mingguan\nUntuk setiap mahasiswa: Buat 1 folder beri nama NIM lengkap. Masukkan file screenshot sc_910_01.jpg, sc_910_02.jpg, sc_910_03.jpg, sc_910_04, sc_910_05 dan sc_910_06.jpg serta file &lt;NIM.txt&gt;. Kemudian rar atau zip folder NIM kamu tadi dan kirimkan ke ketua kelas.\nContoh: A11200904997.rar\nUntuk Ketua Kelas: Siapkan folder dengan nama Kode Kelas “_910” yang berisi kumpulan praktikum setiap mahasiswa. Lalu buat rar atau zip dan kirimkan ke email dosen.\nContoh: A114401_910.rar"
  },
  {
    "objectID": "game-prak-11.html#referensi",
    "href": "game-prak-11.html#referensi",
    "title": "9. Translasi Objek 3D",
    "section": "REFERENSI",
    "text": "REFERENSI\n\nHocking, J. (2015). Unity in action. Manning Publications,.\nDe Byl, P. (2017). Holistic Mobile Game Development with Unity Second Eds. CRC Press.\nBlackman, S., & Tuliper, A. (2016). Learn Unity for Windows 10 Game Development. Apress.\nhttps://docs.unity3d.com/ScriptReference/MonoBehaviour.OnTriggerEnter.html\nhttps://docs.unity3d.com/ScriptReference/Collider.OnCollisionEnter.html"
  },
  {
    "objectID": "game-prak-11.html#mekanisme-pengumpulan-praktikum-mingguan",
    "href": "game-prak-11.html#mekanisme-pengumpulan-praktikum-mingguan",
    "title": "9. Translasi Objek 3D",
    "section": "Mekanisme Pengumpulan Praktikum Mingguan",
    "text": "Mekanisme Pengumpulan Praktikum Mingguan\nUntuk setiap mahasiswa: Buat 1 folder beri nama NIM lengkap. Masukkan file screenshot sc_11_01.jpg, sc_11_02.jpg, sc_11_03.jpg, sc_11_04, sc_11_05 dan sc_11_06.jpg . Kemudian rar atau zip folder NIM kamu tadi dan kirimkan ke ketua kelas.\nContoh: A11200904997.rar\nUntuk Ketua Kelas: Siapkan folder dengan nama Kode Kelas “_11” yang berisi kumpulan praktikum setiap mahasiswa. Lalu buat rar atau zip dan kirimkan ke email dosen.\nContoh: A114401_11.rar"
  },
  {
    "objectID": "game-prak-12.html#referensi",
    "href": "game-prak-12.html#referensi",
    "title": "Game AI",
    "section": "REFERENSI",
    "text": "REFERENSI\n\nPalacios, J., (2016), Unity 5.X Game Ai Programming Cookbook, packt publishing.\nMillington, I., and Funge, J.,(2016), Artificial Intelligence for Games. CRC press."
  },
  {
    "objectID": "game-prak-12.html#mekanisme-pengumpulan-praktikum-mingguan",
    "href": "game-prak-12.html#mekanisme-pengumpulan-praktikum-mingguan",
    "title": "Game AI",
    "section": "Mekanisme Pengumpulan Praktikum Mingguan",
    "text": "Mekanisme Pengumpulan Praktikum Mingguan\nUntuk setiap mahasiswa: Buat 1 folder beri nama NIM lengkap. Masukkan file screenshot sc_12_01.jpg. Kemudian rar atau zip folder NIM kamu tadi dan kirimkan ke ketua kelas.\nContoh: A11200904997.rar\nUntuk Ketua Kelas: SIapkan folder dengan nama Kode Kelas “_12” yang berisi kumpulan praktikum setiap mahasiswa. Lalu buat rar atau zip dan kirimkan ke email dosen.\nContoh: A114401_12.rar"
  },
  {
    "objectID": "studi-kasus.html",
    "href": "studi-kasus.html",
    "title": "Studi Kasus",
    "section": "",
    "text": "Terdapat dua studi kasus dalam modul game programming ini, diantaranya sebagai berikut:\n\nGame AI  Kecerdasan Buatan atau Artificial Intelligence merupakan bidang ilmu yang sangat populer baru-baru ini. Kecerdasan buatan dapat diterapkan pada suatu game atau disebut dengan Game AI.\nGame Augmented Reality  AR adalah teknologi yang menggabungkan benda maya dua dimensi dan ataupun tiga dimensi ke dalam sebuah lingkungan nyata tiga dimensi lalu memproyeksikan benda-benda maya tersebut dalam waktu nyata"
  },
  {
    "objectID": "konsep.html",
    "href": "konsep.html",
    "title": "Konsep",
    "section": "",
    "text": "Terdapat beberapa konsep atau teori yang perlu dipahami untuk memelajari dasar dari game programing diantanya sebagai berikut.\n\nInstalasi Tools (Unity)\nMenghubungkan object dengan variabel\nAnimation sprite 2D\nPersiapan Asset Game\nAndroid Deployment\nStandard Asset 2D dan Instant Development\nSave & Load dengan Playerpref\nKoordinat 2D vs 3D dan sistem arah tangan\nTranslasi Objek 3D"
  },
  {
    "objectID": "produk/the-forest-warior.html",
    "href": "produk/the-forest-warior.html",
    "title": "The Forest Warior",
    "section": "",
    "text": "The Forest Warrior merupakan game bergenre Metroidvania yang dikembangkan pada tahun 2023 yang dikembangkan oleh Emefem Studio. Game ini bercerita tentang seorang pejuang yang berani mempertaruhkan nyawanya untuk mengobati gurunya yang menderita penyakit langka. Pemain dapat berlari, melompati rintangan, dan melakukan serangan terhadap musuh yang ada di depannya. Prajurit ini dapat menyimpan senjata yang ditemukan di sepanjang jalan dan bahkan menggabungkannya menjadi senjata baru dan lebih kuat dengan pengetahuan yang telah dikuasai para pejuang untuk melawan suku suku dan hewan liar.\nBerikut adalah preview dari game The Forest Warior:\n\n\n\n\n\n\nUntuk mengunduh dan informasi selengkapnya dapat mengakses link berikut:\nklik disini"
  },
  {
    "objectID": "produk/chandramawa-brand-new-color.html",
    "href": "produk/chandramawa-brand-new-color.html",
    "title": "Chandramawa: Brand New Color",
    "section": "",
    "text": "Chandramawa: Brand New Color adalah Serius Game Platformer 2D 2022 yang dikembangkan oleh Zyliners. Karakter pemain “Chandra” menderita Kecemasan Sosial dan depresi karena terpaksa tinggal di rumah tanpa interaksi sosial kehidupan nyata selama pandemi. Setelah mengetahui bahwa Pandemi Covid telah usai, Chandra mulai keluar rumah untuk bertemu teman lama dan mencoba memulihkan kesehatan mentalnya. Ini adalah permainan linier yang berfokus pada cerita tentang perjuangan Chandra memulihkan kesehatan mentalnya dari gangguan kecemasan sosial dengan bertemu kembali dengan teman-teman lamanya.\nBerikut adalah preview dari game Chandramawa: Brand New Color:\n\n\n\n\nUntuk mengunduh dan informasi selengkapnya dapat mengakses link berikut:\nKlik disini!"
  },
  {
    "objectID": "produk/bengkel-gizi.html",
    "href": "produk/bengkel-gizi.html",
    "title": "Bengkel Gizi",
    "section": "",
    "text": "Bengkel Gizi adalah game puzzle tahun 2022 yang dikembangkan oleh Nimbus Tim. Berkisah tentang seorang anak muda yang berambisi mengembangkan bisnis makanan bergizi. Mereka mengawali perjalanannya dengan membuka Warteg bernama “Bengkel Gizi”. Pemain ditantang untuk menyediakan makanan sesuai dengan nutrisi yang dibutuhkan pelanggannya, yang meliputi lima jenis nutrisi yang dapat diminta pelanggan dengan beragam pilihan makanan untuk setiap jenis nutrisi yang dapat dipesan pelanggan. Hasilnya, pengguna akan menerima bintang di setiap level untuk membuka level yang lebih tinggi.\nBerikut adalah preview dari game Bengkel Gizi:\n\n\n\n\n\n\n\n\n\nUntuk informasi lebih lengkap dapat mengakses link berikut:\nKlik disini!"
  },
  {
    "objectID": "produk/last-beat.html",
    "href": "produk/last-beat.html",
    "title": "Last Beat",
    "section": "",
    "text": "LastBeat adalah game platform ritme 2d yang dikembangkan oleh Bambooo21 Studio. Ini diatur dalam dimensi abstrak (dimensi lain) di mana objek telah diubah menjadi pola geometris, dan pemain harus menavigasi melalui rintangan aneh sambil mengikuti ritme. Selama permainan, pemain akan menemukan portal dan musik ritme, masing-masing dengan karakteristik unik dan ritme yang berbeda, dan pemain harus bertahan hingga akhir dalam dimensi abstrak.\nBerikut adalah preview dari game Last Beat:\n\n\n\n\nUntuk mengunduh dan mendapatkan informasi lebih lanjut dapat mengakses link berikut:\nKlik disini!"
  },
  {
    "objectID": "contoh-produk.html",
    "href": "contoh-produk.html",
    "title": "Contoh Produk",
    "section": "",
    "text": "Berikut adalah beberapa contoh produk game karya dari mahasiswa Universitas Dian Nuswantoro:\n\nThe Forest Warrior  Karya : Muhammad Figo Mahendra (A11.2019.11813)\nChandramawa: Brand New Color  Karya : R. Pindiasto Syahram Pramudhito (A11.2019.12231)\nBengkel gizi  Karya : Rofi Noor Salim (A11.2019.11943)\nLastBeat  Karya : Dwi Candra Kirana (A11.2019.11759)\nWhat a Nightmare  Karya : Ar Rasyid Anvasa Saidi (A11.2019.11622)"
  },
  {
    "objectID": "produk/what-a-nightmare.html",
    "href": "produk/what-a-nightmare.html",
    "title": "What a Nightmare",
    "section": "",
    "text": "What a Nightmare adalah game lari tanpa akhir 3D yang dikembangkan oleh TNshi GD. Latar belakangnya tentang seorang anak laki-laki bernama Narottam yang memasuki dunia mimpi buruknya. Narrotam terus berlari menghindari rintangan dan juga monster. Narrotam dapat memperoleh dan memilih berbagai keterampilan untuk memudahkan melewati rintangan. Pemain dapat memilih karakter dan juga menyesuaikan keahlian untuk karakter mereka. Kumpulkan koin dan jiwa sebanyak mungkin dan dapatkan jarak terjauh.\nUntuk informasi lebih lanjut dapat mengakses link berikut:\nKlik disini!"
  }
]